openapi: 3.0.0
servers:
  - description: Cycle Public API
    url: https://api.cycle.io
info:
  license:
    name: CC-BY-3.0
    url: https://creativecommons.org/licenses/by/3.0/
  description: |
    The Cycle API is a [REST-based](http://en.wikipedia.org/wiki/Representational_state_transfer), resource-oriented API
    designed to be easy to use and understand. Using this API, you are able to fully interact with the Cycle Platform.

    All API responses return JSON, including errors. There is also support for cross-origin resource sharing, so this API can be used
    in a client-side web application as well.

    ## Auth Basics
    Every API request much have an accompanying API key in the Authorization header. For more informaiton on generating an API key head over to the [Portal Docs](https://docs.cycle.io/docs/hubs/API-access/api-key-generate).

    Your API key should never be made publicly available, published to a public repository, or used on a client side
    web app. If you would like to use the API from a web app, you should create a thin-client service that acts as a passthrough for
    your API requests.

    ## The Root Document
    Every response follows the same structure, known as the root document. The main data structure, known as a
    resource, is nested under a data field. If you request a collection of resources, the
    data field will be an array of those resources. If you request a single resource, the data field will be
    equal to that resource.

    If there is an error, the error field will be present, and the data field will be present and null.

    The root resource. If fetching a collection, this will be an array of resource objects.

    Includes fields - the key will be the name of the included item passed. All values of include fields
    will be a full resource structure. (i.e. including environments will embed full environment objects by ID)

    Meta Fields - the key will be equal to the name of the meta field provided. Values of meta
    fields will vary based on the resource. These values are injected into the data object(s).

    ## Scope
    In order to fetch resources that are part of a hub (containers, environments, etc.), you will need to pass an
    X-Hub-ID header. When fetching collections of resources, this will limit the response to contain only resources from
    the specified hub. Most requests require this header.

    ## Queries
    When trying to gather more complete or specific data you can use query paramaters to supplement the normal return (metas,
    includes) and you can also add specificity to the format and the order (sort, filter). It's worth understanding that
    sort & filter should only be used on collections.

    **Sort** - An array of sort values. To sort descending, put a `-`n front of the value, i.e. `-id`.

    **Include** - An array of include values. Included resources will show up under the root document's `include` field, with the key being the id
    of the included resource. In the case of applying an include to a collection of resources, if two resources share the same
    include, it will only appear once in the return.

    **Meta** - An array of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a
    collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to
    individual resources, and may appear in the root document. These will be clearly labeled.

    **Filter** - The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.
  version: 1.0.0
  title: Cycle API
  contact:
    email: support@cycle.io
tags:
  - name: Environments
    description: Environments are logical groupings of containers. All containers deployed inside an environment automatically have a private network built between them, enabling seamless communication.
  - name: Containers
    description: Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
  - name: Images
    description: 'Container images are atomic copies of a filesystem that are built from a file (ex: Dockerfile).'
  - name: Stacks
    description: Stacks offer a powerful way to declarative manage multiple containers, and their deployments to the Cycle platform. Using stacks, you are able to configure every aspect of your applications ahead of time, save it to your version controlled repo, and have Cycle automate the deployment any time you make a push.
  - name: Pipelines
    description: From simple tasks like importing an image, to complex sequences that affect entire clusters, Deployment Pipelines make it easy to automate nearly any task within Cycle.
  - name: DNS
    description: Cycle provides a full suite of DNS tooling.  Set up everything from a DNS Zone, record, certificate, and more.
  - name: Infrastructure
    description: Cycle creates a paradigm shift when it comes to dealing with your infrastructure. The primary focus when using the platform is your containers, while the servers underneath appear as a giant pool of distributed resources.
  - name: Providers
    description: 'A subgroup of infrastructure, provider calls deal specifically with infrastructure providers used through the Cycle platform. '
  - name: Servers
    description: A subgroup of infrastructure, servers call deal specificially with server resources.
  - name: SDN
    description: Software defined networks that can be created when a user needs to create a new private network spanning multiple environments.
  - name: WebsocketAuth
    description: 'A collection of calls used to create resources necessary to connect to a websocket based resource. '
  - name: Backups
    description: A subgroup of containers, backups refers to calls that have to do with automated backups managed through a Cycle integration.
  - name: Instances
    description: 'A subgroup of containers, instances refers to calls that work with container instance resources. '
  - name: ApiKeys
    description: A subgroup of Hubs, ApiKeys refers to calls that have to do with creating and managing API key resources.
  - name: ImageSources
    description: 'A subgroup of images, ImageSources refers to calls that have to do with creating and managing image source resources. '
  - name: InfrastructureIPs
    description: A subgroup of infrastructure which refers to calls that have to do with managing IPs for infrastructure providers.
  - name: Jobs
    description: 'Jobs are calls which refer to managing job resources. '
security:
  - bearerAuth: []
    hubAuth: []
paths:
  /v1/account:
    get:
      operationId: getAccount
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Fetch Account
      description: Gets the account associated with the authenticated user token.
      responses:
        '200':
          description: Returns an account.
          content:
            application/json:
              schema:
                title: AccountResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateAccount
      tags:
        - Account
      summary: Update Account
      description: Updates the current account
      requestBody:
        description: Parameters for updating an account.
        content:
          application/json:
            schema:
              description: Parameters for updating an account.
              type: object
              properties:
                name:
                  type: object
                  description: The name for the account.
                  properties:
                    first:
                      type: string
                    last:
                      type: string
                    allow_support_login:
                      type: boolean
      responses:
        '200':
          description: Returns the updated account resource.
          content:
            application/json:
              schema:
                title: AccountUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeAccount
      tags:
        - Account
      summary: Delete Account
      description: Deletes the current account
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: AccountUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/invites:
    get:
      operationId: getAccountInvites
      security:
        - bearerAuth: []
      tags:
        - Accounts
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Account Invites
      description: Lists invites associated with a given account.
      responses:
        '200':
          description: Returns a list of account invites.
          content:
            application/json:
              schema:
                title: AccountInvitesResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/invites/{inviteId}:
    patch:
      operationId: updateAccountInvite
      security:
        - bearerAuth: []
      tags:
        - Accounts
      parameters:
        - name: inviteId
          description: The ID of the given invite.
          in: path
          required: true
          schema:
            type: string
      summary: Update Account Invite
      description: Update a given invite.
      requestBody:
        description: Req body for updating account invite
        content:
          application/json:
            schema:
              type: object
              properties:
                accept:
                  type: boolean
                  description: Set accept to true to accept
                decline:
                  type: boolean
                  description: Set decline to true to decline
      responses:
        '200':
          description: Returns an membership resource.
          content:
            application/json:
              schema:
                title: UpdateAccountInviteResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/memberships:
    get:
      operationId: getAccountMemberships
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List Account Memberships
      description: Lists the memberships for a given account.
      responses:
        '200':
          description: List of membership resources.
          content:
            application/json:
              schema:
                title: AccountMembershipsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/logins:
    get:
      operationId: getAccountLogins
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: List Account Logins
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      description: Lists logins associated with a given account.
      responses:
        '200':
          description: Returns a collection of logins.
          content:
            application/json:
              schema:
                title: AccountLoginsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/EmployeeLogin'
                        - $ref: '#/components/schemas/PasswordLogin'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/password:
    patch:
      operationId: resetPassword
      security:
        - bearerAuth: []
      tags:
        - Accounts
      summary: Update Account Invite
      description: Update a given invite.
      requestBody:
        description: Req body for updating account invite
        content:
          application/json:
            schema:
              type: object
              properties:
                current:
                  type: string
                  description: Current Password
                new:
                  type: string
                  description: New Password
      responses:
        '200':
          description: Returns an Account resource.
          content:
            application/json:
              schema:
                title: ResetPasswordApiResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/2fa/setup:
    get:
      operationId: getTwoFaInfo
      tags:
        - Accounts
      parameters: []
      summary: Get TwoFa setup info
      description: Get barcode and secret for TwoFa authentication
      responses:
        '200':
          description: Returns a TwoFaSetupResponse resource.
          content:
            application/json:
              schema:
                title: TwofaSetupResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TwoFaDisableResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: setupTwoFa
      tags:
        - Accounts
      parameters: []
      summary: Setup TwoFa
      description: Setup TwoFa for an account
      requestBody:
        description: Parameters setting up TwoFa
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: The token to authenticate TwoFa setup.
      responses:
        '200':
          description: Returns a TwoFaSetupResponse resource.
          content:
            application/json:
              schema:
                title: TwofaSetupResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TwoFaSetupResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/account/2fa/disable:
    post:
      operationId: disableTwoFa
      tags:
        - Accounts
      parameters: []
      summary: Disable TwoFa
      description: Disable TwoFa for an account
      requestBody:
        description: Parameters setting up TwoFa
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: The token to authenticate TwoFa Disable.
      responses:
        '200':
          description: Returns a TwoFaDisableResponse resource.
          content:
            application/json:
              schema:
                title: TwofaDisableResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TwoFaDisableResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/announcements:
    get:
      operationId: getAnnouncementsList
      security:
        - bearerAuth: []
      tags:
        - Announcements
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Announcements
      description: Lists any important updates posted by the Cycle team
      responses:
        '200':
          description: List of announcements.
          content:
            application/json:
              schema:
                title: AnnouncementsListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Announcement'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/orders:
    get:
      operationId: getOrders
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - due
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - promo_codes
      summary: List Billing Orders
      description: Requires the `billing-orders-manage` capability.
      responses:
        '200':
          description: Returns a collection of billing order resources.
          content:
            application/json:
              schema:
                title: ListBillingOrdersResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  includes:
                    $ref: '#/components/schemas/OrderIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createOrder
      tags:
        - Billing
      parameters: []
      summary: Create order
      description: Requires TODO capability.
      requestBody:
        description: Parameters for creating a new order
        content:
          application/json:
            schema:
              type: object
              properties:
                tier_plan_id:
                  type: string
                  description: Id associated with the tier plan
                support_plan_id:
                  type: string
                  description: Id associated with the support plan
                term_length:
                  type: string
                  description: String that defines term length
                  enum:
                    - once
                    - monthly
                    - yearly
                promo_code:
                  type: string
                  description: String that defines a promo code
      responses:
        '201':
          description: Returns an order resource.
          content:
            application/json:
              schema:
                title: OrderResource
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BillingOrder'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/orders/{orderId}:
    get:
      operationId: getBillingOrder
      tags:
        - Billing
      parameters:
        - name: orderId
          description: The ID of the billing order.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Billing Order
      description: Requires the `billing-orders-manage` capability.
      responses:
        '200':
          description: Returns a billing order resource
          content:
            application/json:
              schema:
                title: FetchBillingOrderResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateBillingOrder
      tags:
        - Billing
      parameters:
        - name: orderId
          description: The ID of the billing order.
          in: path
          required: true
          schema:
            type: string
      summary: Update Billing Order
      description: Requires the `billing-orders-manage` capability.
      requestBody:
        description: Parameters for creating a new order
        content:
          application/json:
            schema:
              type: object
              properties:
                tier_plan_id:
                  type: string
                  description: Id associated with the tier plan
                support_plan_id:
                  type: string
                  description: Id associated with the support plan
                term_length:
                  type: string
                  description: String that defines term length
                  enum:
                    - once
                    - monthly
                    - yearly
                promo_code:
                  type: string
                  description: String that defines a promo code
      responses:
        '200':
          description: Returns a billing order resource.
          content:
            application/json:
              schema:
                title: BillingOrderUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/orders/{orderId}/tasks:
    post:
      tags:
        - Orders
      operationId: createOrderJob
      parameters:
        - name: orderId
          description: The ID of the requested order
          in: path
          required: true
          schema:
            type: string
      summary: Create Order Job
      description: Used to confirm an order
      requestBody:
        description: Parameters for creating a new order job
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - confirm
                  description: The name of the action to perform
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/plans/support:
    get:
      operationId: getBillingSupportPlans
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Support Plans
      description: Doesn't require a specific capability to call.
      responses:
        '200':
          description: Returns a billing support plan.
          content:
            application/json:
              schema:
                title: ListBillingSupportPlanReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SupportPlan'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/plans/tiers:
    get:
      operationId: getTiers
      tags:
        - Billing
      summary: List Tiers
      description: Returns list of availiable tiers
      parameters: []
      responses:
        '200':
          description: Returns a collection of tier resources.
          content:
            application/json:
              schema:
                title: ListTiersResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TierPlan'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/methods:
    get:
      operationId: getBillingMethods
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Billing Methods
      description: Requires the `billing-methods-manage` capability.
      responses:
        '200':
          description: returns a collection of billing methods.
          content:
            application/json:
              schema:
                title: ListBillingMethodsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Method'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createBillingMethod
      tags:
        - Billing
      parameters: []
      summary: Create Billing Method
      description: Requires the `billing-methods-manage` capability.
      requestBody:
        description: Parameters for creating a new billing method.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - primary
                - address
                - credit_card
              properties:
                name:
                  type: string
                  description: A name for the billing method.
                primary:
                  type: boolean
                  description: A boolean where true represents a billing method being primary.
                address:
                  $ref: '#/components/schemas/Address'
                credit_card:
                  type: object
                  required:
                    - name
                    - number
                    - cvv
                    - expiration
                  properties:
                    name:
                      type: string
                    number:
                      type: string
                    cvv:
                      type: string
                    expiration:
                      type: object
                      required:
                        - month
                        - year
                      properties:
                        month:
                          type: number
                        year:
                          type: number
      responses:
        '200':
          description: Returns a billing method resource.
          content:
            application/json:
              schema:
                title: CreateBillingMethodReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Method'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/methods/{methodId}:
    get:
      operationId: getBillingMethod
      tags:
        - Billing
      parameters:
        - name: methodId
          description: The ID of the billing method.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Billing Method
      description: Requires the `billing-methods-manage` capability.
      responses:
        '200':
          description: Returns a billing method resource.
          content:
            application/json:
              schema:
                title: FetchBillingMethodReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Method'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateBillingMethod
      tags:
        - Billing
      parameters:
        - name: methodId
          description: The ID of the billing method.
          in: path
          required: true
          schema:
            type: string
      summary: Update Billing Invoice
      description: Requires the `billing-methods-manage` capability.
      requestBody:
        description: Parameters for updating a billing method.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the billing method.
                primary:
                  type: boolean
                  description: A boolean where true represents a billing method being primary.
                address:
                  $ref: '#/components/schemas/Address'
                credit_card:
                  $ref: '#/components/schemas/CreditCard'
      responses:
        '200':
          description: Returns a billing method resource.
          content:
            application/json:
              schema:
                title: UpdateBillingMethodReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Method'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeBillingMethod
      tags:
        - Billing
      parameters:
        - name: methodId
          description: The ID of the billing method.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Biilling Method
      description: Requires the `billing-methods-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/invoices:
    get:
      operationId: getInvoices
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - due
      summary: List Billing Invoices
      description: Requires the `billing-invoices-view` capability.
      responses:
        '200':
          description: Returns a collection of invoice resources.
          content:
            application/json:
              schema:
                title: ListBillingInvoicesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/invoices/{invoiceId}:
    get:
      operationId: getInvoice
      tags:
        - Billing
      parameters:
        - name: invoiceId
          description: The ID of the invoice.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Billing Invoice
      description: Requires the `billing-invoices-view` capability.
      responses:
        '200':
          description: Returns an invoice resource.
          content:
            application/json:
              schema:
                title: FetchBillingInvoiceReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/invoices/{invoiceId}/tasks:
    post:
      operationId: createInvoiceJob
      tags:
        - Billing
      parameters:
        - name: invoiceId
          description: The ID of the invoice.
          in: path
          required: true
          schema:
            type: string
      summary: Create Invoice Job
      description: Requires the `billing-invoices-pay` capability.
      requestBody:
        description: Parameters for creating a new invoice job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - pay
                  description: The name of the action to perform.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/services:
    get:
      operationId: getBillingServices
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Billing Services
      description: Requries the `billing-services-view` capability.
      responses:
        '200':
          description: Returns a collection of billing service resources.
          content:
            application/json:
              schema:
                title: ListBillingServicesResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/services/{servicesId}:
    get:
      operationId: getBillingService
      tags:
        - Billing
      parameters:
        - name: servicesId
          description: The ID of the billing service.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Billing Service
      description: Requries the `billing-services-view` capability.
      responses:
        '200':
          description: Returns a billing service resources.
          content:
            application/json:
              schema:
                title: ListBillingServicesResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/services/overages:
    get:
      operationId: getBillingOverages
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Billing Overages
      description: Doesn't require a specific capability.
      responses:
        '200':
          description: Returns a billing overage resource.
          content:
            application/json:
              schema:
                title: ListBillingOveragesResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Overage'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/credits:
    get:
      operationId: getCredits
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Billing Credits
      description: Requires the `billing-credits-view` capability.
      responses:
        '200':
          description: Returns a collection of credit resources.
          content:
            application/json:
              schema:
                title: ListBillingCreditsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Credit'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/billing/credits/{creditsId}:
    get:
      operationId: getCredit
      tags:
        - Billing
      parameters:
        - name: creditsId
          description: The ID for a given credit.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Billing Credit
      description: Requires the `billing-credits-view` capability.
      responses:
        '200':
          description: Returns a credit resource.
          content:
            application/json:
              schema:
                title: FetchBillingCreditReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Credit'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments:
    get:
      operationId: getEnvironments
      tags:
        - Environments
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers
                - containers_count
                - instances_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stacks
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given environment(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the environment's current state.

            ### Stack Build
            `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish to filter for and the return sill be any environments that have the stack build deployed to them.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Environments
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a collection of environment resources.
          content:
            application/json:
              schema:
                title: EnvironmentListResponse
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Environment'
                  includes:
                    type: object
                    properties:
                      creators:
                        $ref: '#/components/schemas/CreatorInclude'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createEnvironment
      tags:
        - Environments
      parameters: []
      summary: Create Environment
      description: Requires the `environments-create` capability.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - cluster
                - about
                - features
                - stack
              properties:
                name:
                  type: string
                  description: A user defined name for the environment resource.
                cluster:
                  type: string
                  description: The cluster this environment is associated with.
                about:
                  type: object
                  description: Contains details regarding the environment.
                  required:
                    - description
                  properties:
                    description:
                      type: string
                      description: A custom description for this environment.
                features:
                  $ref: '#/components/schemas/Features'
                stack:
                  type: object
                  nullable: true
                  description: An object representing the associated stack.
                  required:
                    - id
                    - build_id
                  properties:
                    id:
                      $ref: '#/components/schemas/ID'
                    build_id:
                      $ref: '#/components/schemas/ID'
      responses:
        '201':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}:
    get:
      operationId: getEnvironmentById
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers
                - containers_count
                - instances_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stacks
      summary: Fetch Environment
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
                  includes:
                    type: object
                    properties:
                      creators:
                        $ref: '#/components/schemas/CreatorInclude'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateEnvironment
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Update Environment
      description: Updates the specificed environment, setting the values of the parameters passed. If any parameters are omitted, they will be left unchanged. Requires the `environments-update` capability.
      requestBody:
        description: Parameters for updating an environment.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                about:
                  $ref: '#/components/schemas/EnvironmentAbout'
      responses:
        '200':
          description: Returns an environment resource.
          content:
            application/json:
              schema:
                title: EnvironmentResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Environment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeEnvironment
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Environment
      description: Requires the `environments-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/tasks:
    post:
      tags:
        - Environments
      operationId: createEnvironmentJob
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Create Environment Job
      description: Used to `start`, `stop`, or `delete` an environment. Requires the `environments-state` capability.
      requestBody:
        description: Parameters for creating a new environment job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - start
                    - stop
                    - initialize
                  description: The name of the action to perform.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/summary:
    get:
      tags:
        - Environments
      operationId: getEnvironmentSummary
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Environment Summary
      description: Fetches a single summary object for a specific environment. Contains useful and relevant data/statistics that would otherwise be several separate API calls.  Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns an environment summary object.
          content:
            application/json:
              schema:
                title: EnvironmentSummaryResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EnvironmentSummary'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/lb:
    get:
      operationId: getLoadBalancerInfo
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the load balancer resides.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch LB Info
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a load balancer info resource.
          content:
            application/json:
              schema:
                title: LoadBalancerEnvironmentService
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoadBalancerInfoReturn'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/lb/tasks:
    post:
      operationId: reconfigureLoadBalancer
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the environment where this load balancer resides.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure LB
      description: Creates a task that will update the load balancer's configuration.
      requestBody:
        description: Parameters for reconfiguring a load balancer.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  enum:
                    - reconfigure
                  description: The name of the action to perform.
                contents:
                  type: object
                  properties:
                    customize:
                      type: boolean
                      description: Boolean that sets custom vs default VPN configuration
                    high_availability:
                      type: boolean
                      description: A boolean where `true` represents the desire to run the environment load balancer service in high availability mode.
                    config:
                      type: object
                      description: The config object for the loadbalancer service.
                      nullable: true
                      required:
                        - haproxy
                      properties:
                        version:
                          type: string
                        ipv4:
                          type: boolean
                          nullable: true
                          description: Allow / disallow traffic to be routed via IPv4.
                        ipv6:
                          type: boolean
                          nullable: true
                          description: Allow / disallow traffic to be routed via IPv6.
                        haproxy:
                          type: object
                          description: Describes settings that are passed to HAProxy within the load balancer.
                          nullable: true
                          required:
                            - default
                            - ports
                          properties:
                            default:
                              $ref: '#/components/schemas/HAProxyConfig'
                            ports:
                              type: object
                              additionalProperties:
                                type: string
                                oneOf:
                                  - $ref: '#/components/schemas/HAProxyConfig'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/discovery/tasks:
    post:
      operationId: reconfigureDiscovery
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the environment where this discovery service resides.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure Discovery
      description: Creates a task that will update the discovery service's configuration.
      requestBody:
        description: Parameters for reconfiguring a discovery service.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  enum:
                    - reconfigure
                  description: The name of the action to perform.
                contents:
                  type: object
                  properties:
                    high_availability:
                      type: boolean
                      description: A boolean where `true` represents the desire to run the environment discovery service in high availability mode.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/vpn:
    get:
      operationId: getVPNInfo
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the VPN resides.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch VPN Info
      description: Requires the `environments-vpn` capability.
      responses:
        '200':
          description: Returns a VPNInfo resource.
          content:
            application/json:
              schema:
                title: VPNInfoEnvironmentService
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VPNInfoReturn'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/vpn/users:
    get:
      operationId: getVPNUsers
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service resides.
          in: path
          required: true
          schema:
            type: string
      summary: List VPN Users
      description: Requires the `environments-vpn-manage` capability.
      responses:
        '200':
          description: Returns a list of VPN users for the given VPN.
          content:
            application/json:
              schema:
                title: getVPNUsersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VPNUsers'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createVPNUser
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service resides.
          in: path
          required: true
          schema:
            type: string
      summary: Create VPN User
      description: Requires the `environments-vpn-manage` capability.
      requestBody:
        description: Parameters for creating a new VPN user.
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  $ref: '#/components/schemas/VPNUsers'
      responses:
        '201':
          description: Returns a VPN user resource.
          content:
            application/json:
              schema:
                title: VPNUserResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/VPNUsers'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/vpn/users/{userId}:
    delete:
      operationId: removeVPNUser
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The environmentId where the VPN service the given user belongs to resides.
          in: path
          required: true
          schema:
            type: string
        - name: userId
          description: The userId of the user to be deleted.
          in: path
          required: true
          schema:
            type: string
      summary: Remove VPN user
      description: Requires the `environments-vpn-manage` capability.
      responses:
        '200':
          description: Returns a null data object.
          content:
            application/json:
              schema:
                title: VPNUserDeleteReturn
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/services/vpn/tasks:
    post:
      operationId: reconfigureVPN
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the environment the VPN service resides in.
          in: path
          required: true
          schema:
            type: string
      summary: Reconfigure VPN
      description: Requires the `environments-vpn-manage` capability.
      requestBody:
        description: An object to be submitted when reconfiguring a VPN service.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  enum:
                    - reconfigure
                  description: The action to take.
                contents:
                  type: object
                  description: Additional information the platform needs to create this job.
                  properties:
                    enable:
                      type: boolean
                      description: A boolean where true means the VPN service is enabled.
                    config:
                      type: object
                      nullable: true
                      description: The config object for the VPN service, in this case without the required fields normally found in a VPN config object.
                      properties:
                        allow_internet:
                          type: boolean
                          description: If true, routes all traffic through the VPN, even non-Cycle traffic.
                        auth:
                          type: object
                          description: Auth configuration for the VPN.
                          required:
                            - webhook
                            - cycle_accounts
                          properties:
                            webhook:
                              type: string
                              nullable: true
                              description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                            cycle_accounts:
                              type: boolean
                              description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                            vpn_accounts:
                              type: boolean
                              description: If true, allows the custom VPN accounts to log in to the VPN.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/telemetry/instances:
    get:
      operationId: getEnvironmentInstancesTelemetry
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the desired environment
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Range
            `filter[range-start]=timestamp&filter[range-end]=timestamp` filter by range giving two times a `start` time and an `end` time. Date format `2023-03-07T14:55:17-08:00`.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
      summary: List Telemetry Data
      description: Requires the `environments-view` capability.
      responses:
        '200':
          description: Returns a collection of telemetry data points.
          content:
            application/json:
              schema:
                title: EnvironmentInstanceTelemetry
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InstanceTelemetryPoint'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/scoped-variables:
    get:
      operationId: listScopedVariables
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given scoped variable(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the scoped variable's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Scoped Variables
      description: Requires the `scoped-variables-view` capability.
      responses:
        '200':
          description: Returns a collection of scoped variable resources.
          content:
            application/json:
              schema:
                title: ListScopedVariablesResponse
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScopedVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createScopedVariable
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
      summary: Create Scoped Variable
      description: Requires the `scoped-variables-manage` capability.
      requestBody:
        description: Parameters for creating a scoped variable.
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - scope
                - source
              properties:
                identifier:
                  type: string
                  description: An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable.
                secret:
                  nullable: true
                  type: object
                  description: An object with information about the encryption of the scoped variable.
                  required:
                    - encrypted
                  properties:
                    encrypted:
                      type: boolean
                      description: A boolean where true means the scoped variables value is encrypted.
                    hint:
                      type: string
                      description: A hint for the decryption password.
                scope:
                  $ref: '#/components/schemas/ScopedVariableScope'
                source:
                  type: object
                  description: The source or value of the scoped variable.
                  discriminator:
                    propertyName: type
                  anyOf:
                    - $ref: '#/components/schemas/RawSource'
                    - $ref: '#/components/schemas/URLSource'
      responses:
        '201':
          description: Returns a scoped variable resource.
          content:
            application/json:
              schema:
                title: CreateScopedVariableResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScopedVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/environments/{environmentId}/scoped-variables/{scopedVariableId}:
    get:
      operationId: fetchScopedVariable
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: scopedVariableId
          description: The ID of the requested scoped variable.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Scoped Variable
      description: Requires the `scoped-variables-view` capability.
      responses:
        '200':
          description: Returns a scoped variable resource.
          content:
            application/json:
              schema:
                title: ScopedVariableResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScopedVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateScopedVariable
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: scopedVariableId
          description: The ID of the requested scoped variable.
          in: path
          required: true
          schema:
            type: string
      summary: Update Scoped Variable
      description: Requires the `scoped-variables-manage` capability.
      requestBody:
        description: Parameters for updating a scoped variable.
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable.
                secret:
                  nullable: true
                  type: object
                  description: An object with information about the encryption of the scoped variable.
                  required:
                    - encrypted
                  properties:
                    encrypted:
                      type: boolean
                      description: A boolean where true means the scoped variables value is encrypted.
                    hint:
                      type: string
                      description: A hint for the decryption password.
                scope:
                  $ref: '#/components/schemas/ScopedVariableScope'
                source:
                  type: object
                  description: The source or value of the scoped variable.
                  discriminator:
                    propertyName: type
                  anyOf:
                    - $ref: '#/components/schemas/RawSource'
                    - $ref: '#/components/schemas/URLSource'
      responses:
        '200':
          description: Returns a scoped variable resource.
          content:
            application/json:
              schema:
                title: UpdateScopedVariableResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScopedVariable'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeScopedVariableById
      tags:
        - Environments
      parameters:
        - name: environmentId
          description: The ID of the requested environment.
          in: path
          required: true
          schema:
            type: string
        - name: scopedVariableId
          description: The ID of the requested scoped variable.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Scoped Variable
      description: Requires the `scoped-variables-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers:
    get:
      operationId: getContainers
      tags:
        - Containers
      summary: List Containers
      description: Requires the `containers-view` capability.
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - instances_count
                - domain
                - domains
                - ips
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search containers for a value associated with a field on the given container(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the container's current state.

            ### Service
            `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`, `discovery`, `vpn`.

            ### Public Network
            `filter[public_network]=value` public network filtering will allow you to filter by the containers network settings: `enabled`, `disabled`, `egress-only`.

            ### Image
            `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and the return will be any containers currently using the image.

            ### Environment
            `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any containers in that environment.

            ### Tags
            `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has the tags you submit it will be part of the return.

            ### Stacks
            `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and the return will be any containers deployed associated with 'containers' from the stack.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
          style: deepObject
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Returns a collection of container resources.
          content:
            application/json:
              schema:
                title: ListContainersResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Container'
                  includes:
                    $ref: '#/components/schemas/ContainerIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createContainer
      tags:
        - Containers
      parameters: []
      summary: Create Container
      description: Requires the `containers-deploy` capability.
      requestBody:
        description: Parameters for creating a new container.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - environment_id
                - image_id
                - stateful
                - config
              properties:
                name:
                  type: string
                  description: A user defined name for the container.
                environment_id:
                  type: string
                  description: An identifier for the environment this container will be deployed to.
                image_id:
                  type: string
                  description: An identifier for the image used to create this container.
                stateful:
                  type: boolean
                  description: A boolean where true represents this container is stateful.
                config:
                  $ref: '#/components/schemas/Config'
                volumes:
                  type: array
                  items:
                    $ref: '#/components/schemas/Volumes'
                annotations:
                  type: object
                  description: User defined meta data for the container.
                  additionalProperties:
                    type: string
      responses:
        '201':
          description: Returns a container resource.
          content:
            application/json:
              schema:
                title: ContainerResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}:
    get:
      operationId: getContainerById
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - instances_count
                - domain
                - domains
                - ips
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - images
                - stack_builds
                - stacks
                - environments
      summary: Fetch Container
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an container resource.
          content:
            application/json:
              schema:
                title: ContainerResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateContainer
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the container.
          in: path
          required: true
          schema:
            type: string
      summary: Update Container
      description: Updates the specified container, setting the values of the parameters passed.  If any parameters are omitted, they will be left unchanged. Requires the `contianers-update` capability.
      requestBody:
        description: Parameters for updating a container.
        content:
          application/json:
            schema:
              description: Parameters for updating a container.
              type: object
              properties:
                name:
                  type: string
                  description: The name for the container.
                identifier:
                  type: string
                  description: The name for the identifier.
                deprecate:
                  type: boolean
                  description: Sets whether container should be deprecated.
                annotation:
                  type: object
                  description: User meta data for the container.
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Returns the updated container resource.
          content:
            application/json:
              schema:
                title: ContainerUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Container'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeContainer
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Container
      description: Requires the `contianers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/summary:
    get:
      operationId: getContainerSummary
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Container Summary
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an container summary resource.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ContainerSummary'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/tasks:
    post:
      tags:
        - Containers
      operationId: createContainerJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
      summary: Create Container Job
      description: Used to perform different actions on a given container. Requires the `containers-state`, `containers-update`, or `containers-volumes-manage` capability (respectively).
      requestBody:
        description: Parameters for creating a new container job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ContainerAction'
                - $ref: '#/components/schemas/ReconfigureContainer'
                - $ref: '#/components/schemas/ReconfigureVolumes'
                - $ref: '#/components/schemas/Reimage'
                - $ref: '#/components/schemas/Scale'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances:
    get:
      operationId: getInstances
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the container this instance is created from.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - locations
                - providers
                - containers
                - environments
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current state.

            ### Search
            `filter[search]=value` search instances for a value associated with a field on the given instance(s).

            ### Server
            `filter[server]=ID` server filtering by ID.  Submit the ID of the server you wish to filter for and the return will be any instances of the container currently deployed to the given server.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Instances
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a collection of contianer instance resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createContainerInstance
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the container this instance is created from.
          in: path
          required: true
          schema:
            type: string
      summary: Create Instance(s)
      description: Requires the `containers-update` capability.
      requestBody:
        description: Parameters for creating a container instance.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - server_id
                  - new_instances
                properties:
                  server_id:
                    type: string
                    description: The ID of the server the new instance(s) should be deployed to.
                  new_instances:
                    type: integer
                    description: The number of new instances to be created on the given server.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeMultipleContainerInstances
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the container the instance(s) were created from.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Instance(s)
      description: Requires the `containers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}:
    get:
      operationId: getContainerInstance
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - locations
                - providers
                - containers
                - environments
      summary: Fetch Instance
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a container instance resource.
          content:
            application/json:
              schema:
                title: ContainerInstanceResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeContainerInstance
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Instance
      description: Requires the `containers-update` capability.
      responses:
        '200':
          description: Returns a task descriptor
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/ssh:
    get:
      operationId: getSSHConnection
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch SSH Credentials
      description: Requires the `containers-ssh` capability.
      responses:
        '200':
          description: Returns a SSH connection response.
          content:
            application/json:
              schema:
                title: ContainerInstanceSSHResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SSHResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: expireInstanceSSHTokens
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Expire SSH Credentials
      description: Requires the `containers-ssh` capability.
      responses:
        '200':
          description: Returns a data object holding the amount of tokens removed.
          content:
            application/json:
              schema:
                title: ExpireSSHTokenResponse
                type: object
                properties:
                  data:
                    type: object
                    description: The number of tokens expired.
                    required:
                      - tokens
                    properties:
                      tokens:
                        type: integer
                        description: The number of tokens expired.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/tasks:
    post:
      tags:
        - Instances
      operationId: createContainerInstanceJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Create Instance Task
      description: Used to perform different actions on a given container instance, requries `containers-instance-migrate` capability.
      requestBody:
        description: Parameters for creating a new container instance job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RevertMigration'
                - $ref: '#/components/schemas/Migrate'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/volumes:
    get:
      operationId: getContainerInstanceVolumes
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: Fetch Instance Volume(s)
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an array of container instance volume resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceVolumeResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InstanceVolume'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/report:
    get:
      operationId: getInstanceResourcesTelemetryReport
      tags:
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Range
            `filter[range-start]=timestamp&filter[range-end]=timestamp` filter by range giving two times a `start` time and an `end` time. Date format `2023-03-07T14:55:17-08:00`
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
      summary: Fetch Instance Telemetry Report
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns an instance telemetry report.
          content:
            application/json:
              schema:
                title: InstaceTelemetryReportReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InstanceTelemetryReport'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/servers:
    get:
      operationId: ContainersListServers
      tags:
        - Containers
      summary: List Container Servers
      description: Requires the `containers-view` capability.
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - primary_ip
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Returns a list of server instance resources.
          content:
            application/json:
              schema:
                title: ContainerInstanceServerListResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServersList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/servers/usable:
    get:
      operationId: getUsableServers
      tags:
        - Containers
      summary: List Usable Servers
      description: Requires the `containers-view` capability.
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - location
                - models
                - providers
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Returns a list of server resources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/compatible-images:
    get:
      operationId: getCompatibleImages
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: Fetch Compatible Images
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a collection of image resources.
          content:
            application/json:
              schema:
                title: CompatibleImagesReponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/backups:
    get:
      operationId: getBackupsCollection
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Backups
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a list of container backup resources.
          content:
            application/json:
              schema:
                title: ConatainerBackupListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Backup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/backups/{backupId}:
    get:
      operationId: getBackup
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Backup
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a backup resource.
          content:
            application/json:
              schema:
                title: SingleBackupReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Backup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeBackup
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Backup
      description: Requires the `containers-backups-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/backups/{backupId}/tasks:
    post:
      tags:
        - Backups
      operationId: restoreBackupJob
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID of the backup.
          in: path
          required: true
          schema:
            type: string
      summary: Create Backup Job
      description: Used to restore a backup for a given container instance. Requires the `containers-backups-manage` capability.
      requestBody:
        description: Parameters for creating a new backup job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  enum:
                    - restore
                  description: The action to take.
                contents:
                  type: object
                  description: Additional information the platform needs to create this job.
                  required:
                    - instance_id
                  properties:
                    instance_id:
                      type: string
                      description: The ID of the instance this backup is being restored to.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                title: TaskResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/backups/{backupId}/logs:
    get:
      operationId: getBackupLogs
      tags:
        - Backups
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: backupId
          description: The ID for the container backup.
          in: path
          required: true
          schema:
            type: string
      summary: List Backup Logs
      description: Requires the `containers-backups-view` capability.
      responses:
        '200':
          description: Returns a collection of backup logs.
          content:
            application/json:
              schema:
                title: EnvironmentBackupsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Logs'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/telemetry/instances:
    get:
      operationId: getContainerInstancesTelemetry
      tags:
        - Containers
      parameters:
        - name: containerId
          description: The ID of the desired container
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Range
            `filter[range-start]=timestamp&filter[range-end]=timestamp` filter by range giving two times a `start` time and an `end` time. Date format `2023-03-07T14:55:17-08:00`.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
          style: deepObject
      summary: List Telemetry Data
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: Returns a collection of telemetry data points.
          content:
            application/json:
              schema:
                title: ContainerInstancesTelemetry
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InstanceTelemetryPoint'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones:
    get:
      operationId: getZonesCollection
      tags:
        - DNS
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the DNS zone's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List DNS Zones
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a collection of DNS zone resources.
          content:
            application/json:
              schema:
                title: DNSZoneListReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Zone'
                  includes:
                    $ref: '#/components/schemas/ZoneIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createDNSZone
      tags:
        - DNS
      parameters: []
      summary: Create DNS Zone
      description: Requires the `dns-manage` capability.
      requestBody:
        description: Parameters for creating a new DNS zone.
        content:
          application/json:
            schema:
              type: object
              required:
                - hosted
                - origin
              properties:
                hosted:
                  type: boolean
                  description: A boolean where true represents the desire for the origin to be of the type `hosted`.
                origin:
                  type: string
                  description: The origin that will be created.
      responses:
        '201':
          description: Returns the DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones/{zoneId}:
    get:
      operationId: getDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch DNS Zone
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a DNS zone resource.
          content:
            application/json:
              schema:
                title: SingleDNSZoneReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
      summary: Update DNS Zone
      description: Requires the `dns-manage` capability.
      requestBody:
        description: Parameters for updating a DNS Zone.
        content:
          application/json:
            schema:
              type: object
              required:
                - hosted
              properties:
                hosted:
                  type: boolean
                  description: A boolean where true represents the desire for the origin to be of the type `hosted`.
      responses:
        '200':
          description: Returns a DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Zone'
                  includes:
                    $ref: '#/components/schemas/ZoneIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeDNSZone
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Remove DNS Zone
      description: Requires the `dns-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones/{zoneId}/tasks:
    post:
      operationId: DNSZoneTask
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Create DNS Zone Job
      description: Used to perform different actions on a given DNS zone, requires the `dns-manage` capability.
      requestBody:
        description: Parameters for creating a new DNS zone job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action that the job will take.
                  enum:
                    - verify
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones/{zoneId}/records:
    get:
      operationId: getRecordsCollection
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - containers
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the record's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Records
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a collection of DNS zone resources.
          content:
            application/json:
              schema:
                title: DNSZoneRecordListReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Record'
                  includes:
                    $ref: '#/components/schemas/RecordIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createDNSRecord
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
      summary: Create Record
      description: Requires the `dns-manage` capability.
      requestBody:
        description: Parameters for creating a new DNS record.
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - name
              properties:
                type:
                  $ref: '#/components/schemas/RecordTypes'
                name:
                  type: string
                  description: A name for the given record where `@` represents the desire to use the root of the origin.
      responses:
        '201':
          description: Returns the DNS zone resource.
          content:
            application/json:
              schema:
                title: DNSZoneCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Record'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones/{zoneId}/records/{recordId}:
    patch:
      operationId: updateDNSRecord
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Update DNS Record
      description: Requires the `dns-manage` capability.
      requestBody:
        description: Parameters for updateing a DNS record. The name value cannot be updated and is ommitted from the properties.
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  $ref: '#/components/schemas/RecordTypes'
      responses:
        '200':
          description: Returns a DNS record resource.
          content:
            application/json:
              schema:
                title: DNSRecordUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Record'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeDNSRecord
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Delete Record
      description: Requires the `dns-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/zones/{zoneId}/records/{recordId}/tasks:
    post:
      operationId: DNSRecordTask
      tags:
        - DNS
      parameters:
        - name: zoneId
          description: The ID of the zone.
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          description: The ID of the record.
          in: path
          required: true
          schema:
            type: string
      summary: Create a DNS record Job
      description: Used to perform different actionson a given DNS record, requires the `dns-manage` capability.
      requestBody:
        description: Parameters for creating a new DNS zone job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action that the job will take.
                  enum:
                    - generateCert
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/tls/attempts:
    get:
      operationId: DNSTLSAttempts
      tags:
        - DNS
      parameters:
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Domain
            `filter[domain]=value` filter the return for TLS attempts by domain.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List TLS Generate Attempts
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a list of TLS certificate generation attempt resources.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attempt'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/dns/tls/certificates/lookup:
    get:
      operationId: lookupDnsCertificate
      tags:
        - DNS
      parameters:
        - name: domain
          in: query
          style: form
          required: true
          description: The domain to lookup.
          schema:
            type: string
        - name: wildcard
          in: query
          style: form
          required: false
          description: Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For example, if you are looking for a certificate for x.test.com, setting this to true will identify a *.test.com certificate that would also be applicable.
          schema:
            type: boolean
      summary: Fetch Domain TLS Certificate
      description: Requires the `dns-view` capability.
      responses:
        '200':
          description: Returns a TLS certificate bundle resource.
          content:
            application/json:
              schema:
                title: DNSZoneCertificateLookupResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DnsTlsCertificate'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs:
    get:
      operationId: getHubs
      tags:
        - Hubs
      security:
        - bearerAuth: []
      summary: List Hubs
      description: Lists all associated hubs.
      responses:
        '200':
          description: Returns a list of hub resources.
          content:
            application/json:
              schema:
                title: ListHubsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hub'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters: []
      summary: Create Hub
      description: Create a hub resource.
      requestBody:
        description: Parameters for creating a hub.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the hub.
                integrations:
                  $ref: '#/components/schemas/HubIntegrations'
                webhooks:
                  type: object
                  description: All hub webhooks for the given hub.
                  required:
                    - server_deployed
                  properties:
                    server_deployed:
                      nullable: true
                      type: string
                      description: A webhook to report information to each time a server is deployed on the given hub.
      responses:
        '200':
          description: Returns a hub resource.
          content:
            application/json:
              schema:
                title: HubCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current:
    get:
      operationId: getHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - memberships
      summary: Fetch Hub
      description: Requires the `hubs-view` capability.
      responses:
        '200':
          description: Returns an hub resource.
          content:
            application/json:
              schema:
                title: HubFetchReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateHub
      tags:
        - Hubs
      parameters: []
      summary: Update Hub
      description: Updates the specified hub, setting the values of the parameters passed.
      requestBody:
        description: Parameters for updating a hub.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the hub.
                integrations:
                  $ref: '#/components/schemas/HubIntegrations'
                webhooks:
                  type: object
                  description: All hub webhooks for the given hub.
                  required:
                    - server_deployed
                  properties:
                    server_deployed:
                      nullable: true
                      type: string
                      description: A webahook to report information to each time a server is deployed on the given hub.
      responses:
        '200':
          description: Returns the updated Hub resource.
          content:
            application/json:
              schema:
                title: HubUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Hub'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeHub
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters: []
      summary: Remove Hub
      description: Requires the `hubs-delete` capability. This can only be aquired by being the hub owner.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/activity:
    get:
      operationId: getHubActivity
      tags:
        - Hubs
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - users
                - components
                - creators
                - images
                - stack_builds
                - stacks
                - environments
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search activities for a value associated with a field on the given activity(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the activity's current state.

            ### User
            `filter[user]=ID` user filtering by ID.  Submit the ID of the user you wish to filter for and the return will be any activity from that user.

            ### Environment
            `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish to filter for and the return will be any activity from that environment.

            ### container
            `filter[container]=ID` container filtering by ID.  Submit the ID of the container you wish to filter for and the return will be any activity from that container.

            ### Instance
            `filter[instance]=ID` instance filtering by ID.  Submit the ID of the instance you wish to filter for and the return will be any activity from that instance.

            ### Server
            `filter[server]=ID` server filtering by ID.  Submit the ID of the server you wish to filter for and the return will be any activity from that server.

            ### Event
            `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.login`

            ### Verbosity
            `filter[verbosity]=integer` filter the activity return by verbosity. The verbosity can be:

              `0` - Activity that users would find useful.
              `1` - Activity that can be useful when tracking down how something happened.
              `2` - Full activity, can be useful in debugging problems.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Activity
      description: Doesn't require a specific capability.
      responses:
        '200':
          description: Returns a collection of activity resources.
          content:
            application/json:
              schema:
                title: ListActivityResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  includes:
                    $ref: '#/components/schemas/ActivityIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/capabilities:
    get:
      operationId: getHubCapabilities
      tags:
        - Hubs
      parameters: []
      security: []
      summary: List Hub Capabilities
      description: Does not require a capability.
      responses:
        '200':
          description: Returns a list of capabilities.
          content:
            application/json:
              schema:
                title: HubCapabilitiesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Capability'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/usage:
    get:
      operationId: getHubUsage
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FilterParam'
      summary: Fetch Hub
      description: Requires the `hubs-view` capability.
      responses:
        '200':
          description: Returns an hubUsageResults resource.
          content:
            application/json:
              schema:
                title: HubFetchReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubUsageDatum'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/invites/{inviteId}:
    delete:
      operationId: removeHubInvite
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: inviteId
          description: The ID of the hub invite.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Hub Invite
      description: Requires the `hub-invites-manage` capability.
      responses:
        '200':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: RemoveHubInviteReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/invites:
    get:
      operationId: getHubInvites
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Hub Invites
      description: Requires the `hubs-invites-manage` capability.
      responses:
        '200':
          description: Returns a list of membership resources.
          content:
            application/json:
              schema:
                title: ListHubInvitesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createHubInvite
      tags:
        - Hubs
      parameters: []
      summary: Create Hub Invite
      description: Requires the `hubs-invites-send` capability.
      requestBody:
        description: Parameters for creating a hub invite.
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                  description: The email address of the invitee.
                role:
                  type: string
                  description: The account role.
                  enum:
                    - owner
                    - admin
                    - developer
                    - analyst
                permissions:
                  type: object
                  description: The environment permissions the invitee will have
                  required:
                    - all_environments
                    - environments
                  properties:
                    all_environments:
                      type: boolean
                      description: Boolean value that indicates the user has access to all environments
                    environments:
                      type: array
                      description: A list of objects that describe the specific environments the invitee will have access to
                      items:
                        type: object
                        required:
                          - id
                          - manage
                        properties:
                          id:
                            type: string
                            description: The ID of the environment
                          manage:
                            type: boolean
                            description: Boolean indicating the invitee has manage rights to environment
      responses:
        '201':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: CreateHubInviteReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/members:
    get:
      operationId: getHubMembers
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Hub Memberships
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a list of memebership resources.
          content:
            application/json:
              schema:
                title: ListHubMembersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/members/{memberId}:
    get:
      operationId: getHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
      summary: Fetch Hub Member
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a membership resource.
          content:
            application/json:
              schema:
                title: FetchHubMemberReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      summary: Update a Hub Member
      operationId: updateHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for updating a hub membership.
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: The account role.
                  enum:
                    - owner
                    - admin
                    - developer
                    - analyst
                permissions:
                  $ref: '#/components/schemas/Permissions'
      responses:
        '200':
          description: Returns a hub membership resource.
          content:
            application/json:
              schema:
                title: UpdateHubMemberReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeHubMember
      tags:
        - Hubs
      security:
        - bearerAuth: []
      parameters:
        - name: memberId
          description: The ID for the given member.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Hub Member
      description: Requires the `hubs-members-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/members/account/{accountId}:
    get:
      operationId: getHubMembersAccount
      tags:
        - Hubs
      parameters:
        - name: accountId
          description: The ID of the member account.
          in: path
          required: true
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - capabilities
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - senders
                - hubs
                - accounts
      summary: Fetch Members Account
      description: Requires the `hubs-members-view` capability.
      responses:
        '200':
          description: Returns a membership resource.
          content:
            application/json:
              schema:
                title: FetchHubMembersAccountReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubMembership'
                  includes:
                    $ref: '#/components/schemas/HubMembershipIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/api-keys:
    get:
      operationId: getApiKeys
      tags:
        - ApiKeys
      parameters:
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List API Keys
      description: Requires the `api-keys-manage` capability.
      responses:
        '200':
          description: Returns a collection of API Key resources.
          content:
            application/json:
              schema:
                title: ListApiKeysResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createApiKey
      tags:
        - ApiKeys
      parameters: []
      summary: Create API Key
      description: Requires the `api-keys-manage` capability.
      requestBody:
        description: Parameters for creating an API Key.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name given to the API Key.
                permissions:
                  $ref: '#/components/schemas/Permissions'
                capabilities:
                  type: object
                  description: An object defining the capabilities of the given API key.
                  required:
                    - all
                    - specific
                  properties:
                    all:
                      type: boolean
                      description: A boolean where true is giving the key all grantable capabilities.
                    specific:
                      type: array
                      description: An array of capabilites.
                      items:
                        $ref: '#/components/schemas/Capability'
                ips:
                  type: array
                  nullable: true
                  description: An array of approved IPs from which this API Key can be used.
                  items:
                    type: string
      responses:
        '201':
          description: Returns an API Key resource.
          content:
            application/json:
              schema:
                title: CreateApiKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/api-keys/{apikeyId}:
    get:
      operationId: getApiKey
      tags:
        - ApiKey
      parameters:
        - name: apikeyId
          description: The ID of the API Key.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch API Key
      description: Requries the `api-keys-manage` capability.
      responses:
        '200':
          description: Returns an API Key resource.
          content:
            application/json:
              schema:
                title: FetchApiKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateApiKey
      tags:
        - ApiKeys
      parameters:
        - name: apikeyId
          description: The ID of the API Key.
          in: path
          required: true
          schema:
            type: string
      summary: Update API Key
      description: Requires the `api-keys-manage` capability.
      requestBody:
        description: Parameters for updating an API Key.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name given to the API Key.
                permissions:
                  $ref: '#/components/schemas/Permissions'
                capabilities:
                  required:
                    - all
                    - specific
                  properties:
                    all:
                      type: boolean
                    specific:
                      type: array
                      items:
                        $ref: '#/components/schemas/Capability'
                ips:
                  type: array
                  nullable: true
                  description: An array of approved IPs from which this API Key can be used.
                  items:
                    type: string
      responses:
        '200':
          description: Returns and API Key resource.
          content:
            application/json:
              schema:
                title: UpdateApiKeyReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeApiKey
      tags:
        - ApiKeys
      parameters:
        - name: apikeyId
          description: The ID of the API Key.
          in: path
          required: true
          schema:
            type: string
      summary: remove Api Key
      description: Requires the 'api-keys-delete' capability.
      responses:
        '200':
          description: Returns an API Key resource
          content:
            application/json:
              schema:
                title: ServerDeleteReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/search/index:
    get:
      operationId: getSearchIndex
      tags:
        - Index
      security:
        - bearerAuth: []
      summary: Get Search Index
      description: Requires the view capability for each returned segment
      responses:
        '200':
          description: Returns the index resources.
          content:
            application/json:
              schema:
                title: IndexResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Index'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images:
    get:
      operationId: getImages
      tags:
        - Images
      summary: List Images
      description: Requires the `images-view` capability.
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stack_builds
                - stacks
                - sources
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given image(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the image's current state.

            ### Source Type
            `filter[source_type]=value` filter images by the image source's type.  Can be: `direct` or `stack_build`

            ### Source
            `filter[source_id]=ID` image filtering by source ID.  Submit the ID of the image source you wish to filter for and the return will be any images created from that source.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Returns a collection of image resources.
          content:
            application/json:
              schema:
                title: ImagesListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
                  includes:
                    $ref: '#/components/schemas/ImageIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createImage
      tags:
        - Images
      parameters: []
      summary: Create Image
      description: Requires the `images-import` capability.
      requestBody:
        description: Parameters for creating a new image.
        content:
          application/json:
            schema:
              type: object
              required:
                - source_id
              properties:
                name:
                  type: string
                  description: A name for the image.
                source_id:
                  type: string
                  description: The ID for the image source to be used.
                build:
                  type: object
                  description: A build object, holding information important to the image build.
                  properties:
                    args:
                      type: object
                      description: An object holding key value build time arguments needed for the image during build time.
                      additionalProperties:
                        type: string
                override:
                  type: object
                  description: An override object to be used for a single image create request.
                  required:
                    - target
                  properties:
                    target:
                      type: string
                      description: A target to be used for overridding the default target.
      responses:
        '201':
          description: Returns an image resource.
          content:
            application/json:
              schema:
                title: ImagesCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/{imageId}:
    get:
      operationId: getImage
      tags:
        - Images
      summary: Fetch Image
      description: Requires the `images-view` capability.
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - stack_builds
                - stacks
                - sources
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Returns a image resource.
          content:
            application/json:
              schema:
                title: ImagesFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
                  includes:
                    $ref: '#/components/schemas/ImageIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateImage
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      summary: Update Image
      description: Requires the `images-updae` capability.
      requestBody:
        description: Parameters for creating a new image.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the image.
      responses:
        '200':
          description: Returns an image resource.
          content:
            application/json:
              schema:
                title: ImagesCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeImage
      tags:
        - Images
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      summary: Delete Image
      description: Requires the `images-updae` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/{imageId}/build-log:
    get:
      operationId: getImageBuildLog
      tags:
        - Images
      summary: Fetch Build Log
      description: Requires the `images-view` capability.
      parameters:
        - name: imageId
          in: path
          required: true
          description: The ID of the image.
          schema:
            type: string
      responses:
        '200':
          description: Returns a build log resource.
          content:
            application/json:
              schema:
                title: ImageBuildLogResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BuildLog'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/tasks:
    post:
      tags:
        - Images
      operationId: createImageCollectionJob
      parameters: []
      summary: Images Prune
      description: Used to perform different actions on a given image. Requires the `images-delete` capability.
      requestBody:
        description: Parameters for creating a new images collection job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  description: The action is the job type to create.
                  enum:
                    - prune
                contents:
                  type: object
                  description: Additional contents needed by the platform to create the job.
                  required:
                    - source_ids
                  properties:
                    source_ids:
                      description: A list of source_ids to be pruned.
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/{imageId}/tasks:
    post:
      tags:
        - Images
      operationId: createImageJob
      parameters:
        - name: imageId
          description: The ID of the requested image.
          in: path
          required: true
          schema:
            type: string
      summary: Image Jobs
      description: Used to perform different actions on a given image.  Requires the `images-import` capabiltiy.
      requestBody:
        description: Parameters for creating a new image job.
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - import
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/sources:
    get:
      operationId: getSourcesCollection
      tags:
        - ImageSources
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - images_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given image source(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the image source's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Sources
      description: Requires the `images-view` capability.
      responses:
        '200':
          description: Returns a collection of image source resources.
          content:
            application/json:
              schema:
                title: ImageSourceCollectionResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageSource'
                  includes:
                    $ref: '#/components/schemas/SourceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createImageSource
      tags:
        - ImageSources
      parameters: []
      summary: Create Source
      description: requires the `images-import` capability.
      requestBody:
        description: Parameters for creating an image source.
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - origin
              properties:
                name:
                  type: string
                  description: A name for the image source.
                type:
                  type: string
                  description: A value identifiying the type of image.
                  enum:
                    - stack_build
                    - direct
                origin:
                  $ref: '#/components/schemas/ImageSourceOrigin'
                about:
                  type: object
                  description: User defined information about the image source.
                  required:
                    - description
                  properties:
                    description:
                      type: string
                      nullable: true
                      description: A description of the image source.
      responses:
        '201':
          description: Returns an image source resource.
          content:
            application/json:
              schema:
                title: ImageSourceCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/images/sources/{sourceId}:
    get:
      operationId: getSource
      tags:
        - ImageSources
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - images_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
      summary: Fetch Source
      description: Requires the `images-view` capability.
      responses:
        '200':
          description: Returns a single image source.
          content:
            application/json:
              schema:
                title: ImageSourceFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
                  includes:
                    $ref: '#/components/schemas/SourceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateImageSource
      tags:
        - ImageSources
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
      summary: Update Source
      description: Requires the `images-import` capability.
      requestBody:
        description: Parameters for updating an image source.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the image source.
                origin:
                  $ref: '#/components/schemas/ImageSourceOrigin'
                about:
                  type: object
                  description: User defined information about the image source.
                  required:
                    - description
                  properties:
                    description:
                      type: string
                      nullable: true
                      description: A description of the image source.
      responses:
        '200':
          description: Returns an image source resource.
          content:
            application/json:
              schema:
                title: ImageSourceCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ImageSource'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeImageSource
      tags:
        - Images
      parameters:
        - name: sourceId
          in: path
          required: true
          description: The ID of the image source.
          schema:
            type: string
      summary: Remove a given image source
      description: Requires the `images-import` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/summary:
    get:
      operationId: getInfrastructureSummary
      tags:
        - Infrastructure
      parameters: []
      summary: Fetch Infrastructure Summary
      description: Requires the `infrastructure-servers-view` capability.
      responses:
        '200':
          description: Returns an infrastructure summary.
          content:
            application/json:
              schema:
                title: InfrastructureSummaryResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InfrastructureSummary'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers/native:
    get:
      operationId: getNativeProviders
      tags:
        - Providers
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given native provider(s).
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Native Providers
      description: No capability required, public information.
      responses:
        '200':
          description: Returns a list of natively supported providers.
          content:
            application/json:
              schema:
                title: ListNativeProvidersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/NativeProvider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers/{providerId}/servers:
    get:
      operationId: getProviderServers
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Provider Servers
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A list of currently provisioned servers from a provider.
          content:
            application/json:
              schema:
                title: ListProviderServersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderServer'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers/{providerId}/locations:
    get:
      operationId: getProviderLocations
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Provider Locations
      description: No capability required, public information (datacenter locations).
      responses:
        '200':
          description: Returns a list of provider locations.
          content:
            application/json:
              schema:
                title: ProviderLocationsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers:
    get:
      operationId: getProviders
      tags:
        - Providers
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
                - locations
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search for a value associated with a field on the given provider(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Providers
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A collection of providers.
          content:
            application/json:
              schema:
                title: ListProvidersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createProvider
      tags:
        - Providers
      parameters: []
      summary: Create Provider
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        description: Parameters for creating a provider.
        content:
          application/json:
            schema:
              type: object
              required:
                - integration
              properties:
                integration:
                  type: object
                  description: An integration object defining the provider integration assets and endpoints.
                  properties:
                    native:
                      type: object
                      description: Nativly supported IAL provider integration.
                      required:
                        - identifier
                        - auth
                      properties:
                        identifier:
                          type: string
                          description: An identifier for the provider.
                        auth:
                          $ref: '#/components/schemas/IALAuth'
                    abstraction:
                      type: object
                      description: Custom provider information.
                      required:
                        - name
                        - base_url
                      properties:
                        name:
                          type: string
                          description: A name for the custom provider abstraction.
                        base_url:
                          type: string
                          description: The url to use when making calls to the abstraction for provision events.
                        auth:
                          $ref: '#/components/schemas/IALAuth'
      responses:
        '201':
          description: Returns a provider resource.
          content:
            application/json:
              schema:
                title: ProviderCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers/{providerId}:
    get:
      operationId: getProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Provider
      description: Requires the `infrastructure-providers-view` capability.
      responses:
        '200':
          description: A single provider resource.
          content:
            application/json:
              schema:
                title: FetchProviderReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Update Provider
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        description: Parameters for updating a provider.
        content:
          application/json:
            schema:
              type: object
              required:
                - integration
              properties:
                integration:
                  type: object
                  description: An integration object defining the provider integration assets and endpoints.
                  properties:
                    native:
                      type: object
                      description: Nativly supported IAL provider integration.
                      required:
                        - identifier
                        - auth
                      properties:
                        identifier:
                          type: string
                          description: An identifier for the provider.
                        auth:
                          $ref: '#/components/schemas/IALAuth'
                    abstraction:
                      type: object
                      description: Custom provider information.
                      required:
                        - name
                        - base_url
                      properties:
                        name:
                          type: string
                          description: A name for the custom provider abstraction.
                        base_url:
                          type: string
                          description: The url to use when making calls to the abstraction for provision events.
                        auth:
                          $ref: '#/components/schemas/IALAuth'
      responses:
        '200':
          description: Returns a provider resource.
          content:
            application/json:
              schema:
                title: ProviderUpdateReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeProvider
      tags:
        - Providers
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Provider
      description: Requires the `infrastructure-providers-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/providers/{providerId}/tasks:
    post:
      tags:
        - Providers
      operationId: createProviderJob
      parameters:
        - name: providerId
          description: The ID for the given provider.
          in: path
          required: true
          schema:
            type: string
      summary: Providers Jobs
      description: Requires the `infrastructure-providers-manage` capability.
      requestBody:
        description: Parameters for creating a provider job.
        content:
          application/json:
            schema:
              title: VerifyProviderAction
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The action the job takes.
                  enum:
                    - verify
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers:
    get:
      operationId: getServersCollection
      tags:
        - Servers
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - models
                - providers
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current state.

            ### Tags
            `filter[tags]=tagone,tagtwo,tagthree` filtering by server tag.  Enter one or more tags (comma separated) and the return will include servers that match any tags in the list.

            ### Clusters
            `filter[clusters]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include servers that match any clusters in the list.

            ### Providers
            `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers (commas separated) and the return will include servers that match any providers in the list.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Servers
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A collection of server resources.
          content:
            application/json:
              schema:
                title: ServerCollectionReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createServer
      tags:
        - Servers
      parameters: []
      summary: Create Server
      description: Requires the `servers-provision` capability.
      requestBody:
        description: Parameters for creating a server.
        content:
          application/json:
            schema:
              type: object
              required:
                - servers
                - cluster
              properties:
                cluster:
                  type: string
                  description: The existing or new cluster this infrastructure should be provisioned in.
                servers:
                  description: An array of servers to provision.
                  type: array
                  items:
                    type: object
                    required:
                      - provider
                      - model_id
                      - location_id
                      - quantity
                    properties:
                      provider:
                        type: string
                        description: The provider this server is from.
                      model_id:
                        type: string
                        description: The model ID of the server.
                      location_id:
                        type: string
                        description: The location ID of the server.
                      quantity:
                        type: integer
                        description: The number of this server at this location to deploy.
                      hostnames:
                        description: An array of hostnames for the given servers.
                        type: array
                        items:
                          type: string
      responses:
        '201':
          description: Returns a single server resource.
          content:
            application/json:
              schema:
                title: ServerCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/{serverId}:
    get:
      operationId: getSingleServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - locations
                - models
                - providers
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - node
                - instances_count
      summary: Fetch Server
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A single server resource.
          content:
            application/json:
              schema:
                title: ServerFetchReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
                  includes:
                    $ref: '#/components/schemas/ServerIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Update Server
      description: Requires the `servers-update` capability.
      requestBody:
        description: Parameters for updating a server.
        content:
          application/json:
            schema:
              type: object
              required:
                - constraints
              properties:
                constraints:
                  type: object
                  description: Server constriants.
                  properties:
                    tags:
                      description: A list of server tags.
                      type: array
                      items:
                        type: string
                    allow:
                      type: object
                      description: Server constraints for the given server.
                      required:
                        - pool
                        - services
                        - overcommit
                      properties:
                        pool:
                          type: boolean
                          description: A boolean where true represents the server can accept containers with no tags set.
                        services:
                          type: boolean
                          description: A boolean where true represents the server being a target for service containers.
                        overcommit:
                          type: boolean
                          description: A boolean where true represents the desire for the server to allow the overcommitting of shares.
      responses:
        '200':
          description: A server resource.
          content:
            application/json:
              schema:
                title: ServerUpdateReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      summary: Remove Server
      description: Requires the `servers-update` capability.
      operationId: removeServer
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/OptionParam'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/{serverId}/telemetry:
    get:
      operationId: getServerTelemetery
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Range
            `filter[range-start]=timestamp&filter[range-end]=timestamp` filter by range giving two times a `start` time and an `end` time. Date format `2023-03-07T14:55:17-08:00`.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Server Telemetry
      description: Requires the `servers-view` capability. This call requires the filter query be used.
      responses:
        '200':
          description: A list of telemetry points.
          content:
            application/json:
              schema:
                title: ServerTelemetryReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Telemetry'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/{serverId}/instances:
    get:
      operationId: getServerInstances
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creator
                - servers
                - locations
                - providers
                - containers
                - environments
      summary: List Server Instances
      description: Requires the `containers-view` capability.
      responses:
        '200':
          description: A list of instance resources.
          content:
            application/json:
              schema:
                title: GetServerInstancesReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instance'
                  includes:
                    $ref: '#/components/schemas/InstanceIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/{serverId}/tasks:
    post:
      tags:
        - Servers
      operationId: createServerJob
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Create Server Job
      description: Used to perform different actions on a given server. Requires the `servers-state` capability.
      requestBody:
        description: Parameters for creating the new server job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ReconfigureServer'
                - $ref: '#/components/schemas/RestartServer'
                - $ref: '#/components/schemas/RestartCompute'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/tags:
    get:
      operationId: getServerTags
      tags:
        - Servers
      parameters:
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Cluster
            `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas separated) and the return will include tags from servers that match any cluster(s) in the list.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
      summary: List Server Tags
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: Returns a list of server tags.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTags'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/clusters:
    get:
      operationId: GetServersClusters
      tags:
        - Servers
      summary: List Servers Clusters
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: A collection of cluster identifiers.
          content:
            application/json:
              schema:
                title: ServerClustersReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/servers/{serverId}/usage:
    get:
      operationId: GetServerUsage
      tags:
        - Servers
      parameters:
        - name: serverId
          description: The ID for the given server.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Server Usage
      description: Requires the `servers-view` capability.
      responses:
        '200':
          description: Server data usage collection.
          content:
            application/json:
              schema:
                title: ServerUsageReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UsageDatum'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/ips/pools:
    get:
      operationId: getInfrastructureIPPools
      tags:
        - InfrastructureIPs
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - providers
                - locations
        - $ref: '#/components/parameters/PageParam'
      summary: List Pools
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A collection of pool resources.
          content:
            application/json:
              schema:
                title: IPPoolsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pool'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/ips/pools/{poolId}:
    get:
      operationId: getInfrastructureIPPool
      tags:
        - InfrastructureIPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - servers
                - providers
                - locations
      summary: Fetch Pool IP
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A single pool resource.
          content:
            application/json:
              schema:
                title: IPPoolReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pool'
                  includes:
                    $ref: '#/components/schemas/PoolIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeIpPool
      tags:
        - InfrastructureIPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
      summary: Remove Pool IP
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/ips/pools/{poolId}/ips:
    get:
      operationId: getPoolsIPs
      tags:
        - InfrastructureIPs
      parameters:
        - name: poolId
          description: The ID for the given pool.
          in: path
          required: true
          schema:
            type: string
      summary: List Pool IP's
      description: Requires the `infrastructure-ips-manage` capability.
      responses:
        '200':
          description: A collection of IPs.
          content:
            application/json:
              schema:
                title: GetPoolsIPReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ip'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/infrastructure/deployment-strategies:
    get:
      operationId: getDeploymentStrategies
      tags:
        - Infrastructure
      parameters: []
      summary: Fetch Deployment Strategies
      description: This endpoint returns available container deployment strategies.
      responses:
        '200':
          description: Deployment strategies.
          content:
            application/json:
              schema:
                title: DeploymentStrategiesReturn
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      resource-density:
                        $ref: '#/components/schemas/DeploymentStrategy'
                      high-availability:
                        $ref: '#/components/schemas/DeploymentStrategy'
                      first-available:
                        $ref: '#/components/schemas/DeploymentStrategy'
                      node:
                        $ref: '#/components/schemas/DeploymentStrategy'
                      edge:
                        $ref: '#/components/schemas/DeploymentStrategy'
                      manual:
                        $ref: '#/components/schemas/DeploymentStrategy'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/jobs:
    get:
      operationId: getJobs
      tags:
        - Jobs
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Range
            `filter[range-start]=timestamp&filter[range-end]=timestamp` filter by range giving two times a `start` time and an `end` time. Date format `2023-03-07T14:55:17-08:00`.

            ### Search
            `filter[search]=value` search jobs for a value associated with a field on the given job(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Jobs.
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A collection of job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  includes:
                    $ref: '#/components/schemas/JobIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/jobs/{jobId}:
    get:
      operationId: getJob
      tags:
        - Jobs
      parameters:
        - name: jobId
          description: The ID for the given job.
          in: path
          required: true
          schema:
            type: string
      summary: Fetch Job
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/jobs/latest:
    get:
      operationId: getLatestJobs
      tags:
        - Jobs
      parameters: []
      summary: List Latest Jobs
      description: Requires the `jobs-view` permission.
      responses:
        '200':
          description: A collection of job resources.
          content:
            application/json:
              schema:
                title: ListJobsReturn
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks:
    get:
      operationId: getStacks
      tags:
        - Stacks
      summary: List Stacks
      description: Requires the `stacks-view` permission.
      parameters:
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
                - builds_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search stacks for a value associated with a field on the given stack(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the stack's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: A collection of stack resources.
          content:
            application/json:
              schema:
                title: ListStacksResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stack'
                  includes:
                    $ref: '#/components/schemas/StackInclude'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createStack
      tags:
        - Stacks
      parameters: []
      summary: Create Stack
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - source
              properties:
                name:
                  type: string
                  description: A name for the stack.
                source:
                  $ref: '#/components/schemas/StackSource'
      responses:
        '201':
          description: Returns a stack resource.
          content:
            application/json:
              schema:
                title: StackCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/{stackId}:
    get:
      operationId: getStack
      tags:
        - Stacks
      summary: Fetch Stack
      description: Requires the `stacks-view` capability.
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      responses:
        '200':
          description: Returns a stack resource.
          content:
            application/json:
              schema:
                title: StackFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateStack
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Update Stack
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for updating a stack.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the stack.
                source:
                  $ref: '#/components/schemas/StackSource'
      responses:
        '200':
          description: Returns an updated stack resource.
          content:
            application/json:
              schema:
                title: UpdateStackResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Stack'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeStack
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Remove Stack
      description: Requires the `stacks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/{stackId}/tasks:
    post:
      tags:
        - Stacks
      operationId: createStackJob
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Create Stack Job
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack job.
        content:
          application/json:
            schema:
              title: PruneStackBuilds
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The job to do.
                  enum:
                    - prune
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/builds/{buildId}:
    get:
      operationId: getStackBuildLookup
      tags:
        - Stacks
      parameters:
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Fetch Stack Build
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: StackBuildLookupResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/{stackId}/builds:
    get:
      operationId: getStackBuilds
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
        - name: meta
          in: query
          required: false
          description: A comma separated list of meta values. Meta values will show up under a resource's `meta` field. In the case of applying a meta to a collection of resources, each resource will have it's own relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear in the root document. These will be clearly labeled.
          schema:
            type: array
            items:
              type: string
              enum:
                - containers_count
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - stack_id
                - hub_id
                - about
                - instructions
                - events
                - state
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search stack builds for a value associated with a field on the given stack build(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the stack build's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Builds
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a collection of stack builds.
          content:
            application/json:
              schema:
                title: StackBuildsCollectionResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StackBuild'
                  includes:
                    $ref: '#/components/schemas/StackBuildInclude'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack
          schema:
            type: string
      summary: Create Stack Build
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack build.
        content:
          application/json:
            schema:
              type: object
              properties:
                about:
                  $ref: '#/components/schemas/StackBuildAbout'
                instructions:
                  $ref: '#/components/schemas/StackBuildInstructions'
      responses:
        '201':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: StackBuildCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/{stackId}/builds/{buildId}:
    get:
      operationId: getStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Fetch Stack Build
      description: Requires the `stacks-view` capability.
      responses:
        '200':
          description: Returns a stack build resource.
          content:
            application/json:
              schema:
                title: FetchStackBuildResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StackBuild'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeStackBuild
      tags:
        - Stacks
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Remove Stack Build
      description: Requires the `stacks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/stacks/{stackId}/builds/{buildId}/tasks:
    post:
      tags:
        - Stacks
      operationId: createStackBuildJob
      parameters:
        - name: stackId
          in: path
          required: true
          description: The ID of the stack.
          schema:
            type: string
        - name: buildId
          in: path
          required: true
          description: The ID of the build.
          schema:
            type: string
      summary: Create Stack Build Job
      description: Requires the `stacks-manage` capability.
      requestBody:
        description: Parameters for creating a new stack build job.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/GenerateStackBuildAction'
                - $ref: '#/components/schemas/DeployStackBuildAction'
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/sdn/networks:
    get:
      operationId: getNetworks
      tags:
        - SDN
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - environments
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search networks for a value associated with a field on the given network(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the network's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List SDNs
      description: Requires the `sdn-networks-view` capability.
      responses:
        '200':
          description: Returns a collection of network resources.
          content:
            application/json:
              schema:
                title: SDNListResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SDNNetwork'
                  includes:
                    $ref: '#/components/schemas/NetworkIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createSDNNetwork
      tags:
        - SDN
      parameters: []
      summary: Create SDN
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        description: Parameters for creating a new network.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - identifier
                - cluster
                - environments
              properties:
                name:
                  type: string
                  description: The name of the network.
                identifier:
                  type: string
                  description: A network identifier used to construct http calls that specifically use this network over another.
                cluster:
                  type: string
                  description: The infrastructure cluster the environments belonging to this network belong to.
                environments:
                  description: An array of environment Ids
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Returns a network resource.
          content:
            application/json:
              schema:
                title: SDNCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/sdn/networks/{networkId}:
    get:
      operationId: getNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Fetch SDN
      description: Requires the `sdn-networks-view` capability.
      responses:
        '200':
          description: Returns a single network resource.
          content:
            application/json:
              schema:
                title: SDNFetchResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updateSDNNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Update SDN
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        description: Parameters for updating a network.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the network.
                identifier:
                  type: string
                  description: A network identifier used to construct http calls that specifically use this network over another.
      responses:
        '200':
          description: Returns a network resource.
          content:
            application/json:
              schema:
                title: SDNUpdateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SDNNetwork'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removeSDNNetwork
      tags:
        - SDN
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Remove SDN
      description: Requires the `sdn-networks-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/sdn/networks/{networkId}/tasks:
    post:
      tags:
        - Images
      operationId: createNetworkJob
      parameters:
        - name: networkId
          in: path
          required: true
          description: The ID of the network.
          schema:
            type: string
      summary: Create SDN Job
      description: Requires the `sdn-networks-manage` capability.
      requestBody:
        description: Parameters for creating a new sdn job.
        content:
          application/json:
            schema:
              title: ReconfigureSDNNetwork
              type: object
              required:
                - action
                - contents
              properties:
                action:
                  type: string
                  description: The job to do.
                  enum:
                    - reconfigure
                contents:
                  type: object
                  description: Additional information needed for the job.
                  required:
                    - environment_ids
                  properties:
                    environment_ids:
                      description: An array of environment identifiers for the network.
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines:
    get:
      operationId: getPipelines
      tags:
        - Pipelines
      parameters:
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - name
                - components
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search pipelines for a value associated with a field on the given pipeline(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the pipeline's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Pipelines
      description: Requires the `pipelines-view` capability.
      responses:
        '200':
          description: Returns a collection of pipeline resources.
          content:
            application/json:
              schema:
                title: ListPipelineResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pipeline'
                  includes:
                    $ref: '#/components/schemas/PipelineIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createPipeline
      tags:
        - Pipelines
      parameters: []
      summary: Create Pipeline
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Parameters for creating a new pipeline.
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: A name for the pipeline.
                stages:
                  description: An array of stages.
                  type: array
                  items:
                    $ref: '#/components/schemas/PipelineStage'
                disable:
                  type: boolean
                  description: A boolean where true signifies the pipeline is disabled.
      responses:
        '201':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: PipelineCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines/{pipelineId}:
    get:
      operationId: getPipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
                - name
                - components
      summary: Fetch Pipeline
      description: Requires the `pieplines-view` capability.
      responses:
        '200':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: FetchPipelineResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
                  includes:
                    $ref: '#/components/schemas/PipelineIncludes'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updatePipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Pipeline
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Parameters for updating a pipeline.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the pipeline.
                stages:
                  description: An array of stages.
                  type: array
                  items:
                    $ref: '#/components/schemas/PipelineStage'
                disable:
                  type: boolean
                  description: A boolean where true signifies the pipeline is disabled.
      responses:
        '200':
          description: Returns a pipeline resource.
          content:
            application/json:
              schema:
                title: FetchPipelineResource
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Pipeline'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removePipeline
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Remove Pipeline
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines/{pipelineId}/runs:
    get:
      operationId: getPipelineRuns
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - $ref: '#/components/parameters/SortParam'
        - name: include
          in: query
          required: false
          description: A comma separated list of include values. Included resources will show up under the root document's `include` field, with the key being the id of the included resource. In the case of applying an include to a collection of resources, if two resources share the same include, it will only appear once in the return.
          schema:
            type: array
            items:
              type: string
              enum:
                - creators
      summary: List Pipeline Runs
      description: Requires the `pieplines-view` capability.
      responses:
        '200':
          description: Returns a list of pipeline run resources.
          content:
            application/json:
              schema:
                title: ListPipelineRunsResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Run'
                  includes:
                    type: object
                    properties:
                      creators:
                        $ref: '#/components/schemas/CreatorInclude'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines/{pipelineId}/tasks:
    post:
      tags:
        - Pipelines
      operationId: createPipelineJob
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Pipeline Job
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Parameters for creating a new pipeline job.
        content:
          application/json:
            schema:
              title: TriggerPipeline
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: The job to do.
                  enum:
                    - trigger
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines/{pipelineId}/keys:
    get:
      operationId: getPipelineTriggerKeys
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Search
            `filter[search]=value` search trigger keys for a value associated with a field on the given trigger key(s).

            ### State
            `filter[state]=value1,value2` state filtering will allow you to filter by the trigger key's current state.
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/PageParam'
      summary: List Trigger Keys
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a collection of trigger key resources.
          content:
            application/json:
              schema:
                title: ListPipelineTriggerKeyResponse
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TriggerKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    post:
      operationId: createPipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
      summary: Create Trigger Key
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Parameters for creating a new pipeline trigger key.
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: A name for the trigger key.
                ips:
                  description: An array of ips this trigger key is usable from.
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Returns a trigger key resource.
          content:
            application/json:
              schema:
                title: PipelineTriggerKeyCreateResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TriggerKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/pipelines/{pipelineId}/keys/{triggerKeyId}:
    get:
      operationId: getPipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: triggerKeyId
          in: path
          required: true
          description: The ID of the trigger key.
          schema:
            type: string
      summary: Fetch Trigger Key
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a trigger key resource.
          content:
            application/json:
              schema:
                title: FetchPipelineTriggerKeyResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TriggerKey'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    patch:
      operationId: updatePipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: triggerKeyId
          in: path
          required: true
          description: The ID of the trigger key.
          schema:
            type: string
      summary: Update Trigger Key
      description: Requires the `pipelines-manage` capability.
      requestBody:
        description: Req body for updating trigger key
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Set name of trigger key
                ips:
                  description: List of Ip Restrictions
                  type: array
                  items:
                    type: string
                    description: Restricted Ip String
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      operationId: removePipelineTriggerKey
      tags:
        - Pipelines
      parameters:
        - name: pipelineId
          in: path
          required: true
          description: The ID of the pipeline.
          schema:
            type: string
        - name: triggerKeyId
          in: path
          required: true
          description: The ID of the trigger key.
          schema:
            type: string
      summary: Delete Trigger Key
      description: Requires the `pipelines-manage` capability.
      responses:
        '200':
          description: Returns a task descriptor.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskDescriptor'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/hubs/current/notifications:
    get:
      operationId: pipelineAuth
      tags:
        - WebsocketAuth
      parameters: []
      summary: Hub Notification Pipeline Auth
      description: Requires the `hubs-notifications-listen` capability.
      responses:
        '200':
          description: Returns a token.
          content:
            application/json:
              schema:
                title: HubNotificationAuthResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/HubNotificationToken'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/console:
    get:
      operationId: instanceConsoleAuth
      tags:
        - WebsocketAuth
      parameters:
        - name: containerId
          in: path
          required: true
          description: The ID for the container
          schema:
            type: string
        - name: instanceId
          in: path
          required: true
          description: The ID of the instance.
          schema:
            type: string
      summary: Instance Console Auth
      description: Requires the `contaiers-console` capability.
      responses:
        '200':
          description: Returns a token and address.
          content:
            application/json:
              schema:
                title: InstanceConsoleAuthResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InstanceConsoleAuth'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/containers/{containerId}/instances/{instanceId}/telemetry/resources/stream:
    get:
      operationId: getInstanceResourcesTelemetryStream
      tags:
        - WebsocketAuth
        - Instances
      parameters:
        - name: containerId
          description: The ID of the requested container.
          in: path
          required: true
          schema:
            type: string
        - name: instanceId
          description: The ID for the container instance.
          in: path
          required: true
          schema:
            type: string
      summary: Instance Telemetry Stream Credentials
      description: Requires the `containers-view` capability. Retrieves an access token and URL to open a websocket to for streaming instance telemetry live. This connects directly to the compute layer on the server the instance is hosted on, and streams telemetry in real time.
      responses:
        '200':
          description: Returns credentials for connecting to an instance telemetry stream.
          content:
            application/json:
              schema:
                title: InstanceTelemetryStreamCredentialsReturn
                type: object
                properties:
                  data:
                    title: InstanceTelemetryStreamCredentials
                    type: object
                    description: Credentials for connecting to the instance telemetry stream on compute.
                    required:
                      - token
                      - address
                    properties:
                      token:
                        type: string
                        description: The authentication token passed into the address as a URL parameter (?token).
                      address:
                        description: The URL address to open a websocket to for streaming instance telemetry data.
                        type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v1/security/report:
    get:
      operationId: getSecurityReport
      tags:
        - Security
      summary: Get Security Report
      description: Returns a report detailing incidents logged by the platform around security related events.
      parameters:
        - name: filter
          in: query
          required: false
          description: |
            ## Filter Field
            The filter field is a key-value object, where the key is what you would like to filter, and the value is the value you're filtering for.

            ## Possible Values
            ### Environment
            `filter[environment]=<Environment ID>` fetch the security report for the specified environment

            ### Event
            `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.login`
          schema:
            type: object
            additionalProperties:
              type: string
              oneOf:
                - type: string
                - type: array
                  items:
                    type: string
      responses:
        '200':
          description: Returns the security report.
          content:
            application/json:
              schema:
                title: SecurityReportResponse
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SecurityReport'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '415':
          $ref: '#/components/responses/415'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    hubAuth:
      name: X-Hub-Id
      in: header
      type: apiKey
      description: Defines the scope of the request to a specific Hub.
  schemas:
    ID:
      title: ID
      type: string
      description: A unique identifier.
    DateTime:
      title: DateTime
      type: string
      format: date-time
      example: '2021-01-30T08:30:00Z'
    State:
      title: State
      description: Information regarding the current state of the resource.
      type: object
      required:
        - changed
      properties:
        changed:
          $ref: '#/components/schemas/DateTime'
        error:
          type: object
          description: An error, if any, that has occurred for this resource.
          properties:
            message:
              type: string
              description: Details about the error that has occurred.
            time:
              description: The timestamp of when the error was encountered.
              $ref: '#/components/schemas/DateTime'
    AccountState:
      title: AccountState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the account.
              type: string
              enum:
                - new
                - live
                - suspending
                - purging
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Account:
      title: Account
      type: object
      description: An object representing information about the currently logged-in user.
      required:
        - id
        - name
        - email
        - allow_support_logins
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: object
          description: The first and last name associated with the account.
          required:
            - first
            - last
          properties:
            first:
              type: string
              description: The first name of the account owner.
            last:
              type: string
              description: The last name of the account owner.
        email:
          type: object
          description: Information about the email address associated with the account.
          required:
            - address
            - verified
            - added
          properties:
            address:
              type: string
              description: The email address.
            verified:
              type: boolean
              description: If true, the email has been verified and the account is active.
            added:
              description: The date the email was added to the account
              $ref: '#/components/schemas/DateTime'
        two_factor_auth:
          type: object
          nullable: true
          description: Two factor auth verification information.
          required:
            - verified
          properties:
            verified:
              type: boolean
              description: A boolean representing if the account has verified with TwoFA.
        allow_support_login:
          description: Indicates whether or not Cycle employees have authorization to log in to this account in a support capacity.
          type: boolean
        state:
          $ref: '#/components/schemas/AccountState'
        events:
          title: AccountEvents
          type: object
          description: A collection of timestamps for each event in the account's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_login
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
            last_login:
              description: The timestamp of when the account was last accessed.
              $ref: '#/components/schemas/DateTime'
    Error:
      title: Error
      description: |-
        The Cycle API uses standard HTTP response codes to indicate the success or failure of an API request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
        There are two types of error response objects. Errors with authentication are formatted to follow the OAuth spec, while all other errors follow the same convention. If you're using one of our API Libraries, they will standardize OAuth errors to fit the general convention.
      type: object
      required:
        - status, code, title
      properties:
        status:
          type: integer
          description: The HTTP response code.
          enum:
            - 400
            - 401
            - 403
            - 404
            - 409
            - 415
            - 422
            - 500
        code:
          type: string
          description: A Cycle standard error code.
          enum:
            - 400.invalid_syntax
            - 401.auth_invalid
            - 401.auth_expired
            - 401.no_cookie
            - 401.unauthorized_application
            - 403.mismatch
            - 403.wrong_hub
            - 403.not_ready
            - 403.expired
            - 403.restricted_portal
            - 403.permissions
            - 403.wrong_scope
            - 403.invalid_ip
            - 403.invalid_state
            - 403.not_approved
            - 403.not_allowed
            - 403.platform_disabled
            - 403.2fa_required
            - 403.2fa_failed
            - 403.new_application_capabilities
            - 403.tier_restricted
            - 404.hub
            - 404.hub.invitation
            - 404.sdn_network
            - 404.environment
            - 404.environment.scoped-variable
            - 404.hub.api_key
            - 404.hub.provider
            - 404.uri
            - 404.provider
            - 404.stack
            - 404.survey
            - 404.survey_response
            - 404.notification
            - 404.stack_build
            - 404.image
            - 404.image.source
            - 404.image.build_log
            - 404.job
            - 404.billing.order
            - 404.billing.service
            - 404.billing.credit
            - 404.billing.invoice
            - 404.billing.tier
            - 404.billing.support
            - 404.billing.payment_method
            - 404.billing.promo_code
            - 404.node
            - 404.infrastructure.location
            - 404.infrastructure.ips.pool
            - 404.infrastructure.provider
            - 404.infrastructure.server
            - 404.infrastructure.model
            - 404.account
            - 404.container
            - 404.container.backup
            - 404.vpn_account
            - 404.instance
            - 404.pipeline
            - 404.pipeline.run
            - 404.pipeline.key
            - 404.dns.zone
            - 404.dns.record
            - 404.cluster
            - 404.platform_build
            - 404.cycleos_build
            - 404.email_verification
            - 404.hub.membership
            - 404.announcement
            - 404.ha_service_session
            - 404.sales_lead
            - 409.duplicate_found
            - 415.invalid_content_type
            - 422.missing_argument
            - 422.invalid_argument"
            - 422.invalid_input"
            - 422.max_exceeded
            - 422.not_compatible
            - 422.already_exists
            - 429.rate_limiting
            - 500.database
            - 500.database_insert
            - 500.database_update
            - 500.database_remove
            - 500.jobd
            - 500.unknown
            - 500.dev
            - 500.email
            - 500.payment_gateway
            - 503.not_ready
            - 503.not_enabled
            - 503.dependency_not_enabled
        title:
          type: string
          description: The main text describing the error.
        detail:
          type: string
          description: A more detailed description of the error.
        source:
          type: string
          description: A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
    ErrorEnvelope:
      title: ErrorEnvelope
      type: object
      description: An error response.
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          description: Data will always be `null` here.
          nullable: true
          type: object
    HubID:
      title: HubID
      type: string
      description: The unique ID of the Hub this resource was created in.
    MembershipState:
      title: MembershipState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the membership.
              type: string
              enum:
                - pending
                - accepted
                - declined
                - revoked
                - deleted
        - $ref: '#/components/schemas/State'
    Invitation:
      title: HubMembershipInvitation
      type: object
      description: Information about a hub membership invitation.
      required:
        - sender
        - recipient
        - events
      properties:
        sender:
          type: object
          description: Information about the origin account of the invitation.
          required:
            - id
            - type
          properties:
            id:
              $ref: '#/components/schemas/ID'
            type:
              type: string
              description: The account type.
        recipient:
          type: string
          description: The email address for the invitations recipient.
        events:
          title: InvitationEvents
          type: object
          description: A collection of timestamps for each event in the invitation's lifetime.
          required:
            - created
            - updated
            - deleted
            - accepted
            - declined
            - revoked
          properties:
            created:
              description: The timestamp of when the invitation was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the invitation was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the invitation was deleted.
              $ref: '#/components/schemas/DateTime'
            accepted:
              description: The timestamp of when the invitation was accepted.
              $ref: '#/components/schemas/DateTime'
            declined:
              description: The timestamp of when the invitation was declined.
              $ref: '#/components/schemas/DateTime'
            revoked:
              description: The timestamp of when the invitation was revoked.
              $ref: '#/components/schemas/DateTime'
    Capability:
      type: string
      description: A capability that a user or API key that represents what an API key or a user can do.
      enum:
        - hubs-update
        - hubs-delete
        - hubs-invites-send
        - hubs-invites-manage
        - hubs-members-manage
        - hubs-members-view
        - hubs-notifications-listen
        - hubs-integrations-manage
        - billing-methods-manage
        - billing-invoices-view
        - billing-invoices-pay
        - billing-orders-manage
        - billing-services-view
        - billing-credits-view
        - sdn-networks-view
        - sdn-networks-manage
        - pipelines-manage
        - pipelines-view
        - pipelines-trigger
        - environments-create
        - environments-delete
        - environments-view
        - environments-update
        - environments-state
        - environments-services-manage
        - environments-vpn
        - environments-vpn-manage
        - environments-scopedvariables-manage
        - environments-scopedvariables-view
        - containers-deploy
        - containers-view
        - containers-console
        - containers-ssh
        - containers-update
        - containers-delete
        - containers-state
        - containers-volumes-manage
        - containers-volumes-view
        - containers-instances-migrate
        - containers-backups-manage
        - containers-backups-view
        - stacks-manage
        - stacks-view
        - stacks-builds-manage
        - stacks-builds-deploy
        - images-view
        - images-import
        - images-update
        - images-delete
        - images-build
        - images-sources-view
        - images-sources-manage
        - jobs-view
        - api-keys-manage
        - ips-manage
        - servers-provision
        - servers-view
        - servers-update
        - servers-login
        - servers-state
        - servers-decommission
        - infrastructure-providers-manage
        - infrastructure-providers-view
        - usage-view
        - dns-view
        - dns-manage
        - dns-certs-view
    HubMembershipMeta:
      title: HubMembershipMeta
      type: object
      description: A list of meta fields that can be applied to a membership.
      properties:
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
    HubMembership:
      title: HubMembership
      type: object
      description: A membership resource that is scoped to an individual hub.
      required:
        - id
        - account_id
        - hub_id
        - role
        - events
        - state
        - invitation
        - permissions
        - prefereneces
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account_id:
          type: string
          description: An ID for the account associated with the given membership.
        hub_id:
          $ref: '#/components/schemas/HubID'
        role:
          type: integer
          description: A number that maps to the currently set role of the member.
        events:
          title: MembershipEvents
          type: object
          description: A collection of timestamps for each event in the membership's lifetime.
          required:
            - created
            - updated
            - deleted
            - joined
          properties:
            created:
              description: The timestamp of when the membership was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the membership was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the membership was deleted.
              $ref: '#/components/schemas/DateTime'
            joined:
              description: The timestamp of when the membership was accepted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/MembershipState'
        invitation:
          $ref: '#/components/schemas/Invitation'
        permissions:
          type: object
          description: Information about this members permissions for a given hub.
          required:
            - all_environments
            - environments
          properties:
            all_environments:
              type: boolean
              description: A boolean where true represents the member has access to view and manage all environments for the hub.
            environments:
              description: An array of environments this membership has access to.
              type: array
              items:
                type: object
                description: Environment membership resources.
                required:
                  - id
                  - manage
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  manage:
                    type: boolean
                    description: A boolean where true represents this environment can be managed by the membership (i.e. its not just read-only).
        prefereneces:
          type: object
          description: Preference information set by the user for the membership.
          required:
            - notifications
          properties:
            notifications:
              type: object
              description: Notification preferences for the membership.
              required:
                - api_keys
              properties:
                api_keys:
                  type: boolean
                  description: A boolean where true represents the desire for the membership to get notifications about activity generated by API key type events.
        cycle:
          type: object
          description: Information about the membership as it pertains to the account holders affiliation with being a Cycle employee. Cycle employee accounts do not consume a "membership" for a given hub.
          required:
            - employee_id
          properties:
            employee_id:
              type: string
              description: The ID of the employee this membership is associated with.
        meta:
          $ref: '#/components/schemas/HubMembershipMeta'
    Events:
      title: Events
      description: Cycle resources usually contain an events field, the event being the key and a formatted time string being the value.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DateTime'
    PublicAccount:
      title: PublicAccount
      description: Publicly available information about an account
      type: object
      required:
        - name
        - email
        - id
      properties:
        name:
          title: AccountName
          description: The first and last name of an account owner
          type: object
          required:
            - first
            - last
          properties:
            first:
              type: string
              description: The first name of the account owner
            last:
              type: string
              description: The last name of the account owner
        email:
          title: AccountEmail
          description: Email information for an account
          type: object
          required:
            - address
            - verified
            - added
          properties:
            address:
              type: string
              description: The email address
            verified:
              type: boolean
              description: A boolean representing if the email has been verified
            added:
              $ref: '#/components/schemas/DateTime'
        id:
          title: AccountId
          description: Id information for an account
          type: string
        events:
          allOf:
            - $ref: '#/components/schemas/Events'
            - properties:
                last_login:
                  $ref: '#/components/schemas/DateTime'
    CreatorScope:
      title: CreatorScope
      description: The creator scope is embedded in resource objects to describe who created them
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          type: string
          enum:
            - account
            - environment
            - platform
            - platform-pipeline
            - employee
            - api-key
            - visitor
    HubState:
      title: HubState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the hub.
              type: string
              enum:
                - new
                - configuring
                - live
                - inactive
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    HubIntegrations:
      title: HubIntegrations
      description: Integration information for a given hub.
      type: object
      required:
        - letsencrypt
        - backblaze_b2
      properties:
        letsencrypt:
          type: object
          description: A hub integration with Lets Encrypt service.
          required:
            - email
          nullable: true
          properties:
            email:
              type: string
              description: An email address to assocaite with Lets Encrypt certificates generated for DNS records on this hub.
        backblaze_b2:
          type: object
          description: Information about the Backblaze account and bucket assocaited with the given hub.
          required:
            - bucket
            - key_id
            - key
          nullable: true
          properties:
            bucket:
              type: string
              description: The bucket name.
            key_id:
              type: string
              description: The `key_id` from Backblaze for a given key ( the one used for this integration ).
            key:
              type: string
              description: The key associated with the bucket.
    Term:
      title: BillingTerm
      type: object
      description: Information about a billing term.
      required:
        - start
        - end
        - renew
      properties:
        start:
          description: A timestamp describing the start of a billing term.
          $ref: '#/components/schemas/DateTime'
        end:
          description: A timestamp describing the end of a billing term.
          $ref: '#/components/schemas/DateTime'
        renew:
          type: string
          description: The term renewal period.
          enum:
            - once
            - monthly
            - yearly
          nullable: true
    BillingProfile:
      title: HubBillingProfile
      type: object
      description: A billing profile for a given hub.
      required:
        - term
        - plans
      properties:
        term:
          $ref: '#/components/schemas/Term'
        allow_prepaid:
          type: boolean
          description: A boolean where true represents this account being approved to use a prepaid card for billing transactions.
        disable:
          type: boolean
          description: A boolean where true means this billing profile is disabled.
        plans:
          type: object
          description: Information about the plan associated with this profile.
          required:
            - tier_id
            - support_id
          properties:
            tier_id:
              type: string
              description: An ID that maps to a type of hub tier.
            support_id:
              type: string
              description: An ID that maps to the type of support for a given billing profile.
    HubMeta:
      title: HubsMeta
      type: object
      description: A list of meta fields that can be applied to a hub.
      properties:
        membership:
          $ref: '#/components/schemas/HubMembership'
    Hub:
      title: Hub
      description: A hub resource.
      type: object
      required:
        - id
        - name
        - creator
        - events
        - state
        - integrations
        - webhooks
        - billing
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the hub.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        events:
          title: HubEvents
          type: object
          description: A collection of timestamps for each event in the hub's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the hub was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the hub was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the hub was deleted.
              $ref: '#/components/schemas/DateTime'
            converted:
              description: The timestamp of when the hub had the first converted
              $ref: '#/components/schemas/DateTime'
            first_provider:
              description: The timestamp of when the hub had the first provider added.
              $ref: '#/components/schemas/DateTime'
            first_server:
              description: The timestamp of when the hub had the first_server deployed.
              $ref: '#/components/schemas/DateTime'
            first_environment:
              description: The timestamp of when the hub had the first environment deployed.
              $ref: '#/components/schemas/DateTime'
            first_image:
              description: The timestamp of when the hub had the first image deployed.
              $ref: '#/components/schemas/DateTime'
            first_container:
              description: The timestamp of when the hub had the first container deployed.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/HubState'
        integrations:
          $ref: '#/components/schemas/HubIntegrations'
        webhooks:
          type: object
          description: All hub webhooks for the given hub.
          required:
            - server_deployed
          properties:
            server_deployed:
              nullable: true
              type: string
              description: A webhook to report information to each time a server is deployed on the given hub.
        billing:
          $ref: '#/components/schemas/BillingProfile'
        meta:
          $ref: '#/components/schemas/HubMeta'
    HubMembershipIncludes:
      title: HubMembershipsIncludes
      type: object
      description: A resource thats associated with a hub membershp.
      properties:
        senders:
          type: object
          description: A record with an ID mapped to a public account for the account that sent this memberships initial invite.
          properties:
            accounts:
              type: object
              description: A record with an ID mapped to a public account.
              additionalProperties:
                $ref: '#/components/schemas/PublicAccount'
        accounts:
          type: object
          description: A record with an ID mapped to a public account.
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        hubs:
          type: object
          description: A record with an ID mapped to a hub resource.
          additionalProperties:
            $ref: '#/components/schemas/Hub'
    AccountInfo:
      title: AccountInfo
      type: object
      description: Information about a given account.
      required:
        - id
        - ip
      properties:
        id:
          $ref: '#/components/schemas/ID'
        ip:
          type: string
          description: The IP of the computer used during login.
    Login:
      title: BaseLogin
      type: object
      description: A login event resource.
      required:
        - id
        - account
        - time
        - type
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account:
          $ref: '#/components/schemas/AccountInfo'
        time:
          description: A timestamp of the time the login occurred.
          $ref: '#/components/schemas/DateTime'
        type:
          type: string
          description: The type of login mechanism used.
          enum:
            - password
            - employee
        success:
          type: boolean
          description: A boolean where true reflects that the login was successful.
    EmployeeLogin:
      title: AccountEmployeeLogin
      type: object
      description: A login event where the authentication mechanism was an employee login.
      allOf:
        - $ref: '#/components/schemas/Account'
        - $ref: '#/components/schemas/Login'
    PasswordLogin:
      title: AccountPasswordLogin
      type: object
      description: A login event where the account password was the authentication type.
      required:
        - id
        - account
        - time
        - type
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        account:
          $ref: '#/components/schemas/AccountInfo'
        time:
          description: A timestamp of the time the login occurred.
          $ref: '#/components/schemas/DateTime'
        type:
          type: string
          description: The type of login mechanism used.
          enum:
            - password
        success:
          type: boolean
          description: A boolean where true reflects that the login was successful.
    TwoFaDisableResponse:
      title: TwoFaDisableResponse
      type: object
      required:
        - qr
        - secret
      properties:
        qr:
          type: string
        secret:
          type: string
    TwoFaSetupResponse:
      title: TwoFaSetupResponse
      type: object
      required:
        - recovery_codes
        - totp_passcode
      properties:
        recovery_codes:
          type: array
          items:
            type: string
        totp_passcode:
          type: string
    Update:
      title: AnnoucementUpdate
      type: object
      description: An update to an existing announcement.
      required:
        - id
        - message
        - creator
        - time
      properties:
        id:
          $ref: '#/components/schemas/ID'
        message:
          type: string
          description: The text describing the update to the announcement.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        time:
          $ref: '#/components/schemas/DateTime'
          description: A timestamp of when the update took place.
    NativeProviderIdentifier:
      title: NativeProviderIdentifier
      type: string
      description: An identifier for the provider
      enum:
        - equinix-metal
        - coreweave
        - vultr
        - hivelocity
        - aws
        - azure
        - gcp
        - digitalocean
    Announcement:
      title: Announcement
      type: object
      description: An announcement from the Cycle team that has something to do with the current or future state of the platform.
      required:
        - id
        - title
        - description
        - updates
        - priority
        - events
        - creator
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        title:
          type: string
          description: A description of the event being announced.
        description:
          type: string
          description: A description of the announcement
        updates:
          type: array
          items:
            $ref: '#/components/schemas/Update'
        affected_providers:
          type: array
          items:
            $ref: '#/components/schemas/NativeProviderIdentifier'
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  description: The current state of the method.
                  type: string
                  enum:
                    - live
                    - deleting
                    - deleted
            - $ref: '#/components/schemas/State'
        priority:
          type: string
          description: The priority or severity of the announcement.
          enum:
            - notice
            - low
            - medium
            - high
            - severe
        events:
          title: AnnouncementEvents
          type: object
          description: A collection of timestamps for each event in the announcement's lifetime.
          required:
            - created
            - updated
            - deleted
            - resolved
          properties:
            created:
              description: The timestamp of when the announcement was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the announcement was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the announcement was deleted.
              $ref: '#/components/schemas/DateTime'
            resolved:
              description: The timestamp of when the announcement was resolved.
              $ref: '#/components/schemas/DateTime'
    UserScope:
      title: UserScope
      description: A type of creator and a matching identifier.
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
          description: The type of user that created the resource.
          enum:
            - account
            - environment
            - platform
            - platform-pipeline
            - employee
            - api-key
            - visitor
        id:
          $ref: '#/components/schemas/ID'
    BillingAmount:
      title: BillingAmount
      type: object
      description: An object holding information about term and amount that relates to a specific billing component.
      required:
        - mills
        - term
      properties:
        mills:
          type: integer
          description: 1/10th of a cent.
        term:
          type: string
          description: The length of the term.
          enum:
            - once
            - monthly
            - yearly
    ServiceItem:
      title: ItemPlan
      type: object
      description: Information for an item's plan.
      properties:
        support:
          type: object
          description: Information about the support component of the billing item.
          required:
            - id
            - name
            - price
          properties:
            id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              description: The support contract name.
            price:
              type: integer
              description: The price of the support contract (monthly).
        tier:
          type: object
          description: Information about the tier component of the billing item.
          required:
            - id
            - name
            - price
          properties:
            id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              description: The support contract name.
            price:
              $ref: '#/components/schemas/BillingAmount'
    OrderItem:
      title: OrderItem
      type: object
      description: Describes a billing item
      required:
        - id
        - service
        - description
        - price
        - net_price
      properties:
        id:
          type: string
        service:
          $ref: '#/components/schemas/ServiceItem'
        description:
          type: string
        price:
          $ref: '#/components/schemas/BillingAmount'
        discount:
          type: object
          required:
            - id
            - amount
            - expires
          properties:
            id:
              type: string
            amount:
              $ref: '#/components/schemas/BillingAmount'
            expires:
              $ref: '#/components/schemas/DateTime'
        net_price:
          type: number
    OrderState:
      title: OrderState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the zone.
              type: string
              enum:
                - new
                - processed
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Order:
      title: Order
      type: object
      description: An order is a resource that describes a billing order
      required:
        - hub_id
        - creator
        - promo_code_id
        - term
        - approved
        - items
        - total_price
        - events
        - state
      properties:
        hub_id:
          type: string
        creator:
          $ref: '#/components/schemas/UserScope'
        promo_code_id:
          type: string
          nullable: true
        term:
          $ref: '#/components/schemas/Term'
        approved:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
        events:
          title: OrderEvents
          type: object
          description: A collection of timestamps for each event in the orders lifetime.
          required:
            - expires
          properties:
            expires:
              description: The timestamp of when the order expires.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/OrderState'
    PromoCode:
      title: PromoCode
      type: object
      description: A billing promo code.
      required:
        - code
        - credit
        - expires
        - state
      properties:
        code:
          type: string
          description: The promo "code".
        credit:
          type: object
          nullable: true
          description: The amount of credit the promo code offers.
          additionalProperties:
            type: object
            properties:
              amount:
                $ref: '#/components/schemas/BillingAmount'
              expires:
                $ref: '#/components/schemas/DateTime'
        state:
          title: PromoCodeState
          allOf:
            - required:
                - current
              properties:
                current:
                  description: The current state of the promo code.
                  type: string
                  enum:
                    - live
                    - deleted
            - $ref: '#/components/schemas/State'
    PromoCodeInclude:
      title: PromoCodeIncludes
      type: object
      description: A resource thats associated with a promo code.
      additionalProperties:
        $ref: '#/components/schemas/PromoCode'
    OrderIncludes:
      title: BillingOrderIncludes
      description: All includeable resources linkable to the given billing order.
      type: object
      properties:
        promo_codes:
          $ref: '#/components/schemas/PromoCodeInclude'
    BillingOrder:
      title: BillingOrder
      type: object
      description: Information about an order.
      required:
        - id
        - hub_id
        - creator
        - promo_code_id
        - term
        - approved
        - items
        - total_price
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        promo_code_id:
          type: string
          nullable: true
          description: An ID associated with a promo code used with the order.
        term:
          $ref: '#/components/schemas/Term'
        approved:
          type: boolean
          description: A boolean where true represents the order is approved to be paid by the user.
        items:
          type: array
          items:
            $ref: '#/components/schemas/ServiceItem'
        total_price:
          type: integer
          description: 1/10th of a cent.
        events:
          title: BillingOrderEvents
          type: object
          description: A collection of timestamps for each event in the billing order's lifetime.
          required:
            - created
            - updated
            - deleted
            - expires
          properties:
            created:
              description: The timestamp of when the billing order was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the billing order was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the billing order was deleted.
              $ref: '#/components/schemas/DateTime'
            expires:
              description: The timestamp of when the billing order expires.
              $ref: '#/components/schemas/DateTime'
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  description: The current state of the order.
                  type: string
                  enum:
                    - new
                    - processed
                    - deleting
                    - deleted
            - $ref: '#/components/schemas/State'
    TaskDescriptor:
      title: TaskDescriptor
      description: A task descriptor object is returned on success by API calls that create jobs. It contains the action that was requested, as well as the ID of the job created as a result.
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The action that was taken.
        job_id:
          type: string
          description: The ID of the job associated with this task.
        job:
          type: object
          description: Contains some basic information about the job associated with this task.
          required:
            - id
            - accepted
            - queue
          properties:
            id:
              description: The ID of the job
              type: string
            accepted:
              description: Describes if the job has been accepted
              type: boolean
            queue:
              description: Describes the queue this job is a part of.
              type: string
    SupportPlanFeatures:
      title: SupportPlanFeatures
      type: object
      description: Information about billing support plan features.
      required:
        - engineering_support
        - uptime_sla
        - guaranteed_response_time
      properties:
        engineering_support:
          type: boolean
          description: A boolean where true indicates the contract includes support for engineering.
        uptime_sla:
          type: boolean
          description: A boolean where true represents the contract has an uptime SLA agreement.
        guaranteed_response_time:
          nullable: true
          type: string
          description: The time in which this support contract guarantees response time.
    SupportPlan:
      title: SupportPlan
      type: object
      description: Information about a billing support plan.
      required:
        - name
        - price
        - description
        - features
        - contract
        - default
      properties:
        name:
          type: string
          description: The name of the support plan.
        price:
          $ref: '#/components/schemas/BillingAmount'
        description:
          type: string
          description: Information about the billing support plan that describes the plan.
        features:
          $ref: '#/components/schemas/SupportPlanFeatures'
        contract:
          type: boolean
          description: A boolean where true represents the plan is a long term contract, not just month to month.
        default:
          type: boolean
          description: This returns true if it shows up.
    BillingServers:
      title: BillingServers
      type: object
      description: An object holding information about servers included in Billing tier
      required:
        - included
        - hard_cap
        - additional
      properties:
        included:
          type: number
          description: The number of servers included in the tier price
        hard_cap:
          type: boolean
          description: A boolean indicating if there is a hard server limit on the tier
        additional:
          type: object
          description: An object describing the additonal cost of servers exceeding the included server count
          required:
            - mills
            - term
          properties:
            mills:
              type: number
            term:
              type: string
              enum:
                - once
                - monthly
                - yearly
    BillingMembers:
      title: BillingMembers
      type: object
      description: An object holding information about members included in Billing tier
      required:
        - included
        - hard_cap
        - additional
      properties:
        included:
          type: number
          description: The number of members included in the tier price
        hard_cap:
          type: boolean
          description: A boolean indicating if there is a hard member limit on the tier
        additional:
          type: object
          description: An object describing the additonal cost of members exceeding the included member count
          required:
            - mills
            - term
          properties:
            mills:
              type: number
            term:
              type: string
              enum:
                - once
                - monthly
                - yearly
    BillingRam:
      title: BillingRam
      type: object
      description: An object holding information about servers included in Billing tier
      required:
        - included_gb
        - additional_gb
        - hard_cap
      properties:
        included_gb:
          type: number
          description: The GB of image storage included in tier
        additional_gb:
          type: object
          description: Additional cost for image storage exceeding included_gb
          required:
            - mills
            - term
          properties:
            mills:
              type: number
            term:
              type: string
              enum:
                - once
                - monthly
                - yearly
        hard_cap:
          type: boolean
          description: A boolean indicating if there is a hard limit on the image storage
    BillingImageStorage:
      title: BillingImageStorage
      type: object
      description: An object holding information about servers included in Billing tier
      required:
        - included_gb
        - additional_gb
        - hard_cap
      properties:
        included_gb:
          type: number
          description: The GB of image storage included in tier
        additional_gb:
          type: object
          description: Additional cost for image storage exceeding included_gb
          required:
            - mills
            - term
          properties:
            mills:
              type: number
            term:
              type: string
              enum:
                - once
                - monthly
                - yearly
        hard_cap:
          type: boolean
          description: A boolean indicating if there is a hard limit on the image storage
    BillingBuilds:
      title: BillingBuilds
      type: object
      description: An object holding information about servers included in Billing tier
      required:
        - parallel
        - cpu_cores
        - ram_gb
        - max_daily_builds
      properties:
        parallel:
          type: number
        cpu_cores:
          type: number
          description: The number of CPU Cores availiable for builds
        ram_gb:
          type: number
          description: The amount of RAM availiable for builds
        max_daily_builds:
          type: number
          nullable: true
          description: The maximum number of builds processed per day
    TierPlan:
      title: TierPlan
      type: object
      description: A TierPlan object describes the attributes of a subscription tier
      required:
        - id
        - name
        - code
        - generation
        - usable
        - price
        - servers
        - members
        - max_nodes
        - max_members
        - advanced_features
        - max_daily_api_requests
        - ram
        - image_storage
        - builds
        - hidden
        - description
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        generation:
          type: number
        usable:
          type: boolean
        price:
          $ref: '#/components/schemas/BillingAmount'
        servers:
          $ref: '#/components/schemas/BillingServers'
        members:
          $ref: '#/components/schemas/BillingMembers'
        max_nodes:
          type: number
          nullable: true
        max_members:
          type: number
          nullable: true
        advanced_features:
          type: object
          required:
            - gpu
            - ial
          properties:
            gpu:
              type: boolean
            ial:
              type: boolean
        max_daily_api_requests:
          type: number
          nullable: true
        ram:
          $ref: '#/components/schemas/BillingRam'
        image_storage:
          $ref: '#/components/schemas/BillingImageStorage'
        builds:
          $ref: '#/components/schemas/BillingBuilds'
        hidden:
          type: boolean
        description:
          type: string
    Address:
      title: BillingMethodAddress
      description: Address information for a given billing method.
      type: object
      required:
        - country
        - zip
      properties:
        country:
          type: string
          description: The country this billing method is associated with.
        zip:
          type: string
          description: The zip code this billing method is associated with.
    BillingMethodExpiration:
      title: BillingMethodExpiration
      description: Expiration information for a billing method
      type: object
      required:
        - month
        - year
      properties:
        month:
          type: integer
          description: The month the billing method expires.
        year:
          type: integer
          description: The year the billing method expires.
    CreditCard:
      title: CreditCard
      description: Information about a credit card.
      required:
        - name
        - brand
        - expiration
        - last_4
      properties:
        name:
          type: string
          description: A name associated with the credit cards usage.
        brand:
          type: string
          description: The brand of card - ex VISA.
        expiration:
          $ref: '#/components/schemas/BillingMethodExpiration'
        last_4:
          type: string
          description: The last 4 digits of the card.
    Method:
      title: BillingMethod
      type: object
      description: Information about a billing method, usable to pay invoices.
      required:
        - id
        - name
        - primary
        - address
        - creator
        - credit_card
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the billing method.
        primary:
          type: boolean
          description: A boolean where true represents this billing method is set to primary for a given hub.
        address:
          $ref: '#/components/schemas/Address'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        credit_card:
          $ref: '#/components/schemas/CreditCard'
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  description: The current state of the method.
                  type: string
                  enum:
                    - live
                    - deleting
                    - deleted
            - $ref: '#/components/schemas/State'
        events:
          title: CreditCardEvents
          type: object
          description: A collection of timestamps for each event in the credit card's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the credit card was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the credit card was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the credit card was deleted.
              $ref: '#/components/schemas/DateTime'
    BillingSummary:
      title: BillingSummary
      type: object
      description: A billing summary.
      required:
        - service_id
        - title
        - type
        - term
        - price
        - discount
      properties:
        service_id:
          type: string
          description: The ID of the billing service, the summary pertains to.
        title:
          type: string
          description: The billing summary title.
        type:
          type: string
          description: The plan type.
          enum:
            - tier
            - support
        term:
          $ref: '#/components/schemas/Term'
        price:
          type: string
          description: 1/10th of a cent.
        discount:
          type: string
          description: 1/10th of a cent.
    PaymentGateway:
      title: PaymentGateway
      type: string
      description: The type of payment gateway used.
      enum:
        - stripe
    Refund:
      title: BillingRefund
      type: object
      description: A billing refund.
      required:
        - id
        - time
        - description
        - amount
        - gateway
      properties:
        id:
          $ref: '#/components/schemas/ID'
        time:
          description: A timestamp for the payment.
          $ref: '#/components/schemas/DateTime'
        description:
          type: string
          description: Some information about the payment refund.
        amount:
          type: integer
          description: 1/10th of a cent.
        gateway:
          $ref: '#/components/schemas/PaymentGateway'
    PaymentResult:
      title: PaymentResult
      type: object
      description: A billing payment result.
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          description: A boolean where true represents the success of the payment.
        error:
          type: string
          description: A description of the error that took place.
    Payment:
      title: BillingPayment
      type: object
      description: A billing payment.
      required:
        - id
        - time
        - description
        - amount
        - amount_refunded
        - refunds
        - method_id
        - result
        - gateway
      properties:
        id:
          $ref: '#/components/schemas/ID'
        time:
          description: A timestamp for the payment.
          $ref: '#/components/schemas/DateTime'
        description:
          type: string
          description: Some information about the payment.
        amount:
          type: integer
          description: 1/10th of a cent.
        amount_refunded:
          type: integer
          description: 1/10th of a cent.
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
        method_id:
          type: string
          description: The ID associated with the billing method used.
        result:
          $ref: '#/components/schemas/PaymentResult'
        gateway:
          $ref: '#/components/schemas/PaymentGateway'
    InvoiceCredit:
      title: BillingInvoiceCredit
      type: object
      description: A billing credit for a specific invoice.
      required:
        - id
        - associated_credit
        - time
        - description
        - amount
      properties:
        id:
          $ref: '#/components/schemas/ID'
        associated_credit:
          type: object
          description: Credit associated with an invoice.
          required:
            - id
            - amount
          properties:
            id:
              $ref: '#/components/schemas/ID'
            amount:
              type: integer
              description: The amount of the credit.
        time:
          description: A timestamp for when the invoice credit was created.
          $ref: '#/components/schemas/DateTime'
        description:
          type: string
          description: A description of the invoice credit.
        amount:
          type: integer
          description: The amount of credit for the invoice.
    LateFee:
      title: LateFee
      type: object
      description: A late fee, applied to an invoice.
      required:
        - id
        - time
        - description
        - amount
      properties:
        id:
          $ref: '#/components/schemas/ID'
        time:
          description: A timestamp of when the late fee was created.
          $ref: '#/components/schemas/DateTime'
        description:
          type: string
          description: A description of the late fee.
        amount:
          type: integer
          description: 1/10th of a cent.
    InvoiceState:
      title: InvoiceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the container.
              type: string
              enum:
                - new
                - billing
                - billed
                - processing
                - partially-paid
                - paid
                - refunding
                - refunded
                - crediting
                - credited
                - voiding
                - voided
                - uncollectible
        - $ref: '#/components/schemas/State'
    InvoiceMeta:
      title: InvoiceMeta
      type: object
      description: A list of meta fields that can be applied to a invoice.
      properties:
        due:
          type: integer
          description: The amount due for a given invoice.
    Invoice:
      title: BillingInvoice
      type: object
      description: Information about a billing invoice.
      required:
        - id
        - hub_id
        - approved
        - services
        - payments
        - credits
        - late_fees
        - charges
        - due
        - overdue
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        approved:
          type: boolean
          description: A boolean where true represents the invoice is approved for collection.
        services:
          type: array
          items:
            $ref: '#/components/schemas/BillingSummary'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
        credits:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceCredit'
        late_fees:
          $ref: '#/components/schemas/LateFee'
        charges:
          type: integer
          description: The amount in charges generated through the licesnse agreement + overages for the billing period covered by the invoice.
        due:
          description: A timestamp of when the invoice is due to be paid.
          $ref: '#/components/schemas/DateTime'
        overdue:
          description: A timestamp of when the invoice is overdue.
          $ref: '#/components/schemas/DateTime'
        events:
          title: BillingOrderEvents
          type: object
          description: A collection of timestamps for each event in the billing order's lifetime.
          required:
            - created
            - updated
            - deleted
            - billed
            - paid
            - credited
            - voided
          properties:
            created:
              description: The timestamp of when the billing order was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the billing order was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the billing order was deleted.
              $ref: '#/components/schemas/DateTime'
            billed:
              description: The timestamp of when the billing order billed.
              $ref: '#/components/schemas/DateTime'
            paid:
              description: The timestamp of when the billing order paid.
              $ref: '#/components/schemas/DateTime'
            payment_attempt:
              description: The timestamp of when the billing order payment was attempted.
              $ref: '#/components/schemas/DateTime'
            credited:
              description: The timestamp of when the billing order credited.
              $ref: '#/components/schemas/DateTime'
            voided:
              description: The timestamp of when the billing order voided.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/InvoiceState'
        meta:
          $ref: '#/components/schemas/InvoiceMeta'
    Discount:
      title: BillingDiscount
      type: object
      description: Billing discount information.
      required:
        - id
        - amount
        - expires
      properties:
        id:
          $ref: '#/components/schemas/ID'
        amount:
          $ref: '#/components/schemas/BillingAmount'
        expires:
          description: A timestamp of when the discount expires.
          $ref: '#/components/schemas/DateTime'
    BillingServiceState:
      title: BillingServiceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the billing service.
              type: string
              enum:
                - active
        - $ref: '#/components/schemas/State'
    Service:
      title: BillingService
      type: object
      description: Information about billing service.
      required:
        - id
        - creator
        - hub_id
        - title
        - order
        - item
        - events
        - discount
        - price
        - term
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        title:
          type: string
          description: Billing service title.
        order:
          $ref: '#/components/schemas/Order'
        item:
          $ref: '#/components/schemas/ServiceItem'
        discount:
          $ref: '#/components/schemas/Discount'
        price:
          $ref: '#/components/schemas/BillingAmount'
        term:
          $ref: '#/components/schemas/Term'
        events:
          title: BillingServiceEvents
          type: object
          description: A collection of timestamps for each event in the billing service's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_billed
          properties:
            created:
              description: The timestamp of when the billing service was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the billing service was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the billing service was deleted.
              $ref: '#/components/schemas/DateTime'
            last_billed:
              description: The timestamp of when the billing service was last billed.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/BillingServiceState'
    Overage:
      title: BillingOverage
      type: object
      description: Information about billing overage.
      required:
        - term
        - ram
      properties:
        term:
          $ref: '#/components/schemas/Term'
        ram:
          type: object
          description: Used for gen 1 pricing.
          required:
            - gb_hours
            - cost
          properties:
            gb_hours:
              type: integer
              description: The number of hours of overage.
            cost:
              type: integer
              description: The cost of the overage.
    Credit:
      title: BillingCredit.yml
      type: object
      description: Information about a billing credit.
      required:
        - id
        - hub_id
        - description
        - creator
        - account_id
        - amount
        - amount_remaining
        - expires
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        description:
          type: string
          description: Some extra information about the billing credit.
        account_id:
          type: string
          description: The account the credit was issued to.
        amount:
          type: integer
          description: The amount of credit.
        amount_remaining:
          type: integer
          description: The amount of the credit that remains after being applied to invoices.
        expires:
          nullable: true
          type: object
          description: Information on when the billing credit expires.
          properties:
            date:
              description: A timestamp of when the billing credit expires.
              $ref: '#/components/schemas/DateTime'
        events:
          title: BillingCreditEvents
          type: object
          description: A collection of timestamps for each event in the billing order's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the billing order was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the billing order was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the billing order was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  description: The current state of the credit.
                  type: string
                  enum:
                    - new
                    - live
                    - expired
            - $ref: '#/components/schemas/State'
    EnvironmentAbout:
      title: EnvironmentAbout
      type: object
      description: Contains details regarding the environment.
      required:
        - description
        - favorite
      properties:
        description:
          type: string
          description: A custom description for this environment.
        favorite:
          type: boolean
          description: If true, this environment has been marked as a favorite.
    EnvironmentState:
      title: EnvironmentState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the environment.
              type: string
              enum:
                - new
                - live
                - cloning
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Features:
      title: Features
      type: object
      description: An object representing specialized features configured for this environment.
      required:
        - legacy_networking
      properties:
        legacy_networking:
          description: Whether or not legacy networking mode is enabled on this environment.
          type: boolean
    HAProxyConfig:
      type: object
      required:
        - frontend
        - backend
      properties:
        frontend:
          type: object
          nullable: true
          description: Settings that describe how incoming traffic to the load balancer is handled.
          required:
            - mode
            - max_connections
            - timeouts
          properties:
            mode:
              type: string
              description: |-
                The type of traffic expected by the load balancer for this port. Can be either:
                 - tcp: Traffic is forwarded without any parsing or additional manipulation.
                 - http: Traffic is treated as web traffic. If a LINKED record is configured for a container exposing this port, the domain will be parsed and it will be forwarded to the proper container. This allows multiple services to run on port 80 in the same environment.
              enum:
                - tcp
                - http
            max_connections:
              type: integer
              nullable: true
              description: The number of simultaneous connections that can be processed at a time.
            timeouts:
              type: object
              nullable: true
              description: Various options for handling timeouts when communicating with the client.
              required:
                - client_secs
                - client_fin_ms
                - http_keep_alive_ms
                - http_request_ms
              properties:
                client_secs:
                  type: integer
                  nullable: true
                  description: The number of seconds the load balancer will wait for a response from a client before disconnecting.
                client_fin_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for a client to send it data when one direction is already closed. This is particularly useful to avoid keeping connections in a waiting state for too long when clients do not disconnect cleanly.
                http_keep_alive_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for a new HTTP request to start coming after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
                http_request_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for a complete HTTP request. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only)
        backend:
          type: object
          nullable: true
          description: Settings related to how the load balancer routes connections to container instances.
          required:
            - balance
            - timeouts
          properties:
            balance:
              type: string
              description: |-
                How connections are balanced across your container instances. Can be one of the following:
                 - `round-robin`: Each container instance is used in turns.
                 - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the expense of being less dynamic.
                 - `leastconn`: Routes traffic to the instance with the least number of active connections.
                 - `first`: Routes traffic to the first available instance.
                 - `source`: The same client IP always reaches the same container instance as long as no instance goes down or up.
              enum:
                - round-robin
                - static-rr
                - leastconn
                - first
                - source
            timeouts:
              type: object
              nullable: true
              description: Various options for handling timeouts when communicating with a container instance behind the load balancer.
              required:
                - server_secs
                - server_fin_ms
                - connect_ms
                - queue_ms
                - tunnel_secs
              properties:
                server_secs:
                  type: integer
                  nullable: true
                  description: The number of seconds the load balancer will wait for a response from the container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.2-timeout%20server) for more information.
                server_fin_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for the server to send data when one direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20server-fin) for more information.
                connect_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will wait for a successful connection to a container instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20connect) for more information.
                queue_ms:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will hold connections in a queue when the maximum number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
                tunnel_secs:
                  type: integer
                  nullable: true
                  description: The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-timeout%20tunnel) for more information.
    LoadBalancerEnvironmentService:
      title: LoadBalancerEnvironmentService
      type: object
      nullable: true
      description: Information about the environments loadbalancer service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the loadbalancer service is enabled.
        container_id:
          type: string
          description: The ID of the loadbalancer service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          description: The config object for the loadbalancer service.
          nullable: true
          required:
            - deploy
            - haproxy
          properties:
            deploy:
              type: string
              description: |-
                The deployment strategy for this environment's load balancer(s).
                 - single: Deploys a single load balancer instance to the first available node in the target environment's cluster.
                 - per-provider: Deploys a load balancer instance to the first available node for every provider in the target environment's cluster.
                 - per-location: Deploys a load balancer instance to one node per location in the target environment's cluster.
              enum:
                - single
                - per-provider
                - per-location
            haproxy:
              type: object
              description: Describes settings that are passed to HAProxy within the load balancer.
              nullable: true
              required:
                - default
                - ports
                - ipv4
                - ipv6
              properties:
                default:
                  allOf:
                    - description: Settings that are applied to any port that is not overridden in the following ports section.
                    - $ref: '#/components/schemas/HAProxyConfig'
                ports:
                  allOf:
                    - description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    - $ref: '#/components/schemas/HAProxyConfig'
                ipv4:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv6.
    DiscoveryEnvironmentService:
      title: DiscoveryEnvironmentService
      type: object
      nullable: true
      description: Information about the environments discovery service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the discovery service is enabled.
        container_id:
          type: string
          description: The ID of the discovery service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          description: The config object for the discovery service.
          properties: {}
    VpnEnvironmentService:
      title: VpnEnvironmentService
      type: object
      nullable: true
      description: Information about the environments vpn service(s).
      required:
        - enable
        - container_id
        - high_availability
        - config
      properties:
        enable:
          type: boolean
          description: Whether or not the VPN service is enabled.
        container_id:
          type: string
          description: The ID of the VPN service container
        high_availability:
          type: boolean
          description: A boolean representing if this service container is set to high availability mode or not.
        config:
          type: object
          nullable: true
          description: The config object for the VPN service.
          required:
            - allow_internet
            - auth
          properties:
            allow_internet:
              type: boolean
              description: If true, routes all traffic through the VPN, even non-Cycle traffic.
            auth:
              type: object
              description: Auth configuration for the VPN.
              required:
                - webhook
                - cycle_accounts
              properties:
                webhook:
                  type: string
                  nullable: true
                  description: A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should return a 200 status if the login is permitted.
                cycle_accounts:
                  type: boolean
                  description: If true, allows any Cycle account with access to the environment to log in to the VPN using their Cycle email and password.
                vpn_accounts:
                  type: boolean
                  description: If true, allows the custom VPN accounts to log in to the VPN.
    EnvironmentServices:
      title: EnvironmentServices
      type: object
      description: Service containers run by this environment and their configurations.
      required:
        - loadbalancer
      properties:
        loadbalancer:
          $ref: '#/components/schemas/LoadBalancerEnvironmentService'
        discovery:
          $ref: '#/components/schemas/DiscoveryEnvironmentService'
        vpn:
          $ref: '#/components/schemas/VpnEnvironmentService'
    IPNet:
      title: IPNet
      type: object
      required:
        - ip
        - cidr
      properties:
        ip:
          type: string
          description: The IP address.
          example: fd00::21:0:0:0
        cidr:
          type: string
          description: The CIDR notation, describing the range of IP addresses.
          example: fd00::21:0:0:0/96
    LegacyNetwork:
      title: LegacyNetwork
      type: object
      nullable: true
      description: Legacy network information for an environment.
      required:
        - subnet
        - ipv4
      properties:
        subnet:
          type: integer
          description: The IPv4 subnet Id.
        ipv4:
          allOf:
            - description: IPv4 information available from environments using legacy networking.
            - $ref: '#/components/schemas/IPNet'
    PrivateNetwork:
      title: PrivateNetwork
      type: object
      nullable: true
      required:
        - vxlan_tag
        - subnet
        - ipv6
        - legacy
      properties:
        vxlan_tag:
          type: integer
          description: The vxlan tag added to each packet to help identify the network.
        subnet:
          type: string
          description: The subnet ID.
        ipv6:
          allOf:
            - description: The IPv6 interface.
            - $ref: '#/components/schemas/IPNet'
        legacy:
          $ref: '#/components/schemas/LegacyNetwork'
    StateCountSummary:
      title: ResourceCountSummary
      type: object
      description: A summary of resources by state
      required:
        - state
        - total
        - available
      properties:
        state:
          title: CountsByState
          type: object
          description: A count of this resource, grouped by state.
          additionalProperties:
            type: integer
        total:
          type: integer
          description: The total number of this resource
        available:
          type: integer
          description: The total number of this resource available, less any deleted ones.
      example:
        state:
          new: 0
          starting: 0
          running: 5
          stopping: 0
          deleting: 0
          deleted: 0
        total: 5
        available: 5
    ContainerState:
      title: ContainerState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the container.
              type: string
              enum:
                - new
                - starting
                - running
                - stopping
                - stopped
                - deleting
                - deleted
            desired:
              description: The desired state of the container.
              type: string
              enum:
                - new
                - starting
                - running
                - stopping
                - stopped
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ContainerImageSummary:
      title: ContainerImageSummary
      description: The Id of the image and information on if it is a service.
      type: object
      required:
        - id
        - service
      properties:
        id:
          $ref: '#/components/schemas/ID'
        service:
          type: string
          nullable: true
          description: If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
          enum:
            - discovery
            - loadbalancer
            - vpn
    ContainerEnvironmentSummary:
      title: ContainerEnvironmentSummary
      description: A summary of supplemental environment and network information specific to a container.
      type: object
      required:
        - id
        - cluster
        - container_subnet
        - ipv6
        - legacy
      properties:
        id:
          $ref: '#/components/schemas/ID'
        cluster:
          type: string
          description: The cluster this environment is associated with.
        container_subnet:
          type: string
          description: The private network subnet ID for this container and its instances.
        ipv6:
          allOf:
            - description: The IPv6 interface.
            - $ref: '#/components/schemas/IPNet'
        legacy:
          $ref: '#/components/schemas/LegacyNetwork'
    ContainerSummary:
      title: ContainerSummary
      type: object
      description: Contains useful and relevant data/statistics for a container that would otherwise be several separate API calls.
      required:
        - id
        - name
        - state
        - image
        - environment
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the container resource.
        state:
          $ref: '#/components/schemas/ContainerState'
        image:
          $ref: '#/components/schemas/ContainerImageSummary'
        environment:
          $ref: '#/components/schemas/ContainerEnvironmentSummary'
    EnvironmentMeta:
      title: EnvironmentMeta
      type: object
      description: A list of meta fields that can be applied to this environment.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
        containers:
          type: array
          items:
            $ref: '#/components/schemas/ContainerSummary'
    Environment:
      title: Environment
      type: object
      description: Environments are groups of containers with a private network built between them. For more information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).
      required:
        - id
        - name
        - cluster
        - about
        - creator
        - hub_id
        - state
        - events
        - features
        - services
        - private_network
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the environment resource.
        cluster:
          type: string
          description: The cluster this environment is associated with.
        about:
          $ref: '#/components/schemas/EnvironmentAbout'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        state:
          $ref: '#/components/schemas/EnvironmentState'
        events:
          title: EnvironmentEvents
          type: object
          description: A collection of timestamps for each event in the environment's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the environment was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the environment was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the environment was deleted.
              $ref: '#/components/schemas/DateTime'
        features:
          $ref: '#/components/schemas/Features'
        services:
          $ref: '#/components/schemas/EnvironmentServices'
        private_network:
          $ref: '#/components/schemas/PrivateNetwork'
        meta:
          $ref: '#/components/schemas/EnvironmentMeta'
    Permissions:
      title: Permissions
      description: Permissions information for an API Key
      type: object
      required:
        - all_environments
        - environments
      properties:
        all_environments:
          type: boolean
          description: A boolean, where true represents this API key is authorized to make requests that involve all of a hubs environments
        environments:
          title: EnvironmentPermission
          type: array
          description: An environment ID and a boolean representing management configuration for an API key
          items:
            type: object
            required:
              - id
              - manage
            properties:
              id:
                $ref: '#/components/schemas/ID'
              manage:
                type: boolean
                description: A boolean, where true represents the API keys ability to make changes to the environment components
    ApiKeyCreator:
      title: ApiKeyCreator
      description: An extended resource that has information on a Cycle hub API key
      type: object
      required:
        - id
        - name
        - creator
        - hub_id
        - permissions
        - capabilities
        - ips
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the API key
        hub_id:
          $ref: '#/components/schemas/ID'
        secret:
          type: string
          description: The API key secret
        permissions:
          $ref: '#/components/schemas/Permissions'
        capabilities:
          type: object
          description: The API key capabilities list
          required:
            - all
            - specific
          properties:
            all:
              type: boolean
            specific:
              type: array
              items:
                type: string
        ips:
          type: array
          nullable: true
          items:
            type: string
        state:
          allOf:
            - required:
                - current
              properties:
                current:
                  type: string
                  enum:
                    - live
                    - deleting
                    - deleted
            - $ref: '#/components/schemas/State'
        events:
          $ref: '#/components/schemas/Events'
    CreatorInclude:
      title: CreatorInclude
      description: An identity that created a resource.
      type: object
      properties:
        accounts:
          type: object
          description: Included creators that are public accounts, keyed by ID.
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        employees:
          type: object
          description: Included creators that are employees of Cycle, keyed by ID.
          example: null
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        visitors:
          type: object
          description: Included creators that are not Cycle accounts, keyed by ID.
          example: null
          additionalProperties:
            $ref: '#/components/schemas/PublicAccount'
        environments:
          type: object
          description: Included creators that are Cycle environments (usually automatically created resources), keyed by ID.
          example: null
          additionalProperties:
            $ref: '#/components/schemas/Environment'
        api_keys:
          type: object
          description: Included creators that are Cycle API Keys, keyed by ID.
          example: null
          additionalProperties:
            $ref: '#/components/schemas/ApiKeyCreator'
    EnvironmentServiceContainerSummary:
      title: EnvironmentServiceContainerSummary
      type: object
      description: An object containing information about a service container associated with this environment.
      required:
        - enable
        - container_id
        - state
        - high_availability
      properties:
        enable:
          type: boolean
          description: Whether or not the service is enabled.
        container_id:
          $ref: '#/components/schemas/ID'
        state:
          $ref: '#/components/schemas/ContainerState'
        high_availability:
          type: boolean
          description: Whether or not the service is deployed in high availability
    EnvironmentSummary:
      title: EnvironmentSummary
      type: object
      description: Contains useful and relevant data/statistics for an environment that would otherwise be several separate API calls.
      required:
        - id
        - state
        - services
        - stats
      properties:
        id:
          $ref: '#/components/schemas/ID'
        state:
          $ref: '#/components/schemas/EnvironmentState'
        services:
          title: EnvironmentServiceSummary
          type: object
          description: An object containing information about the service containers associated with this container. Each key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
          required:
            - loadbalancer
            - discovery
            - vpn
          properties:
            loadbalancer:
              nullable: true
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
            discovery:
              nullable: true
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
            vpn:
              nullable: true
              $ref: '#/components/schemas/EnvironmentServiceContainerSummary'
        stats:
          title: EnvironmentSummaryStats
          type: object
          description: Statistics about the containers and instances associated with this environment.
          required:
            - containers
            - instances
          properties:
            containers:
              $ref: '#/components/schemas/StateCountSummary'
            instances:
              $ref: '#/components/schemas/StateCountSummary'
    LoadBalancerInfoReturn:
      title: LoadBalancerInfoReturn
      type: object
      description: Information about an environments load balancer configuration, state, and availability settings.
      required:
        - default_config
        - service
      properties:
        default_config:
          type: object
          description: The default configuration of the load balancer.
          properties:
            haproxy:
              type: object
              description: Describes settings that are passed to HAProxy within the load balancer.
              nullable: true
              required:
                - default
                - ports
                - ipv4
                - ipv6
              properties:
                default:
                  allOf:
                    - description: Settings that are applied to any port that is not overridden in the following ports section.
                    - $ref: '#/components/schemas/HAProxyConfig'
                ports:
                  allOf:
                    - description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                    - $ref: '#/components/schemas/HAProxyConfig'
            ipv4:
              type: boolean
              nullable: true
              description: Allow / disallow traffic to be routed via IPv4.
            ipv6:
              type: boolean
              nullable: true
              description: Allow / disallow traffic to be routed via IPv6.
        service:
          type: object
          description: Contains information about the status of the load balancer, as well as configuration overrides.
          required:
            - enable
            - container_id
            - high_availability
          properties:
            enable:
              type: boolean
              description: Whether or not the loadbalancer service is enabled.
            container_id:
              type: string
              description: The ID of the loadbalancer service container
            high_availability:
              type: boolean
              description: A boolean representing if this service container is set to high availability mode or not.
            config:
              type: object
              description: Contains custom configuration overrides for the load balancer. If null, the default config will be used.
              properties:
                haproxy:
                  type: object
                  description: Describes settings that are passed to HAProxy within the load balancer.
                  nullable: true
                  required:
                    - default
                    - ports
                    - ipv4
                    - ipv6
                  properties:
                    default:
                      allOf:
                        - description: Settings that are applied to any port that is not overridden in the following ports section.
                        - $ref: '#/components/schemas/HAProxyConfig'
                    ports:
                      allOf:
                        - description: An object that defines how HAProxy will act on a specific port. The key is a custom port, and the value is the same settings object found under `default` above.
                        - $ref: '#/components/schemas/HAProxyConfig'
                ipv4:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv4.
                ipv6:
                  type: boolean
                  nullable: true
                  description: Allow / disallow traffic to be routed via IPv6.
    VPNInfoReturn:
      title: VPNInfo
      type: object
      description: A summary of a VPN service for a given environment.
      required:
        - url
        - service
      properties:
        url:
          type: string
          description: A url associated with the VPN service.
        service:
          $ref: '#/components/schemas/VpnEnvironmentService'
    VPNUsers:
      title: VPNUser
      type: object
      description: A VPN user for a given VPN.
      required:
        - id
        - username
        - creator
        - last_login
        - hub_id
        - environment_id
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        username:
          type: string
          description: The username for the login.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        last_login:
          description: A timestamp of the last time the user logged into the VPN.
          $ref: '#/components/schemas/DateTime'
        hub_id:
          $ref: '#/components/schemas/HubID'
        environment_id:
          type: string
          description: An identifier for the environment the VPN service is associated with.
        events:
          title: VPNUserEvents
          type: object
          description: A collection of timestamps for each event in the VPN user's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the VPN user was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the VPN user was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the VPN user was deleted.
              $ref: '#/components/schemas/DateTime'
    InstanceTelemetryPoint:
      title: InstanceTelemetryPoint
      description: A point-in-time snapshot of a count of instances by state.
      required:
        - time
        - instances
      type: object
      properties:
        time:
          description: A timestamp for when the data was collected.
          $ref: '#/components/schemas/DateTime'
        instances:
          description: Records for instance state and number of instances in that state.
          type: object
          additionalProperties:
            type: integer
    ScopedVariableScope:
      title: ScopedVariableScope
      type: object
      description: Information about the assignment of the scoped variable and how it is invoked.
      required:
        - access
        - containers
      properties:
        access:
          type: object
          description: The type or way the scoped variable is accessed.
          required:
            - env_variable
            - internal_api
          properties:
            env_variable:
              type: boolean
              description: A boolean, where true represents this scoped variable is accessed like a normal environment variable.
            internal_api:
              type: boolean
              description: A boolean, where true represents this scoped variable is accessed through Cycle's internal API.
            file:
              type: boolean
              description: A boolean, where true represents this scoped variables is accessed as a file located at `/var/run/cycle/variables/<identifier>`
        containers:
          type: object
          description: Information about the assignment of the scoped variable to different containers in the environment.
          required:
            - global
            - ids
            - identifiers
          properties:
            global:
              type: boolean
              description: A boolean where true represents the scoped variables is globally assigned to all current and future containers in the environment.
            ids:
              type: array
              description: An array of container IDs, where each container identified will have access to the scoped variable.
              items:
                type: string
            identifiers:
              type: array
              description: An array of container identifiers, where each container identfied will have access to the scoped variable.
              items:
                type: string
    URLSource:
      title: URLScopedVariableSource
      type: object
      description: The `URL` type of scoped variable `value`, referred to as a source. This means the value of this variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the contents on every start.
      required:
        - type
        - details
      properties:
        type:
          type: string
          description: The type of source value, can be either `raw` or `url`.
          enum:
            - url
        details:
          type: object
          required:
            - url
          properties:
            url:
              type: string
              description: The URL to call to produce the value.
    RawSource:
      title: RawScopedVariableSource
      type: object
      description: The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is static, not the result of a call to an external or internal URL.
      required:
        - type
        - details
      properties:
        type:
          type: string
          description: The type of source value, can be either `raw` or `url`.
          enum:
            - raw
        details:
          type: object
          required:
            - string
            - blob
          properties:
            string:
              type: string
              description: The value of the source.
            blob:
              type: boolean
              description: A boolean where true represents the text the user is entering will be multi line.
    ScopedVariableState:
      title: ScopedVariableState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the scoped variable.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ScopedVariable:
      title: ScopedVariable
      type: object
      description: Scoped variables are a way for users to dynamically allocate runtime specific environment variables across any number of containers in an environment.
      required:
        - id
        - creator
        - hub_id
        - environment_id
        - identifier
        - secret
        - scope
        - source
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        environment_id:
          type: string
          description: An identifier used to reference the environment this resource is scoped to.
        identifier:
          type: string
          description: An identifier, similar to a key in an environment variable.  Its used when envoking the scoped variable.
        secret:
          nullable: true
          type: object
          description: An object with information about the encryption of the scoped variable.
          required:
            - encrypted
          properties:
            encrypted:
              type: boolean
              description: A boolean where true means the scoped variables value is encrypted.
            hint:
              type: string
              description: A hint for the decryption password.
        scope:
          $ref: '#/components/schemas/ScopedVariableScope'
        source:
          type: object
          description: The source or value of the scoped variable.
          discriminator:
            propertyName: type
          anyOf:
            - $ref: '#/components/schemas/URLSource'
            - $ref: '#/components/schemas/RawSource'
        state:
          $ref: '#/components/schemas/ScopedVariableState'
        events:
          title: ScopedVariableEvents
          type: object
          description: A collection of timestamps for each event in the Scoped Variable's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the scoped variable was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the scoped variable was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the scoped variable was deleted.
              $ref: '#/components/schemas/DateTime'
    ImageSummary:
      title: ContainerImageSummary
      description: A summary of the image this container was created from.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        service:
          type: string
          nullable: true
          description: If a service container, the identifier specifying which service it is.
          enum:
            - loadbalancer
            - discovery
            - vpn
    StackSummary:
      title: ContainerStackSummary
      description: A summary of the stack this container was created format.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        image:
          type: object
          properties:
            id:
              type: string
              description: The ID of the image used for this container.
        build_id:
          type: string
          description: The ID of the stack build this container is associated with.
        identifier:
          type: string
          description: The container identifier, usually the key to the container section of a stack file.
    ContainerNetwork:
      title: ContainerNetwork
      type: object
      description: Network configuration for a container.
      required:
        - public
        - hostname
      properties:
        public:
          type: string
          description: The public network settings for the given container
          enum:
            - enable
            - egress-only
            - disable
        hostname:
          type: string
          description: The hostname for the given container.
        ports:
          type: array
          items:
            type: string
          description: An array of port mappings for the container.
    DeploymentStrategyName:
      title: DeploymentStrategyName
      type: string
      enum:
        - resource-density
        - high-availability
        - first-available
        - node
        - edge
        - manual
    ContainerDeploy:
      title: ContainerDeploy
      type: object
      description: Deployment configuration for the given container.
      required:
        - instances
      properties:
        instances:
          type: integer
          description: The number of initial desired instances for a given container.
        strategy:
          $ref: '#/components/schemas/DeploymentStrategyName'
          description: The deployment strategy to use when scaling the given container.
        stateful:
          type: object
          properties:
            options:
              type: object
              nullable: true
              properties:
                use_base_hostname:
                  type: boolean
                  nullable: true
        constraints:
          type: object
          description: Settings that give more granular control over deployment targets and conditions.
          properties:
            node:
              type: object
              description: Constraint settings related to which nodes an instance can be deployed to.
              required:
                - tags
              properties:
                tags:
                  type: object
                  description: Lists of server tags that formally declair servers that match the criteria for deployment.
                  properties:
                    any:
                      type: array
                      items:
                        type: string
                      description: A list of tags where a server matching any tags from the list is qualified as a deployment target.
                    all:
                      type: array
                      items:
                        type: string
                      description: A list of tags where a server matching all tags from the list is the only scenario where the server is qualified as a deployment target.
            containers:
              type: array
              items:
                type: string
              description: An array of container identifiers the platform will send the start signal to before sending the start signal to this container.
        shutdown:
          type: object
          description: Configuration for what to do during container shutdown.
          required:
            - graceful_timeout
            - signals
          properties:
            graceful_timeout:
              type: integer
              description: The time in seconds the platform will wait for a container to stop gracefully.
            signals:
              type: array
              items:
                type: string
                enum:
                  - SIGTERM
                  - SIGINT
                  - SIGUSR1
                  - SIGUSR2
                  - SIGHUP
                  - SIGQUIT
              description: Process signal sent to the container process.
        startup:
          type: object
          description: Configurations for container startup.
          properties:
            delay:
              type: integer
              description: A value in seconds representing how long the platform will wait before sending the start signal to the given container.
        update:
          type: object
          description: Configurations for how the container behaves when updating.
          required:
            - parallelism
            - delay
          properties:
            parallelism:
              type: integer
            delay:
              type: integer
        restart:
          type: object
          description: Configurations for container restart events.
          required:
            - condition
            - delay
            - max_attempts
          properties:
            condition:
              type: string
              description: Policy for what should happen in the event of a container dying.
              enum:
                - always
                - never
                - failure
            delay:
              type: integer
              description: Time in seconds the platform will wait before trying to restart the container.
            max_attempts:
              type: integer
              description: The amount of times the platform will attempt the restart policies.
        health_check:
          type: object
          description: Configuration for determining the health of a container.
          required:
            - command
            - retries
            - interval
            - timeout
            - restart
          properties:
            command:
              type: string
              description: The command that will be run to verify the health of the container.
            retries:
              type: integer
              description: The number of times the platform will retry the command before marking the container unhealthy.
            interval:
              type: integer
              description: The number of seconds between retries.
            timeout:
              type: integer
              description: The number of time in seconds before a health check attempt times out.
            restart:
              type: boolean
              description: A boolean where `true` represents the desire for a container to restart if unhealthy.
        telemetry:
          type: object
          description: Configuration settings for container telemetery reporting.
          required:
            - retention
            - interval
            - disable
          properties:
            retention:
              type: integer
              description: The number in seconds for telemetry data to be retained.
            interval:
              type: integer
              description: The number in seconds between samples.
            disable:
              type: boolean
              description: A boolean where true disables all telemetry reporting for this container.
            webhook:
              type: string
              description: An endpoint to report the telemetry data to.
    SeccompRule:
      title: SeccompRule
      description: Rules for controlling Linux seccomp inside a container.
      type: object
      properties:
        capabilities:
          type: object
          properties:
            includes:
              type: string
            excludes:
              type: string
        syscall:
          type: object
          description: LinuxSyscall is used to match a syscall in Seccomp
          required:
            - names
            - action
          properties:
            names:
              type: array
              items:
                type: string
            action:
              type: string
            errnoRet:
              type: integer
            args:
              type: array
              items:
                type: object
                required:
                  - index
                  - value
                  - op
                properties:
                  index:
                    type: integer
                  value:
                    type: integer
                  valueTwo:
                    type: integer
                  op:
                    type: string
    ContainerRuntime:
      title: ContainerRuntime
      type: object
      description: Runtime configurations for a given container.
      required:
        - privileged
        - seccomp
      properties:
        command:
          type: object
          description: A command that will be run in place of the images defined startup command.
          required:
            - path
            - args
          properties:
            path:
              type: string
              description: System path for the command.
            args:
              type: string
              description: Arguments to pass to the command.
        namespaces:
          type: array
          items:
            type: string
            enum:
              - ipc
              - pid
              - uts
              - network
              - mount
              - user
          description: Namespaces the given container will have access to.
        environment_vars:
          type: object
          description: A record of environment variables for the given container.
          additionalProperties:
            type: string
        privileged:
          type: boolean
          description: Selecting this option will give this container full permissions on the server. This is not recommended and increases the likelihood of your server being compromised.
        capabilities:
          type: array
          items:
            type: string
            enum:
              - CAP_CHOWN
              - CAP_FSETID
              - CAP_DAC_OVERRIDE
              - CAP_FOWNER
              - CAP_SETFCAP
              - CAP_SETGID
              - CAP_SETUID
              - CAP_KILL
              - CAP_MKNOD
              - CAP_NET_BIND_SERVICE
              - CAP_NET_RAW
              - CAP_AUDIT_WRITE
              - CAP_SYS_CHROOT
              - CAP_SETPCAP
              - CAP_DAC_READ_SEARCH
              - CAP_NET_ADMIN
              - CAP_NET_BROADCAST
              - CAP_SYS_ADMIN
              - CAP_SYS_MODULE
              - CAP_SYS_NICE
              - CAP_SYS_PACCT
              - CAP_SYS_PTRACE
              - CAP_SYS_RAWIO
              - CAP_SYS_RESOURCE
              - CAP_SYS_BOOT
              - CAP_SYS_TIME
              - CAP_SYS_TTY_CONFIG
              - CAP_SYSLOG
              - CAP_AUDIT_CONTROL
              - CAP_AUDIT_READ
              - CAP_IPC_LOCK
              - CAP_IPC_OWNER
              - CAP_LINUX_IMMUTABLE
              - CAP_MAC_ADMIN
              - CAP_MAC_OVERRIDE
              - CAP_BLOCK_SUSPEND
              - CAP_LEASE
              - CAP_WAKE_ALARM
          description: A list of linux kernel capabilites for the given container.
        workdir:
          type: string
          description: Configure the working directory for the given container.
        sysctl:
          type: object
          description: A record of sysctl fields and values for a given container.
          additionalProperties:
            type: string
        rlimits:
          type: object
          description: A record of rlimits and their values.
          additionalProperties:
            type: object
            properties:
              hard:
                type: integer
                description: The hard limit for the rlimit.
              soft:
                type: integer
                description: The soft limit for the rlimit.
        seccomp:
          nullable: true
          type: object
          properties:
            disable:
              type: boolean
            rules:
              type: array
              items:
                $ref: '#/components/schemas/SeccompRule'
        rootfs:
          type: object
          properties:
            readonly:
              description: Enabling this option will set the containers filesystem to readonly. Volumes associated with the container will not be affected by this.
              type: boolean
    ContainerResources:
      title: ContainerResources
      type: object
      description: Configuration settings for the resource allocations and limits of a given container.
      required:
        - cpu
        - ram
      properties:
        cpu:
          type: object
          description: Configurations settings related to CPU usage.
          properties:
            shares:
              type: object
              description: A share represents 1/10th of the available compute time on a single thread.
              required:
                - limit
                - reserve
              properties:
                limit:
                  type: integer
                  description: The limit (maximum) amount of shares each instance of a container can use.
                reserve:
                  type: integer
                  description: The reserve (allocation) number of shares for each instance of a given container.
            cpus:
              type: array
              items:
                type: integer
              description: An array of CPU cores this container will be pinned to.
        ram:
          type: object
          description: Configuration settings for limits and reserves of RAM resources for the given container.
          properties:
            limit:
              type: string
              description: The limit (maximum) amount of RAM each instance of the given container can use.
              example: 1G, 2M
            reserve:
              type: string
              description: The reserve (allocation) of RAM given to each instance of the container.
    ContainerIntegrations:
      title: ContainerIntegrations
      type: object
      description: Configuration settings for integrations with a given container.
      properties:
        webhooks:
          type: object
          description: Webhooks that can be set for specific event reporting and advanced container configurations.
          properties:
            events:
              type: object
              description: Container events that can be configured to report to a webhook.
              properties:
                deploy:
                  type: string
                  description: A webhook to hit when a container deploy event happens.
                start:
                  type: string
                  description: A webhook to hit when a container start event happens.
                stop:
                  type: string
                  description: A webhook to hit when a container stop event happens.
            config:
              type: string
              description: An endpoint that the platform will react out to with a get request.  This endpoint serves a partial container config which can modify `runtime`, `resources`, and `integrations` configurations.
        files:
          type: array
          description: Inject remotely hosted files into container instances at runtime.
          items:
            type: object
            description: These objects are sources and destinations for the given files.
            required:
              - source
              - destination
            properties:
              source:
                type: string
                description: The http endpoint that is hosting the files to be used.
              destination:
                type: string
                description: The path in the container for these files to be injected.
        lets_encrypt:
          type: object
          description: Configuration settings to embed a TLS certificate in the container.
          required:
            - enable
          properties:
            enable:
              type: boolean
              description: A boolean where true represents the desire for a container to have its corresponding TLS certificate(s) injected into the configured path(s).
            certificate_path:
              type: string
              description: Path where the `certificate.cert` will be saved.
            chain_path:
              type: string
              description: Path where the `certificate.chain` will be saved.
            key_path:
              type: string
              description: Path where the `certificate.key` will be saved.
            bundle_path:
              type: string
              description: Path where the `certificate.bundle` will be saved.
            additional_certs_path:
              type: string
              description: File path where any remaining certificate files will be stored.
        backups:
          type: object
          description: Automated backups configuration for the given container.
          required:
            - destination
            - backup
            - restore
          properties:
            destination:
              type: string
              description: The storage provider to use for backups.
              enum:
                - backblaze-b2
            backup:
              type: object
              description: Configuration settings for each backup.
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to run for the backup.
                timeout:
                  type: integer
                  description: The time in seconds for the backup to attempt to run before timing out.
                  nullable: true
                cron_string:
                  type: string
                  description: A cron string that configures how often the backup will run.
            restore:
              type: object
              description: Configuration settings for restoring from a backup.
              required:
                - command
              properties:
                command:
                  type: string
                  description: The command to run for restoring from a backup.
                timeout:
                  type: integer
                  nullable: true
                  description: The time in seconds for the restore to appempt to complete before timing out.
    Config:
      title: ContainerConfig
      description: A container configuration.
      type: object
      required:
        - network
        - deploy
      properties:
        network:
          $ref: '#/components/schemas/ContainerNetwork'
        deploy:
          $ref: '#/components/schemas/ContainerDeploy'
        runtime:
          $ref: '#/components/schemas/ContainerRuntime'
        resources:
          $ref: '#/components/schemas/ContainerResources'
        integrations:
          $ref: '#/components/schemas/ContainerIntegrations'
    Volumes:
      title: ContainerVolumes
      type: object
      description: Configuration settings for container volumes.
      required:
        - read_only
        - destination
      properties:
        read_only:
          type: boolean
          description: A boolean where true marks the volume as read only.
        local:
          type: object
          description: Configuration for settings local to the container filesystem.
          required:
            - max_size
          properties:
            max_size:
              type: string
              description: The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes.
              example: 10G
            storage_pool:
              type: boolean
              description: A boolean where true signifies using the largest drive over 2TB for the target server.
        destination:
          type: string
          description: The mountpoint path for the container.
        remote_access:
          type: object
          description: Configuration settings for remotely accessing the container volume.
          required:
            - enable
            - password
          properties:
            enable:
              type: boolean
              description: A boolean where true represents this container volume being open to remote access connections over SFTP.
            ips:
              type: array
              items:
                type: string
            web_hook:
              type: string
              description: Call out to a webhook to authenticate usernames/passwords if an organization manages their own accounts
            password:
              type: object
              nullable: true
              description: Password configuration settings for the remote access of the container volume.
              required:
                - algorithm
                - data
              properties:
                algorithm:
                  type: string
                  description: The hashing algorithm used to has the password.
                  enum:
                    - raw
                    - sha512
                    - md5
                data:
                  type: string
                  description: The raw or hashed password.
    VolumeSummary:
      title: VolumeSummary
      type: object
      description: A summary of relevant volume information.
      required:
        - id
        - hash
        - config
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hash:
          type: string
          description: A unique hash for the given volume.
        config:
          $ref: '#/components/schemas/Volumes'
    RecordTypes:
      title: DNSRecordTypes
      type: object
      description: DNS record types the platform supports.
      properties:
        a:
          type: object
          description: A DNS A record
          required:
            - ip
          properties:
            ip:
              type: string
              description: The IPv4 address that the A record should map to.
        aaaa:
          type: object
          description: A DNS AAAA record
          required:
            - ip
          properties:
            ip:
              type: string
              description: The IPv6 address that the AAAA record should map to.
        cname:
          type: object
          description: A DNS CNAME record
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain string the record resolves to.
        ns:
          type: object
          description: A DNS NS record
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain of the nameserver for this record.
        mx:
          type: object
          description: A DNS MX record
          required:
            - priority
            - domain
          properties:
            priority:
              type: string
              description: The priority setting for this mx record.
            domain:
              type: string
              description: The domain this mx record points to.
        txt:
          type: object
          description: A DNS TXT record.
          required:
            - value
          properties:
            value:
              type: string
              description: The value for this TXT record.
        alias:
          type: object
          description: A DNS ALIAS record.
          required:
            - domain
          properties:
            domain:
              type: string
              description: The domain string returned from the DNS server when this alias record is requested.
        srv:
          type: object
          description: A DNS SRV record.
          required:
            - weight
            - priority
            - port
            - domain
          properties:
            weight:
              type: integer
              description: Teh weight configured for this record - breaks ties for priority.
            priority:
              type: integer
              description: The priority for the record.
            port:
              type: integer
              description: The port number for the service.
            domain:
              type: string
              description: The domain for the record.
        caa:
          type: object
          description: A DNS CAA record.
          required:
            - tag
            - value
          properties:
            tag:
              type: string
              description: The ASCII string that represents the identifier of the property represented by the record.
            value:
              type: string
              description: The value associated with the tag.
        linked:
          type: object
          description: A Linked record is a record special to Cycle.  It represents a url that points to a specific container, however the IP address mapping in handled automatically by the platform.
          required:
            - features
          properties:
            container_id:
              type: string
              description: The ID of the container this record is related to.
            features:
              type: object
              description: Features associated with this record.
              required:
                - tls
              properties:
                tls:
                  type: object
                  description: TLS properties of the record.
                  required:
                    - enable
                  properties:
                    enable:
                      type: boolean
                      description: A boolean, where true represents this record will be paired with a TLS certificate automatically maintained by the platform.
    Certificate:
      title: DNSRecordCertificate
      type: object
      description: A TLS record certificate
      required:
        - id
        - generated
        - wildcard_child
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/ID'
        generated:
          $ref: '#/components/schemas/DateTime'
        wildcard_child:
          type: boolean
          description: A value where true represents that the certificate is using a shared wildcard cert.
    RecordState:
      title: DNSRecordState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the record.
              type: string
              enum:
                - pending
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Record:
      title: DNSRecord
      type: object
      description: A DNS record.
      required:
        - id
        - hub_id
        - creator
        - zone_id
        - name
        - resolved_domain
        - type
        - features
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        zone_id:
          type: string
          description: A unique identifier for the zone
        name:
          type: string
          description: A name used for the record, where `@` signifies the use of the root domain.
        resolved_domain:
          type: string
          description: The name of the record and the origin as a domain name.
        type:
          $ref: '#/components/schemas/RecordTypes'
        features:
          type: object
          description: TLS features for the record.
          required:
            - certificate
          nullable: true
          properties:
            certificate:
              $ref: '#/components/schemas/Certificate'
        state:
          $ref: '#/components/schemas/RecordState'
        events:
          $ref: '#/components/schemas/Events'
    IpState:
      title: IpState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the IP.
              type: string
              enum:
                - assigning
                - assigned
                - releasing
                - available
    Ip:
      title: Ip
      type: object
      description: An IP resource.
      required:
        - id
        - hub_id
        - kind
        - assingment
        - pool_id
        - address
        - gateway
        - cidr
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        kind:
          type: string
          description: The type of IP protocol this IP is.
          enum:
            - ipv4
            - ipv6
        assignment:
          type: object
          description: Information about the assignment of this IP.
          nullable: true
          required:
            - container_id
            - instance_id
            - environment_id
          properties:
            container_id:
              type: string
            instance_id:
              type: string
            environment_id:
              type: string
        pool_id:
          type: string
          description: A unique identifier that associates the IP with an IP pool.
        address:
          type: string
          description: The IP address.
        gateway:
          type: string
          description: The IP gateway.
        cidr:
          type: string
          description: The CIDR for the IP.
        state:
          $ref: '#/components/schemas/IpState'
    ContainersMeta:
      title: ContainersMeta
      type: object
      description: A list of meta fields that can be applied to a container.
      properties:
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
        domain:
          type: string
          description: The FQDN for this container, if there is one.
        domains:
          type: array
          items:
            type: object
            description: Holds domain name and record mappings.
            required:
              - fqdn
              - record
            properties:
              fqdn:
                type: string
                description: The fully qualified domain name.
              record:
                $ref: '#/components/schemas/Record'
        ips:
          description: An array of IP resources.
          type: array
          items:
            $ref: '#/components/schemas/Ip'
    Container:
      title: Container
      type: object
      description: Containers are a way to package together your application along with it's dependencies, and run in a resource isolated process. They provide consistency across different hosts, efficiency over traditional hosting methods, and facilitate a micro-service based approach, where each logical piece of your application is split into multiple, easily testable parts (such as API, Backend, Frontend, etc).
      required:
        - id
        - name
        - identifier
        - creator
        - environment
        - hub_id
        - image
        - config
        - instances
        - annotations
        - stateful
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the container resource.
        identifier:
          type: string
          description: A human readable slugged identifier for this container. Usually used as a key in a stack file.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        environment:
          $ref: '#/components/schemas/ContainerEnvironmentSummary'
        hub_id:
          $ref: '#/components/schemas/HubID'
        image:
          $ref: '#/components/schemas/ImageSummary'
        stack:
          $ref: '#/components/schemas/StackSummary'
        config:
          $ref: '#/components/schemas/Config'
        instances:
          type: integer
          description: The number of instances for a given container.
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/VolumeSummary'
        annotations:
          type: object
          description: Custom meta data for a given container
          nullable: true
          additionalProperties:
            type: string
        role:
          type: string
          description: The role of a given container if it has one.
          enum:
            - orchestrator
          nullable: true
        stateful:
          type: boolean
          description: A boolean where true signifies the container is stateful.
        deprecate:
          type: boolean
          description: A boolean where true signifies the container is marked as deprecated.
        state:
          $ref: '#/components/schemas/ContainerState'
        events:
          title: ContainerEvents
          type: object
          description: A collection of timestamps for each event in the container's lifetime.
          required:
            - created
            - updated
            - deleted
            - started
          properties:
            created:
              description: The timestamp of when the container was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the container was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the container was deleted.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the container was started.
              $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ContainersMeta'
    DockerHubSource:
      title: DockerHubSource
      properties:
        type:
          type: string
          enum:
            - docker-hub
        details:
          type: object
          description: An image source origin that pulls from DockerHub.
          required:
            - target
          properties:
            target:
              type: string
              description: The DockerHub target string. ex - `mysql:5.7`
            username:
              type: string
              description: For authentication, a username.
            token:
              type: string
              description: For authentication, a token.
    CredentialsHTTP:
      title: HTTPSourceCredentials
      type: object
      required:
        - type
        - credentials
      properties:
        type:
          type: string
          enum:
            - http
        credentials:
          type: object
          description: Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
          required:
            - username
            - password
          properties:
            username:
              type: string
              description: For authentication, the username.
            password:
              type: string
              description: For authentication, the password.
    CredentialsSSH:
      title: SSHSourceCredentials
      type: object
      required:
        - type
        - credentials
      properties:
        type:
          type: string
          enum:
            - ssh
        credentials:
          type: object
          description: Authentication credentials for the Dockerfile image source type when authenticating with SSH.
          required:
            - username
            - passphrase
            - private_key
          properties:
            username:
              type: string
              description: The username for the repo service, that is used to authenticate an ssh key.
            passphrase:
              type: string
              description: The passphrase used for the key.
            private_key:
              type: string
              description: A pem encoded private key.
    RepoType:
      title: RepoSourceType
      type: object
      description: Information about the repostiory.
      required:
        - url
      properties:
        url:
          type: string
          description: The URL of the repository.
        branch:
          type: string
          description: An optional branch arguement.  Default value is `master`.
        auth:
          type: object
          description: Authentication information for the repository.
          discriminator:
            propertyName: type
          anyOf:
            - $ref: '#/components/schemas/CredentialsHTTP'
            - $ref: '#/components/schemas/CredentialsSSH'
        ref:
          type: object
          description: Repository reference information.
          required:
            - type
            - value
          properties:
            type:
              type: string
              description: The type of reference being used.
              enum:
                - hash
                - tag
            value:
              type: string
              description: The value for the given reference type.
    DockerfileCredentials:
      title: DockerfileCredentails
      description: An array of credentials objects to be used when authenticating against private images used by the Dockerfile.
      type: array
      items:
        type: object
        description: Credentials object used for authentication of indirect resources such as private parent images.
        properties:
          url:
            type: string
            description: The url the resource is located at.
          username:
            type: string
            description: A username for authentication.
          token:
            type: string
            description: A token for authentication.
    DockerfileFileSource:
      title: DockerfileFileSource
      properties:
        type:
          type: string
          enum:
            - docker-file
        details:
          type: object
          description: An image source origin that creates an image from a Dockerfile that's listed in a repository.
          properties:
            repo:
              $ref: '#/components/schemas/RepoType'
            targz_url:
              type: string
              description: An endpoint that serves the tar file.
            context_dir:
              type: string
              description: The path to the directory to use as the context when building the image.
            build_file:
              type: string
              description: The path to the Dockerfile to be used for buiding the image.
            credentials:
              $ref: '#/components/schemas/DockerfileCredentials'
    DockerRegistrySource:
      title: DockerRegistrySource
      properties:
        type:
          type: string
          enum:
            - docker-registry
        details:
          type: object
          description: An image source origin that pulls from a private Docker registry.
          required:
            - target
            - url
          properties:
            target:
              type: string
              description: The image name on the registry.
            url:
              type: string
              description: The url of the remote registry.
            username:
              type: string
              description: For authentication, a username.
            token:
              type: string
              description: For authentication, a token.
            password:
              type: string
              description: For authentication, a password.
    ImageSourceOrigin:
      title: ImageSourceOrigin
      type: object
      description: The origin of the given image source.
      discriminator:
        propertyName: type
      anyOf:
        - $ref: '#/components/schemas/DockerHubSource'
        - $ref: '#/components/schemas/DockerfileFileSource'
        - $ref: '#/components/schemas/DockerRegistrySource'
    ImageState:
      title: ImageState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the image.
              type: string
              enum:
                - new
                - downloading
                - building
                - verifying
                - saving
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ImageMeta:
      title: ImageMeta
      type: object
      description: A list of meta fields that can be applied to the image.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
    Image:
      title: Image
      type: object
      description: An Image Resource, which is a point in time build on a given image source.
      required:
        - id
        - hub_id
        - name
        - stack
        - size
        - backend
        - tags
        - config
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A user defined name for the image.
        stack:
          type: object
          description: If the image is part of a stack, that information will be available here.
          required:
            - id
            - build_id
            - containers
          properties:
            id:
              $ref: '#/components/schemas/ID'
            build_id:
              type: string
              description: A unique identifier for the build the image is assocaited with.
            containers:
              description: If this image is being used for any containers their identifiers are listed here.
              type: array
              items:
                type: string
        size:
          type: integer
          description: The image size in bytes.
        about:
          type: object
          description: An object that holds information about the image.
          required:
            - description
          properties:
            description:
              type: string
              nullable: true
              description: A description of the image.
        backend:
          type: object
          description: Describes where the image is hosted.
          required:
            - provider
            - size
            - file_name
            - file_id
          properties:
            provider:
              type: string
              description: The provider where this image is hosted.
            size:
              type: string
              description: The size of the image in bytes.
            file_name:
              type: string
              description: A file name for the image, used by the platform.
            file_id:
              type: string
              description: A file id for the image, used by the platform.
        tags:
          description: Tags that describe the version, package, or data about the image.
          type: array
          items:
            type: string
        config:
          type: object
          description: Configuration settings for the image.
          required:
            - user
            - ports
            - env
            - labels
            - command
            - onbuild
            - entrypoint
            - volumes
            - workdir
            - signal_stop
          properties:
            user:
              type: string
              description: The linux user this image runs its processes as.
            ports:
              description: The port settings for the image.
              type: array
              items:
                type: object
                required:
                  - host
                  - container
                  - type
                properties:
                  host:
                    description: Host Port
                    type: number
                  container:
                    type: number
                  type:
                    type: string
            env:
              type: object
              description: Image defined environment variables for the image.
              additionalProperties:
                type: string
            labels:
              type: string
              description: Image labels.
            command:
              description: The CMD array used to start the container.
              type: array
              items:
                type: string
            onbuild:
              description: Additional commands to run at build time.
              type: array
              items:
                type: string
            entrypoint:
              description: An entrypoint command.
              type: array
              items:
                type: string
            volumes:
              description: Volumes information for the given image.
              type: array
              items:
                type: object
                properties:
                  path:
                    type: string
                    description: The path where the volume is mounted.
                  mode:
                    type: string
                    description: Permission settings for the volume.
                    enum:
                      - ro
                      - rw
            workdir:
              type: string
              description: The working directory for the image.
            signal_stop:
              type: string
              description: A set command to be run if a signal is called.
        source:
          type: object
          required:
            - type
            - details
          properties:
            type:
              type: string
            details:
              type: object
              required:
                - id
                - stack_id
                - origin
              properties:
                id:
                  type: string
                stack_id:
                  type: string
                origin:
                  $ref: '#/components/schemas/ImageSourceOrigin'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        factory:
          type: object
          description: Identifies which factory the image was built on and when.
          required:
            - node_id
            - acknowledged
          properties:
            node_id:
              type: string
              description: The node holding the factory service that was responsible for building the image.
            acknowledged:
              $ref: '#/components/schemas/DateTime'
              description: A date timestamp for when the node acknowledged the image import job.
        state:
          $ref: '#/components/schemas/ImageState'
        events:
          title: ImageEvents
          type: object
          description: A collection of timestamps for each event in the image's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ImageMeta'
    ImagesIncludes:
      title: ImageIncludes
      description: A resource associated with an image.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Image'
    StackContainerConfigNetwork:
      title: StackContainerConfigNetwork.yml
      type: object
      required:
        - public
        - hostname
      properties:
        public:
          type: string
          enum:
            - enable
            - disable
            - egress-only
        hostname:
          type: string
        ports:
          type: array
          items:
            type: string
    StackContainerConfigDeploy:
      title: StackContainerConfigDeploy.yml
      type: object
      required:
        - instances
      properties:
        instances:
          type: number
        strategy:
          type: string
          enum:
            - resource-density
            - manual
            - high-availability
            - first-available
            - ephemeral
        stateful:
          type: object
          required:
            - instances
          properties:
            instances:
              type: array
              items:
                title: StatefulInstance
                type: object
                required:
                  - match
                properties:
                  match:
                    type: object
                    properties:
                      hostname:
                        type: string
                  first_start:
                    type: object
                    properties:
                      command:
                        type: object
                        properties:
                          path:
                            type: string
                          args:
                            type: string
                      environment_vars:
                        type: object
                        additionalProperties:
                          type: string
                  start:
                    type: object
                    properties:
                      command:
                        type: object
                        properties:
                          path:
                            type: string
                          args:
                            type: string
                      environment_vars:
                        type: object
                        additionalProperties:
                          type: string
        constraints:
          type: object
          properties:
            node:
              type: object
              required:
                - tags
              properties:
                tags:
                  type: object
                  properties:
                    any:
                      type: array
                      items:
                        type: string
                    all:
                      type: array
                      items:
                        type: string
            secrets:
              type: array
              items:
                type: string
            containers:
              type: array
              items:
                type: string
        shutdown:
          type: object
          required:
            - graceful_timeout
          properties:
            graceful_timeout:
              type: number
            signals:
              type: array
              items:
                type: string
                enum:
                  - SIGTERM
                  - SIGINT
                  - SIGUSR1
                  - SIGUSR2
                  - SIGHUP
        startup:
          type: object
          properties:
            delay:
              type: number
        restart:
          type: object
          required:
            - condition
            - delay
            - max_attempts
          properties:
            condition:
              type: string
              enum:
                - always
                - never
                - failure
            delay:
              type: number
            max_attempts:
              type: number
            notify:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    type: string
                web_hook:
                  type: string
        health_check:
          type: object
          required:
            - command
            - retries
            - interval
            - timeout
            - restart
          properties:
            command:
              type: string
            retries:
              type: number
            interval:
              type: number
            timeout:
              type: number
            restart:
              type: boolean
        telemetry:
          type: object
          required:
            - retention
            - interval
            - disable
          properties:
            retention:
              type: number
            interval:
              type: number
            disable:
              type: boolean
        update:
          type: object
          required:
            - parallelism
            - delay
          properties:
            parallelism:
              type: number
            delay:
              type: number
    StackContainerConfigScaling:
      title: StackContainerConfigScaling.yml
      type: object
      properties:
        auto:
          type: object
          required:
            - instances
          properties:
            instances:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: number
                max:
                  type: number
            rules:
              type: object
              required:
                - metric
                - threshold
              properties:
                metric:
                  type: string
                  enum:
                    - ram
                threshold:
                  type: string
    StackContainerConfigRuntime:
      title: StackContainerConfigRuntime
      type: object
      properties:
        workdir:
          type: string
        command:
          type: object
          required:
            - path
            - args
          properties:
            path:
              type: string
            args:
              type: string
        environment_vars:
          type: object
          additionalProperties:
            type: string
        namespaces:
          type: array
          items:
            type: string
            enum:
              - ipc
              - pid
              - uts
              - network
              - mount
              - user
        sysctl:
          type: object
          additionalProperties:
            type: string
        rlimits:
          type: object
          additionalProperties:
            type: object
            required:
              - hard
              - soft
            properties:
              hard:
                type: number
              soft:
                type: number
        seccomp:
          type: object
          required:
            - disable
          properties:
            disable:
              type: boolean
            rules:
              type: array
              items:
                type: object
                required:
                  - capabilities
                  - specs
                properties:
                  capabilities:
                    type: object
                    required:
                      - includes
                      - excludes
                    properties:
                      includes:
                        type: string
                      excludes:
                        type: string
                  specs:
                    type: object
                    required:
                      - names
                      - action
                      - args
                    properties:
                      names:
                        type: array
                        items:
                          type: string
                      action:
                        type: string
                      arrnoRet:
                        type: number
                      args:
                        type: array
                        items:
                          type: object
                          required:
                            - index
                            - value
                            - valueTwo
                            - op
                          properties:
                            index:
                              type: number
                            value:
                              type: number
                            valuetwo:
                              type: number
                            op:
                              type: string
        privileged:
          type: boolean
        capabilities:
          oneOf:
            - type: array
              items:
                type: string
                enum:
                  - CAP_CHOWN
                  - CAP_FSETID
                  - CAP_DAC_OVERRIDE
                  - CAP_FOWNER
                  - CAP_SETFCAP
                  - CAP_SETGID
                  - CAP_SETUID
                  - CAP_KILL
                  - CAP_MKNOD
                  - CAP_NET_BIND_SERVICE
                  - CAP_NET_RAW
                  - CAP_AUDIT_WRITE
                  - CAP_SYS_CHROOT
            - type: array
              items:
                type: string
                enum:
                  - CAP_SETPCAP
                  - CAP_DAC_READ_SEARCH
                  - CAP_NET_ADMIN
                  - CAP_NET_BROADCAST
                  - CAP_SYS_ADMIN
                  - CAP_SYS_MODULE
                  - CAP_SYS_NICE
                  - CAP_SYS_PACCT
                  - CAP_SYS_PTRACE
                  - CAP_SYS_RAWIO
                  - CAP_SYS_RESOURCE
                  - CAP_SYS_TTY_CONFIG
                  - CAP_SYSLOG
                  - CAP_AUDIT_CONTROL
                  - CAP_AUDIT_READ
                  - CAP_IPC_LOCK
                  - CAP_IPC_OWNER
                  - CAP_LINUX_IMMUTABLE
                  - CAP_MAC_ADMIN
                  - CAP_MAC_OVERRIDE
                  - CAP_BLOCK_SUSPEND
        rootfs:
          type: object
          required:
            - readonly
          properties:
            readonly:
              type: boolean
    StackContainerConfigResources:
      title: StackContainerConfigResources
      type: object
      required:
        - cpu
        - ram
      properties:
        cpu:
          type: object
          properties:
            shares:
              type: object
              required:
                - limit
                - reserve
              properties:
                limit:
                  type: number
                reserve:
                  type: number
            cpus:
              type: string
        ram:
          type: object
          properties:
            limit:
              type: string
            reserve:
              type: string
            swappiness:
              type: number
            kernel:
              type: string
            kernel_tcp:
              type: string
    StackContainerConfigIntegrations:
      title: StackContainerConfigIntegrations
      type: object
      properties:
        webhooks:
          type: object
          properties:
            events:
              type: object
              properties:
                deploy:
                  type: string
                start:
                  type: string
                stop:
                  type: string
            config:
              type: string
        lets_encrypt:
          type: object
          required:
            - enable
          properties:
            enable:
              type: boolean
            certificate_path:
              type: string
            chain_path:
              type: string
            key_path:
              type: string
            bundle_path:
              type: string
            additional_certs_path:
              type: string
        files:
          type: array
          items:
            type: object
            required:
              - source
              - destination
            properties:
              source:
                type: string
              destination:
                type: string
        backups:
          type: object
          required:
            - destination
            - backup
            - restore
          properties:
            destination:
              type: string
              enum:
                - backblaze-b2
            backup:
              type: object
              required:
                - command
                - timeout
                - cron_string
              properties:
                command:
                  nullable: true
                  type: number
                timeout:
                  nullable: true
                  type: number
                cron_string:
                  nullable: true
                  type: string
            restore:
              nullable: true
              type: object
              required:
                - command
                - timeout
              properties:
                command:
                  type: string
                timeout:
                  nullable: true
                  type: number
    StackContainerVolume:
      title: StackContainerVolume.yml
      type: object
      required:
        - read_only
        - destination
      properties:
        read_only:
          type: boolean
        local:
          type: object
          required:
            - max_size
            - storage_pool
          properties:
            max_size:
              type: string
            storage_pool:
              type: boolean
        destination:
          type: string
        remote_access:
          type: object
          required:
            - enable
            - password
          properties:
            enable:
              type: boolean
            ips:
              type: array
              items:
                type: object
                required:
                  - ip
                  - read_only
                  - password
                properties:
                  ip:
                    type: string
                  read_only:
                    type: boolean
                  password:
                    nullable: true
                    type: object
                    required:
                      - algorithm
                      - data
                    properties:
                      algorithm:
                        type: string
                        enum:
                          - raw
                          - sha512
                          - md5
                      data:
                        type: string
            web_hook:
              type: string
            password:
              type: object
              required:
                - algorithm
                - data
              properties:
                algorithm:
                  type: string
                  enum:
                    - raw
                    - sha512
                    - md5
                data:
                  type: string
    StackContainer:
      title: StackContainer
      type: object
      description: A list of records defining the stacks containers.
      additionalProperties:
        type: object
        description: Stacks container object
        required:
          - name
          - image
          - stateful
        properties:
          name:
            type: string
          image:
            type: object
            required:
              - name
              - origin
            properties:
              name:
                type: string
              origin:
                $ref: '#/components/schemas/ImageSourceOrigin'
              stateful:
                type: boolean
              config:
                type: object
                required:
                  - network
                  - deploy
                properties:
                  network:
                    $ref: '#/components/schemas/StackContainerConfigNetwork'
                  deploy:
                    $ref: '#/components/schemas/StackContainerConfigDeploy'
                  scaling:
                    $ref: '#/components/schemas/StackContainerConfigScaling'
                  runtime:
                    $ref: '#/components/schemas/StackContainerConfigRuntime'
                  resources:
                    $ref: '#/components/schemas/StackContainerConfigResources'
                  integrations:
                    $ref: '#/components/schemas/StackContainerConfigIntegrations'
              role:
                type: string
                enum:
                  - orchestrator
              volumes:
                type: array
                items:
                  $ref: '#/components/schemas/StackContainerVolume'
    StackSpec:
      title: StackSpec
      type: object
      description: A stack spec resource.
      required:
        - type
        - details
      properties:
        type:
          type: string
          enum:
            - raw
        details:
          type: object
          required:
            - version
            - containers
          properties:
            version:
              type: string
              description: A string defining the version of the stack spec.
            about:
              type: object
              description: Information about the stack.
              required:
                - description
                - version
              properties:
                version:
                  type: string
                  description: Internal version information set by the user.
                description:
                  type: string
                  description: Information describing the stack.
            containers:
              nullable: true
              type: array
              items:
                $ref: '#/components/schemas/StackContainer'
            annotations:
              type: object
              description: Additional meta info about the stack.
              additionalProperties:
                type: string
    StackGitCommit:
      title: StackGitCommit
      type: object
      description: Information about the git commit this stack build was created from.
      required:
        - hash
        - message
        - time
        - author
      properties:
        hash:
          type: string
          description: The commit hash for the given stack build.
        message:
          type: string
          description: The commit message for the given stack build hash.
        time:
          description: The time the commit was made.
          $ref: '#/components/schemas/DateTime'
        author:
          type: object
          description: Inforamtion about the author of the commit.
          required:
            - name
            - email
          properties:
            name:
              type: string
              description: The commit authors name.
            email:
              type: string
              description: The commit authors email address.
    StackBuildState:
      title: StackBuildState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the stack build.
              type: string
              enum:
                - new
                - importing
                - building
                - verifying
                - saving
                - live
                - deploying
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    StackBuildMeta:
      title: StackBuildMeta
      type: object
      description: A list of meta fields that can be applied to a stack build.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
    StackBuild:
      title: StackBuild
      type: object
      description: A stack build resource.
      required:
        - id
        - hub_id
        - stack_id
        - spec
        - about
        - instructions
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        stack_id:
          type: string
          description: An identifier for the stack related to this build.
        spec:
          $ref: '#/components/schemas/StackSpec'
        about:
          type: object
          description: Information about the stack build.
          required:
            - version
            - description
          properties:
            version:
              type: string
              description: Information about the version of the stack.
            description:
              type: string
              description: Information describing the stack
            git_commit:
              $ref: '#/components/schemas/StackGitCommit'
        instructions:
          type: object
          description: Git information on where to pull stack resources from.
          properties:
            git:
              type: object
              description: Git information specifics.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of information the user is passing.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The actual value to be passed.
        events:
          title: StackBuildEvents
          type: object
          description: A collection of timestamps for each event in the stack build's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the stack build was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack build was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack build was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/StackBuildState'
        meta:
          $ref: '#/components/schemas/StackBuildMeta'
    StackBuildIncludes:
      title: StackBuildInclude
      description: A resource thats associated with a stack build.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StackBuild'
    RepoSpec:
      title: StackRepoSourceType
      type: object
      description: A repo source type for a stack.
      required:
        - type
        - details
      properties:
        type:
          type: string
          enum:
            - git-repo
        details:
          required:
            - url
          properties:
            url:
              type: string
              description: The URL of the repository.
            branch:
              type: string
              description: An optional branch arguement.  Default value is `master`.
            auth:
              type: object
              description: Authentication information for the repository.
              discriminator:
                propertyName: type
              anyOf:
                - $ref: '#/components/schemas/CredentialsHTTP'
                - $ref: '#/components/schemas/CredentialsSSH'
            ref:
              type: object
              description: Repository reference information.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of reference being used.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The value for the given reference type.
    StackSource:
      title: StackSource
      type: object
      description: A source for a stack to be created from.
      discriminator:
        propertyName: type
      anyOf:
        - $ref: '#/components/schemas/RepoSpec'
        - $ref: '#/components/schemas/StackSpec'
    StackState:
      title: StackState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the stack.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    StackMeta:
      title: StackMeta
      type: object
      description: A list of meta fields that can be applied to this stack.
      properties:
        containers_count:
          $ref: '#/components/schemas/StateCountSummary'
        builds_count:
          $ref: '#/components/schemas/StateCountSummary'
    Stack:
      title: Stack
      type: object
      description: Stacks are a way to orchestrate multiple containers atomically and automatically.
      required:
        - id
        - name
        - hub_id
        - creator
        - source
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A user defined name for the stack resource.
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/UserScope'
        source:
          $ref: '#/components/schemas/StackSource'
        state:
          $ref: '#/components/schemas/StackState'
        events:
          title: StackEvents
          type: object
          description: A collection of timestamps for each event in the Stacks lifetime.
          required:
            - created
            - updated
            - deleted
            - last_build
          properties:
            created:
              description: The timestamp of when the stack was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack was deleted.
              $ref: '#/components/schemas/DateTime'
            last_build:
              description: The timestamp for the last build of the stack.
              $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/StackMeta'
    StackIncludes:
      title: StackIncludes
      description: A resource associated with a stack.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Stack'
    EnvironmentIncludes:
      title: EnvironmentInclude
      description: An identity that is associated with an environment.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Environment'
    ContainerIncludes:
      title: ContainerIncludes
      description: All includable resources linkable to the given container.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        images:
          $ref: '#/components/schemas/ImagesIncludes'
        stack_builds:
          $ref: '#/components/schemas/StackBuildIncludes'
        stacks:
          $ref: '#/components/schemas/StackIncludes'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    ServerProvider:
      title: ServerProvider
      type: object
      description: A resource regarding the provider a given server is deployed from.
      required:
        - identifier
        - model
        - location
        - server
      properties:
        identifier:
          type: string
          description: An identifier for the provider this server is deployed from.
        model:
          type: string
          description: The model of the server that is deployed.
        location:
          type: string
          description: A location where the server is deployed.
        server:
          type: string
          description: A provider specific identifier for the server.
        init_ips:
          description: The IP's assigned to this server during provisioning.
          type: array
          items:
            type: string
        mac_addr:
          type: string
          description: The mac address for the server.
    ServerFeatures:
      title: ServerFeatures
      type: object
      description: A set of features a given server can have and their information.
      required:
        - sftp
        - base_volume_ gb
      properties:
        sftp:
          type: boolean
          description: A boolean where true means the server accepts incoming SFTP connections through the remote volume integration.
        base_volume_gb:
          type: integer
          description: The size of the base volume (where Cycle stores container images on this server).
    ServerConstraints:
      title: ServerConstraints
      type: object
      description: Constraints to apply to the server.
      required:
        - tags
        - allow
      properties:
        tags:
          description: A list of server tags to put on the given server.
          type: array
          items:
            type: string
        allow:
          type: object
          description: Settings for the server, things that are or are not allowed.
          required:
            - pool
            - services
            - overcommit
          properties:
            pool:
              type: boolean
              description: A boolean where true means - allow containers with no tags specified to be deployed to this server.
            services:
              type: boolean
              description: A boolean where true means - allow service containers to be deployed to this container.
            overcommit:
              type: boolean
              description: A boolean where true means - allow twice the normal amount of CPU shares to be allocated to containers deployed to this server.
    ServerState:
      title: ServerState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the server.
              type: string
              enum:
                - new
                - provisioning
                - configuring
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    NodeState:
      title: NodeState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the node.
              type: string
              enum:
                - new
                - offline
                - authorizing
                - online
                - decommissioned
        - $ref: '#/components/schemas/State'
    Network:
      title: ServerStatsNetwork
      type: object
      description: Statistics about the networks on a given server.
      required:
        - external_ipv4
        - external_ipv6
      properties:
        interfaces:
          type: object
          description: Network interfaces for a given server.
          additionalProperties:
            type: object
            description: Network interface.
            properties:
              interface:
                type: string
                description: The interface name.
              flags:
                type: string
                description: Flags for the given interface.
              mtu:
                type: integer
                description: The maximum transmission unit for the interface.
              mac_addr:
                type: string
                description: The mac address for the interface.
              addrs:
                description: An array of IP addresses associated with the interface.
                type: array
                items:
                  type: string
        external_ipv4:
          type: string
          description: The public IPv4 address used to connect to this server.
        external_ipv6:
          type: string
          description: The public IPv6 address used to connect to this server.
    Uptime:
      title: ServerStatsUptime
      type: object
      description: Statistics describing the uptime of a given server.
      properties:
        seconds:
          type: number
          description: The amount in seconds the server has been up (resets on restart).
        cpu_idle:
          type: number
          description: CPU idle time.
    CPU:
      title: ServerStatsCPU
      type: object
      description: Statistics about the CPU resources on a server.
      properties:
        cores:
          type: integer
          description: The number of CPU's or vCPU's for a given server.
        processors:
          description: An array of processor information objects.
          type: array
          items:
            type: object
            description: Processor information.
            properties:
              model:
                type: string
                description: The model of the processor.
              speed:
                type: integer
                description: The speed of the processor.
    Load:
      title: ServerStatsLoad
      type: object
      description: Statistics about the current load on the server.
      required:
        - avg1m
        - avg5m
        - avg15m
      properties:
        avg1m:
          type: integer
          description: The 1 minute load average.
        avg5m:
          type: integer
          description: The 5 minute load average.
        avg15m:
          type: integer
          description: the 15 minute load average.
    RAM:
      title: ServerStatsRAM
      type: object
      description: Statistics about the RAM on a given server.
      required:
        - available
        - free
        - total
      properties:
        available:
          type: integer
          description: The available RAM on the server.
        free:
          type: integer
          description: The free RAM on the server.
        total:
          type: integer
          description: The total RAM on the server.
    Storage:
      title: ServerStatsStorage
      type: object
      description: Statistics about storage for a given server.
      required:
        - volume_groups
        - mounts
      properties:
        volume_groups:
          description: An array of volume group objects.
          type: object
          additionalProperties:
            type: object
            description: Volume group
            required:
              - name
              - size
              - volumes
            properties:
              name:
                type: string
                description: A name for the volume group.
              size:
                type: integer
                description: A number representing the aggregate group volume size in megabytes.
              volumes:
                description: The actual volumes.
                type: object
                additionalProperties:
                  type: object
                  required:
                    - name
                    - size
                    - data_percent
                    - meta_percent
                    - pool
                  properties:
                    name:
                      type: string
                      description: The name of the volume.
                    size:
                      type: integer
                      description: The size in megabytes of the volume.
                    data_percent:
                      type: integer
                      description: The percent of the volumes size being used by data.
                    meta_percent:
                      type: integer
                      description: The percent of the volumes size being used by meta data.
                    pool:
                      type: string
                      description: The name of the volume pool this volume is associated with.
        mounts:
          type: object
          description: Records that show information about mounted filesystems where the key is the path to the mount.
          additionalProperties:
            title: MountedFS
            type: object
            description: Mounted filesystem information.
            required:
              - type
              - total
              - free
              - used
            properties:
              device:
                type: string
                description: The device assocaited with the mount.
              type:
                type: string
                description: The type of filesystem in use by the mount.
              mountpoint:
                type: string
                description: The path the mount is associated with.
              total:
                type: integer
                description: The total amount of storage in KB available at this mount.
              free:
                type: integer
                description: The amount of uninitialized storage in KB.
              used:
                type: integer
                description: The amount of storage being used in KB.
    OS:
      title: ServerStatsOS
      type: object
      description: Statistics about the operating system installed on the server (CycleOS).
      properties:
        release:
          type: string
          description: The currently installed release version of the OS.
        kernel:
          type: string
          description: The currently installed kernel version.
        hostname:
          type: string
          description: The hostname as set by the given server's OS.
    Versions:
      title: ServerStatsVersions
      type: object
      description: Information about the versions of Cycle services on a given server.
      required:
        - services
      properties:
        services:
          description: A list of records about Cycle services.
          type: object
          additionalProperties:
            type: string
            enum:
              - factory
              - compute
              - compute-spawner
              - compute-proxy
              - public-api
              - admin-api
              - admin-portal
              - oauth
              - portal
              - console
              - manager
              - dns
              - agent
              - agent-spawner
              - nexus
    Stats:
      title: NodeMetaStatsStats
      type: object
      description: Statistics that pertain to a specific node.
      required:
        - network
        - uptime
        - cpu
        - load
        - ram
        - storage
        - os
        - versions
      properties:
        network:
          $ref: '#/components/schemas/Network'
        uptime:
          $ref: '#/components/schemas/Uptime'
        cpu:
          $ref: '#/components/schemas/CPU'
        load:
          $ref: '#/components/schemas/Load'
        ram:
          $ref: '#/components/schemas/RAM'
        storage:
          $ref: '#/components/schemas/Storage'
        os:
          $ref: '#/components/schemas/OS'
        versions:
          $ref: '#/components/schemas/Versions'
    ServerMeta:
      title: ServerMeta
      type: object
      description: A list of meta fields that can be applied to a server.
      properties:
        node:
          type: object
          description: Infrormation about the status of the server.
          required:
            - last_checkin
            - drivers
            - state
            - stats
            - healthy
            - online
          properties:
            last_checkin:
              description: The last time this server checked in with the platform.
              $ref: '#/components/schemas/DateTime'
            drivers:
              description: An array a drivers associated with the given server.
              type: array
              items:
                type: string
            state:
              $ref: '#/components/schemas/NodeState'
            stats:
              $ref: '#/components/schemas/Stats'
            healthy:
              type: boolean
              description: A boolean where true means the platform is reporting the server as healthy.
            online:
              type: boolean
              description: A boolean where true means the server is online and reachable by the platform.
        instances_count:
          $ref: '#/components/schemas/StateCountSummary'
    Server:
      title: Server
      type: object
      description: The server resource, referring to servers that have been deployed to a Cycle hub.
      required:
        - id
        - hub_id
        - location_id
        - model_id
        - node_id
        - hostname
        - creator
        - provider
        - cluster
        - features
        - constraints
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        location_id:
          type: string
          description: An identifier for the location this server is deployed to.
        model_id:
          type: string
          description: An identifier for the model of server that is deployed.
        node_id:
          type: string
          description: An identifier for the node.
        hostname:
          type: string
          description: The server hostname.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        provider:
          $ref: '#/components/schemas/ServerProvider'
        cluster:
          type: string
          description: The cluster the given server is deployed to.
        features:
          $ref: '#/components/schemas/ServerFeatures'
        constraints:
          $ref: '#/components/schemas/ServerConstraints'
        state:
          $ref: '#/components/schemas/ServerState'
        events:
          title: ServerEvents
          type: object
          description: A collection of timestamps for each event in the server's lifetime.
          required:
            - created
            - updated
            - deleted
            - provisioning
          properties:
            created:
              description: The timestamp of when the server was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the server was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the server was deleted.
              $ref: '#/components/schemas/DateTime'
            provisioning:
              type: object
              description: Information about the provisioning of the server.
              required:
                - started
                - completed
              properties:
                started:
                  description: A timestamp of when the server started provisioning.
                  $ref: '#/components/schemas/DateTime'
                completed:
                  description: A timestamp of when the server completed provisioning.
                  $ref: '#/components/schemas/DateTime'
        meta:
          $ref: '#/components/schemas/ServerMeta'
    ServersIncludes:
      title: ServerIncludes
      description: A resource thats associated with a server.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Server'
    Geographic:
      title: LocationGeographic
      type: object
      description: Geographic information about a provider location.
      required:
        - latitude
        - longitude
        - city
        - state
        - country
        - region
      properties:
        latitude:
          type: integer
          description: The latitude of the given provider datacenter.
        longitude:
          type: integer
          description: The longitude of the given provider datacenter.
        city:
          type: string
          description: The city the datacenter resides in.
        state:
          type: string
          description: The state the datacenter resides in.
        country:
          type: string
          description: The country the datacenter resides in.
        region:
          type: string
          description: The region the datacenter resides in.
    LocationProvider:
      title: LocationProvider
      type: object
      description: Information about the locaiton of the provider.
      required:
        - identifier
        - location
        - code
      properties:
        identifier:
          type: string
          description: An identifier for the given provider
        location:
          type: string
          description: A location name returned from the provider.
        code:
          type: string
          description: A location code returned from the provider.
    Location:
      title: InfrastructureProviderLocation
      type: object
      description: Location information for a given provider.
      required:
        - id
        - name
        - geographic
        - provider
        - compatible
        - features
        - abbreviation
        - annotations
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the location.
        geographic:
          $ref: '#/components/schemas/Geographic'
          nullable: true
        provider:
          $ref: '#/components/schemas/LocationProvider'
        compatible:
          type: boolean
          description: A boolean where true means the locaiton is supported by the platform.
        features:
          type: object
          description: Additional information about available and supported features of the provider location.
          required:
            - available
            - supported
          properties:
            available:
              description: Available features for the provider location.
              type: array
              items:
                type: string
            supported:
              description: Supported features for the provider location.
              type: array
              items:
                type: string
        abbreviation:
          type: string
          description: An abbreviation for the given provider locaiton.
        annotations:
          type: object
          description: Additional information about the given provider locaiton.
          additionalProperties:
            type: string
    LocationsIncludes:
      title: LocationIncludes
      description: A resource thats associated with a provider location.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Location'
    IALAuth:
      title: IALAuth
      type: object
      description: Infrastructure abstraction layer authentication information.
      properties:
        namespace:
          type: string
          description: A namespace for the IAL entry.
        region:
          type: string
          description: Information about the region being used.
        api_key:
          type: string
          description: The API key used to make a request against the given provider.
        secret:
          type: string
          description: A secret.
        config:
          type: string
          description: A config string.
        cycle:
          type: object
          description: Information about the Cycle properties making the request.
          required:
            - hub_name
            - hub_id
          properties:
            hub_name:
              type: string
              description: The name of the hub.
            hub_id:
              $ref: '#/components/schemas/HubID'
    NativeIntegration:
      title: NativeIntegration
      type: object
      description: Information about a natively supported infrastructure provider.
      required:
        - identifier
        - auth
      properties:
        identifier:
          $ref: '#/components/schemas/NativeProviderIdentifier'
        auth:
          $ref: '#/components/schemas/IALAuth'
    AbstractionIntegration:
      title: AbstractionIntegration
      description: Information about an infrastructure provider abstraction.
      type: object
      required:
        - name
        - base_url
      properties:
        name:
          type: string
          description: A name for a given infrastructure abstraction.
        base_url:
          type: string
          description: The base url, where the abstraction endpoints are located.
        auth:
          $ref: '#/components/schemas/IALAuth'
    Integration:
      title: InfrastructureProviderIntegration
      type: object
      description: Information about a provider and how it integrates with the platform.
      properties:
        native:
          $ref: '#/components/schemas/NativeIntegration'
        abstraction:
          $ref: '#/components/schemas/AbstractionIntegration'
    ProviderState:
      title: ProviderState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the provider.
              type: string
              enum:
                - new
                - verifying
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ProviderMeta:
      title: ProviderMeta
      type: object
      description: A list of meta fields that can be applied to a provider.
      properties:
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    Provider:
      title: Provider
      type: object
      description: A provider resource.
      required:
        - id
        - hub_id
        - integration
        - events
        - creator
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        integration:
          $ref: '#/components/schemas/Integration'
        name:
          type: string
          description: A string describing the name of a provider
        events:
          title: ProviderEvents
          type: object
          description: A collection of timestamps for each event in the provider's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_provision
          properties:
            created:
              description: The timestamp of when the provider was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the provider was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the provider was deleted.
              $ref: '#/components/schemas/DateTime'
            last_provision:
              description: The timestamp of when the provider was last used to provision a server.
              $ref: '#/components/schemas/DateTime'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        state:
          $ref: '#/components/schemas/ProviderState'
        meta:
          $ref: '#/components/schemas/ProviderMeta'
    ProvidersIncludes:
      title: ProvidersIncludes
      description: A resource thats associated with a provider.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Provider'
    ContainersIncludes:
      title: ContainersIncludes
      type: object
      description: A resource thats associated with a contianer.
      additionalProperties:
        $ref: '#/components/schemas/Container'
    InstanceIncludes:
      title: InstanceIncludes
      description: A resource associated with an instance.
      type: object
      required:
        - creator
        - servers
        - locations
        - providers
        - containers
        - environments
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        servers:
          $ref: '#/components/schemas/ServersIncludes'
        locations:
          $ref: '#/components/schemas/LocationsIncludes'
        providers:
          $ref: '#/components/schemas/ProvidersIncludes'
        containers:
          $ref: '#/components/schemas/ContainersIncludes'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    ContainerAction:
      title: ContainerActionTask
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - start
            - stop
          description: The name of the action to perform.
    ReconfigureContainer:
      title: ReconfigureContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reconfigure
          description: The action to take.
        contents:
          $ref: '#/components/schemas/Config'
    ReconfigureVolumes:
      title: ReconfigureVolumeTask
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reconfigure.volumes
          description: The action to take.
        contents:
          description: An array of volume objects to be reconfigured.
          type: array
          items:
            $ref: '#/components/schemas/VolumeSummary'
    Reimage:
      title: ReimageContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - reimage
          description: The action to take.
        contents:
          type: object
          description: Additional information needed to complete the job.
          required:
            - image_id
          properties:
            image_id:
              type: string
              description: The ID of the image to use when reimaging.
            allow_incompatible:
              type: boolean
              description: A boolean where true signifies the image being used to reimage does not have to have compatibility with the image being replaced.
            overwrite_runtime_config:
              type: boolean
              description: A boolean where true signifies the user wishes to overwrite the current runtime configuration for the given container during the reimage process.
    Scale:
      title: ScaleContainer
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - scale
        contents:
          type: object
          description: Additional information needed to complete the job.
          required:
            - instances
          properties:
            instances:
              type: integer
              description: The number of desired instances to scale to.
    ProviderSummary:
      title: ProviderSummary
      description: A summary of the provider a given resource is deployed to.
      type: object
      required:
        - identifier
        - location
      properties:
        identifier:
          type: string
          description: An identifier for the provider. Custom IAL providers will be listed as `abstraction-<ID>` where the ID is a MongoDB ID.
          enum:
            - equinix-metal
            - vultr
            - aws
            - abstraction-<MongoID>
        location:
          type: string
          description: A location identifier associated with the provider.
    MigrationInstance:
      title: MigrationInstance
      type: object
      description: Information about an instances migration.
      required:
        - instance_id
        - server_id
      properties:
        instance_id:
          type: string
          description: The ID of the instance.
        server_id:
          type: string
          description: The ID of the server in the context its represented.
    InstanceState:
      title: InstanceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the instance.
              type: string
              enum:
                - new
                - starting
                - reimaging
                - migrating
                - running
                - stopping
                - stopped
                - failed
                - deleting
                - deleted
            health:
              type: object
              description: information about the health of the instance.
              required:
                - healthy
                - updated
              properties:
                healthy:
                  type: boolean
                  description: A boolean where true represents the instance being healthy.
                updated:
                  description: A timestamp of the last time the instance health was updated.
                  $ref: '#/components/schemas/DateTime'
        - $ref: '#/components/schemas/State'
    Instance:
      title: Instance
      type: object
      description: A container instance resource.
      required:
        - id
        - hub_id
        - container_id
        - location_id
        - creator
        - environment
        - stateful
        - provider
        - server_id
        - ready_state
        - hostname
        - migration
        - service
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: A container identifier for the container that is associated with this instance.
        location_id:
          type: string
          description: A location identifier that's associated with the server this instance is deployed to.
        environment:
          type: object
          description: Details about the environment network this instance is a member of.
          required:
            - id
            - network_subnet
            - subnet
            - ipv6
            - legacy
            - mac_addr
            - vxlan_tag
          properties:
            id:
              $ref: '#/components/schemas/ID'
            network_subnet:
              type: string
            subnet:
              type: string
            ipv6:
              nullable: true
              $ref: '#/components/schemas/IPNet'
            legacy:
              nullable: true
              type: object
              required:
                - host
                - subnet
                - ipv4
              properties:
                host:
                  type: integer
                subnet:
                  type: integer
                ipv4:
                  nullable: true
                  $ref: '#/components/schemas/IPNet'
            mac_addr:
              type: string
            vxlan_tag:
              type: integer
        stateful:
          type: object
          description: Additional information about the instance relating to its setting as being stateful.
          nullable: true
          required:
            - id
            - base_hostname
          properties:
            id:
              $ref: '#/components/schemas/ID'
            base_hostname:
              type: string
              description: The base hostname for the given instance.
        provider:
          $ref: '#/components/schemas/ProviderSummary'
        server_id:
          type: string
          description: An identifier for the server this instance is deployed to.
        ready_state:
          type: string
          description: The state as it relates to the following. * `active` - instance can be started or stopped. * `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run.
          enum:
            - active
            - purge
            - hibernate
        hostname:
          type: string
          description: The hostname of the instance.
        migration:
          type: object
          description: If this instance is scheduled to be migrated or has been migrated in the past, there will be information populating this field with the server that the instance came from or the server that the instance was moved to and the instance ID.
          nullable: true
          required:
            - key
            - copy_volumes
          properties:
            to:
              $ref: '#/components/schemas/MigrationInstance'
            from:
              $ref: '#/components/schemas/MigrationInstance'
            started:
              description: A timestamp of when the migration was started.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: A timestamp of when the migration was completed.
              $ref: '#/components/schemas/DateTime'
            key:
              type: string
              description: A key used by the platform to verify the migration.
            copy_volumes:
              type: boolean
              description: A boolean where true represents the volumes for the instance should be copied to the new server as well.
        purge_time:
          description: If the instance was purged, the timestamp of when that happened.
          $ref: '#/components/schemas/DateTime'
        service:
          type: string
          description: If the instance is an instance of a service container that will be denoted here.
          nullable: true
          enum:
            - discovery
            - vpn
            - loadbalancer
        state:
          $ref: '#/components/schemas/InstanceState'
        events:
          title: InstanceEvents
          description: A collection of timestamps for each event in the instnaces lifetime.
          required:
            - created
            - updated
            - deleted
            - first_started
          properties:
            created:
              description: The timestamp of when the instance was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the instance was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the instance was deleted.
              $ref: '#/components/schemas/DateTime'
            first_started:
              description: The timestamp of when the instance was started.
              $ref: '#/components/schemas/DateTime'
    SSHToken:
      title: SSHToken
      type: object
      description: An SSH token resource.
      required:
        - id
        - instance_id
        - container_id
        - hub_id
        - creator
        - events
        - valid
      properties:
        id:
          $ref: '#/components/schemas/ID'
        instance_id:
          type: string
          description: The ID of the instance being connected to.
        container_id:
          type: string
          description: The ID of the container from which the instance was created.
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        events:
          title: SSHTokenEvents
          type: object
          description: A collection of timestamps for each event in the SSH token's lifetime.
          required:
            - created
            - used
            - expires
          properties:
            created:
              description: The timestamp of when the SSH token was created.
              $ref: '#/components/schemas/DateTime'
            used:
              description: The timestamp of when the SSH token was used.
              $ref: '#/components/schemas/DateTime'
            expires:
              description: The timestamp of when the SSH token expires.
              $ref: '#/components/schemas/DateTime'
        valid:
          type: boolean
          description: A boolean where true represents the token as being a valid token to be used for connection.
    SSHResponse:
      title: SSHConnectionResponse
      type: object
      description: SSH connection information for a given container instance.
      required:
        - token
        - secret
        - address
      properties:
        token:
          $ref: '#/components/schemas/SSHToken'
        secret:
          type: string
          description: The SSH connection response secret.
        address:
          type: string
          description: The SSH connection response address.
    RevertMigration:
      title: RevertMigrationAction
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum:
            - migrate_revert
          description: The name of the action to perform.
    Migrate:
      title: MigrateAction
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          enum:
            - migrate
          description: The name of the action to perform.
        contents:
          type: object
          required:
            - destination_server_id
          properties:
            destination_server_id:
              type: string
              description: The ID of the server being migrated to.
            stateful:
              type: object
              description: Information about additonal configuration settings used when migrating a stateful instance.
              required:
                - copy_volumes
              properties:
                copy_volumes:
                  type: boolean
                  description: A boolean where true represents the desire to copy the contents of the volume for a given stateful instance with the migration.
    DeployedVolume:
      title: DeployedVolume
      type: object
      description: A deployed volume resource.
      required:
        - server_id
        - container_id
        - container_volume_id
        - instance_id
        - hash
        - path
        - storage
        - last_updated
      properties:
        server_id:
          type: string
          description: The ID of the server the instance is deployed to.
        container_id:
          type: string
          description: The ID of the container the instance was created from.
        container_volume_id:
          type: string
          description: The ID for the volume withing the context of the container.
        instance_id:
          type: string
          description: The ID for the container instance this volume is attached to.
        hash:
          type: string
          description: A hash used as part of the identification mechanisms for the platform and API.
        path:
          type: string
          description: The path where the volume is mounted on the instnace filesystem.
        storage:
          type: object
          description: Storage information for the volume.
          required:
            - used
            - total
          properties:
            used:
              type: integer
              description: The amount of volume storage used, in MB's
            total:
              type: integer
              description: The total amount of volume storage available, in MB's.
    SFTP:
      title: InstanceVolumeSFTP
      type: object
      description: Information about connecting to a instance volume over SFTP.
      required:
        - host
        - port
        - username
        - password
      properties:
        host:
          type: string
          description: The hostname for connecting to the volume over SFTP.
        port:
          type: number
          description: The port number to use when connecting.
        username:
          type: string
          description: The username to use when connecting.
        password:
          type: object
          description: Password configuration settings for the remote access of the container volume.
          required:
            - algorithm
            - data
          properties:
            algorithm:
              type: string
              description: The hashing algorithm used to has the password.
              enum:
                - raw
                - sha512
                - md5
            data:
              type: string
              description: The raw or hashed password.
    InstanceVolume:
      title: InstanceVolume
      type: object
      description: A container instance volume resource.
      required:
        - id
        - config
        - deployed
        - sftp
      properties:
        id:
          $ref: '#/components/schemas/ID'
        config:
          $ref: '#/components/schemas/Volumes'
        deployed:
          $ref: '#/components/schemas/DeployedVolume'
        sftp:
          $ref: '#/components/schemas/SFTP'
    TelemetryReportRequest:
      title: InstanceTelemetryReportRequest
      type: object
      description: A summary of report requests and when they occured.
      required:
        - instance_id
        - start
        - end
      properties:
        instance_id:
          type: string
          description: The ID of the instance this telemetry reporting pertains to.
        start:
          description: A timestamp of when the snapshot began.
          $ref: '#/components/schemas/DateTime'
        end:
          description: A timestamp of when the snapshot ended.
          $ref: '#/components/schemas/DateTime'
    CPUSnapshot:
      title: InstanceTelemetryCPUSnapshot
      type: object
      description: A telemetry snapshot pertaining to CPU usage.
      required:
        - usage
        - throttling
      properties:
        usage:
          type: object
          description: Usage statistics.
          required:
            - total
            - per_core
            - kernel
            - user
          properties:
            total:
              type: integer
              description: Total amount of VPU time since last restart.
            per_core:
              description: An array showing CPU core specific usage in nanoseconds since the last restart.
              type: array
              items:
                type: integer
            kernel:
              type: integer
              description: The amount of time in nanoseconds used by the kernel since last restart.
            user:
              type: number
              description: The amount of time in nanoseconds taken up for user processes.
        throttling:
          type: object
          description: Throttling statistics.
          properties:
            periods:
              type: integer
              description: The amount of periods that have passed since the last restart.
            throttled_periods:
              type: integer
              description: How many times the instance has been throttled for using all its alloted CPU during a period.
            throttled_time:
              type: integer
              description: The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
    MemoryData:
      title: MemoryData
      type: object
      properties:
        usage:
          type: number
          description: The number in bytes of memory being used by the instance at the time of the snapshot.
        max_usage:
          type: number
          description: The highest amoun tof memory usage since the last restart.
        fail_count:
          type: number
          description: The number of times the memory liimit was exceeded for the instance.
        limit:
          type: number
          description: The maximum number of bytes of memory this instance has acess to.
    MemorySnapshot:
      title: InstanceTelemetryMemorySnapshot
      type: object
      description: A snapshot of memory usage statistics.
      properties:
        cache:
          type: number
          description: The number of bytes of page cache memory being used by this instance.
        usage:
          description: The memory usage data.
          $ref: '#/components/schemas/MemoryData'
        swap_usage:
          description: Memory swap usage data.
          $ref: '#/components/schemas/MemoryData'
        kernel_usage:
          description: Kernal memory usage.
          $ref: '#/components/schemas/MemoryData'
        kernel_tcp_usage:
          description: Kernel TCP buffer usage.
          $ref: '#/components/schemas/MemoryData'
    ProcessesSnapshot:
      title: InstanceTelemetryProcessesSnapshot
      type: object
      description: Process information for a given snapshot.
      properties:
        current:
          type: number
          description: The current number of running processes in the instance.
        limit:
          type: number
          description: The maximum number of running processes for the instance.
    HugeTLB:
      title: HugeTLB
      type: object
      description: HugeTLB data.
      properties:
        usage:
          type: integer
          description: The number of bytes being consumed by huge pages of all sizes.
        max:
          type: integer
          description: The maximum number of bytes allowed to be used for huge pages for this instance.
        fail_count:
          type: integer
          description: The number of times the hugeTLB memory limit has been exceeded by this instance.
    ResourceSnapshot:
      title: InstanceTelemetryResourceSnapshot
      description: A resource snapshot that shows instance telemetry.
      type: object
      required:
        - time
        - cpu
        - memory
        - processes
      properties:
        time:
          description: A timestamp of the time this snapshot was captured at.
          $ref: '#/components/schemas/DateTime'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: An ID for an associated container.
        instance_id:
          type: string
          description: An ID for an associated instance.
        environment_id:
          type: string
          description: An ID for an associated environment.
        cpu:
          $ref: '#/components/schemas/CPUSnapshot'
        memory:
          $ref: '#/components/schemas/MemorySnapshot'
        processes:
          $ref: '#/components/schemas/ProcessesSnapshot'
        hugetlb:
          $ref: '#/components/schemas/HugeTLB'
    InstanceTelemetryReport:
      title: InstanceTelemetryReport
      type: object
      description: An instance telemetry report.
      required:
        - request
        - snapshots
      properties:
        request:
          $ref: '#/components/schemas/TelemetryReportRequest'
        snapshots:
          description: An array of telemetry snapshots.
          type: array
          items:
            $ref: '#/components/schemas/ResourceSnapshot'
    ServersList:
      title: ServerInstances
      type: object
      description: Information about the instances on a server.
      required:
        - id
        - instances
        - hostname
      properties:
        id:
          $ref: '#/components/schemas/ID'
        instances:
          type: object
          description: A summary of resources by state
          required:
            - state
            - total
            - available
          properties:
            state:
              title: CountsByState
              type: object
              description: A count of this resource, grouped by state.
              additionalProperties:
                type: integer
            total:
              type: integer
              description: The total number of this resource
            available:
              type: integer
              description: The total number of this resource available, less any deleted ones.
          example:
            state:
              new: 0
              starting: 0
              reimaging: 1
              migrating: 1
              running: 5
              stopping: 0
              failed: 0
              deleting: 0
              deleted: 0
            total: 7
            available: 5
        hostname:
          type: string
          description: The server hostname.
    CPUSpec:
      title: CPUServerSpec
      type: object
      description: Information about the CPU for a given server.
      required:
        - count
        - type
      properties:
        count:
          type: integer
          description: The number of CPUs.
        cores:
          type: integer
          description: The number of cores.
        threads:
          type: integer
          description: The number of threads.
        type:
          type: string
          description: The type of the CPU.
        shared:
          type: boolean
          description: A boolean where true represents the CPU is shared.
        extra:
          type: object
          description: Extra information about the CPU if there is any.
          additionalProperties:
            type: string
    GPUSpec:
      title: GPUServerSpec
      type: object
      description: Information about a given servers GPU resources.
      required:
        - count
        - type
      properties:
        count:
          type: integer
          description: The number of GPUs.
        cores:
          type: integer
          description: The number of cores.
        vram_gb:
          type: integer
          description: The amount of virtaul RAM for the GPU.
        type:
          type: string
          description: The type of the GPU.
        shared:
          type: boolean
          description: A boolean where true represents the GPU is shared.
        extra:
          type: object
          description: Extra information about the GPU if there is any.
          additionalProperties:
            type: string
    MemorySpec:
      title: MemoryServerSpec
      type: object
      description: Information about the memory resources of a given server.
      required:
        - size_gb
        - type
        - extra
      properties:
        size_gb:
          type: integer
          description: A number that represents the memory resources in GB.
        type:
          type: string
          description: The type of the memory resources.
        extra:
          type: object
          description: Extra inforamtion about the memory resources.
          additionalProperties:
            type: string
    StorageSpec:
      title: StorageServerSpec
      type: object
      description: Information about the storage resources for a given server.
      required:
        - count
        - size_gb
        - type
        - extra
      properties:
        count:
          type: integer
          description: The number of storage devices for a given server.
        size_gb:
          type: integer
          description: The total amount of storage on a given server, in GB.
        type:
          type: string
          description: The type of the storage device(s).
        extra:
          type: object
          description: Extra information about the storage resources for a given server.
          additionalProperties:
            type: string
    NetworkSpec:
      title: NetworkServerSpec
      type: object
      description: Information about the network resources for a given server.
      required:
        - count
        - scope
        - throughput
        - type
      properties:
        count:
          type: integer
          description: The number of network resources for a given server.
        scope:
          type: string
          description: The scope of the interfaces.
          enum:
            - public
            - private
            - shared
        throughput:
          type: integer
          description: The network throughput in MB(per second).
        type:
          type: string
          description: The type of the NIC.
    FeaturesSpec:
      title: FeaturesServerSpec
      type: object
      required:
        - raid
      description: The spec for server features.
      properties:
        raid:
          type: string
          description: The type of raid supported, if any.
          nullable: true
        aws:
          type: object
          description: Features specific to AWS.
          required:
            - ena_support
            - ebs_optimized
          properties:
            ena_support:
              type: boolean
              description: A boolean where true indicates this is a machine that can support a much higher networking throughput.
            ebs_optimized:
              type: boolean
              description: A boolean where true indicates this is a machine that can support higher storage throughput.
    ServerSpecs:
      title: ServerSpecs
      description: Specs for a given server
      type: object
      required:
        - cpu
        - gpu
        - memory
        - storage
        - network
        - features
      properties:
        cpu:
          $ref: '#/components/schemas/CPUSpec'
        gpu:
          $ref: '#/components/schemas/GPUSpec'
        memory:
          $ref: '#/components/schemas/MemorySpec'
        storage:
          type: array
          items:
            $ref: '#/components/schemas/StorageSpec'
        network:
          type: array
          items:
            $ref: '#/components/schemas/NetworkSpec'
        features:
          $ref: '#/components/schemas/FeaturesSpec'
    ProviderServerSpec:
      title: ProviderServerSpec
      type: object
      description: Higher level information about a providers server.
      required:
        - identifier
        - category
        - model
        - locations
      properties:
        identifier:
          type: string
          description: A provider identifier
        category:
          type: string
          description: A category for the server.
        class:
          type: string
          description: A class for the server.
        model:
          type: string
          description: The model of the server.
        plan_identifier:
          type: string
          description: A plan identifier, if there is one.
        locaitons:
          description: A list of location ID's this server is available.
          type: array
          items:
            type: string
    ProviderServer:
      title: ProviderServer
      type: object
      description: A server from a provider.
      required:
        - id
        - name
        - description
        - specs
        - provider
        - price
        - compatible
        - low_resource
        - location_ids
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the server.
        description:
          type: string
          description: A description of the server.
        specs:
          $ref: '#/components/schemas/ServerSpecs'
        provider:
          $ref: '#/components/schemas/ProviderServerSpec'
        price:
          $ref: '#/components/schemas/BillingAmount'
        compatible:
          type: boolean
          description: A boolean where true signifies this server is compatible with the platform.
        low_resource:
          type: boolean
          description: A boolean where true signifies the server has a limited amount of resources and should only be used for very lightweight workloads.
        location_ids:
          description: An array of location IDs where this server type is available.
          type: array
          items:
            type: string
    ProviderServersServerIncludes:
      title: ProviderServers.Server
      description: A resources that assocaited with a provider server.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ProviderServer'
    ServerIncludes:
      title: ServerIncludes
      type: object
      description: A resource associated with a server.
      required:
        - locations
        - models
        - providers
      properties:
        locations:
          $ref: '#/components/schemas/LocationsIncludes'
        models:
          $ref: '#/components/schemas/ProviderServersServerIncludes'
        providers:
          $ref: '#/components/schemas/ProvidersIncludes'
    Target:
      title: BackupTarget
      type: object
      description: A target for the given backup.
      required:
        - destination
        - path
        - size
      properties:
        destination:
          type: string
          description: The target service to be used for a backup.
          enum:
            - backblaze-b2
        path:
          type: string
          description: The target for where to store the backup on the backup destination service.
        size:
          type: integer
          description: The total size of the backup.
    BackupState:
      title: BackupState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the backup.
              type: string
              enum:
                - saving
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Backup:
      title: Backup
      type: object
      description: A container backup resource.
      required:
        - id
        - hub_id
        - container_id
        - instance_id
        - target
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        container_id:
          type: string
          description: The ID of the given container.
        instance_id:
          type: string
          description: The ID of the instance the backup belongs to.
        target:
          $ref: '#/components/schemas/Target'
        state:
          $ref: '#/components/schemas/BackupState'
        events:
          title: BackupEvents
          type: object
          description: A collection of timestamps for each event in the backup's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the backup was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the backup was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the backup was deleted.
              $ref: '#/components/schemas/DateTime'
    Logs:
      title: BackupLogs
      type: object
      description: Backup logs for a given container.
      required:
        - id
        - backup_id
        - hub_id
        - type
        - log
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        backup_id:
          type: string
          description: An identifier for the backup.
        hub_id:
          $ref: '#/components/schemas/HubID'
        type:
          type: string
          description: The type of the backup log.
          enum:
            - restore
            - backup
        log:
          type: string
          description: The log.
        events:
          title: BackupLogEvents
          type: object
          description: A collection of timestamps for each event in the backup log's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the backup log was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the backup log was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the backup log was deleted.
              $ref: '#/components/schemas/DateTime'
    ZoneState:
      title: DNSZoneState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the zone.
              type: string
              enum:
                - new
                - pending
                - verifying
                - live
                - disabled
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Zone:
      title: DNSZone
      type: object
      description: DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or other resources connected to the internet or a private network. It is what allows the translation of a URL, such as http://example.com, to an IP address.
      required:
        - id
        - hub_id
        - creator
        - origin
        - hosted
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        origin:
          type: string
          description: The origin for the given DNS zone.
        hosted:
          type: boolean
          description: A boolean where true represents this zone is a hosted zone.
        state:
          $ref: '#/components/schemas/ZoneState'
        events:
          title: ZoneEvents
          type: object
          description: A collection of timestamps for each event in the DNS zone's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_verification
            - verified
          properties:
            created:
              description: The timestamp of when the DNS zone was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the DNS zone was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the DNS zone was deleted.
              $ref: '#/components/schemas/DateTime'
            last_verification:
              description: The timestamp of when the DNS zone was last_verification.
              $ref: '#/components/schemas/DateTime'
            verified:
              description: The timestamp of when the DNS zone was verified.
              $ref: '#/components/schemas/DateTime'
    ZoneIncludes:
      title: ZoneIncludes
      description: All includable resources linkable to the given Zone.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    RecordIncludes:
      title: RecordIncludes
      description: All includable resources linkable to the given records.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        containers:
          $ref: '#/components/schemas/ContainersIncludes'
    Attempt:
      title: DNSTLSAttempt
      type: object
      description: A DNS TLS certificate generation attempt resource.
      required:
        - id
        - hub_id
        - domains
        - time
        - success
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        domains:
          description: A list of domains associated with the attempt.
          type: array
          items:
            type: string
        time:
          description: A timestamp for when the attempt took place.
          $ref: '#/components/schemas/DateTime'
        success:
          description: A boolean where true means the attept was successful at creating the TLS certificate.
          type: boolean
        error:
          type: string
          description: If success is false this property will be populated with an error.
    DnsTlsCertificate:
      title: Certificate
      type: object
      description: A DNS TLS certificate.
      required:
        - id
        - hub_id
        - domains
        - events
        - bundle
        - private_key
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        domains:
          description: A list of domains associated with the certificate.
          type: array
          items:
            type: string
        events:
          title: CertificateEvents
          type: object
          description: A collection of timestamps for each event in the certificate's lifetime.
          properties:
            created:
              description: '[unused]'
              $ref: '#/components/schemas/DateTime'
            updated:
              description: '[unused]'
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: '[unused]'
              $ref: '#/components/schemas/DateTime'
            generated:
              description: When the certificate was generated; useful for calculating expiration (+90 days)
              $ref: '#/components/schemas/DateTime'
        bundle:
          description: The certificate bundle
          type: string
        private_key:
          description: The private key for the certificate
          type: string
    Context:
      title: ActivityContext
      type: object
      description: ID context for resources associated with an activity.
      properties:
        environment_id:
          type: string
          description: An ID for the given resource.
        container_id:
          type: string
          description: An ID for the given resource.
        instance_id:
          type: string
          description: An ID for the given resource.
        server_id:
          type: string
          description: An ID for the given resource.
        stack_id:
          type: string
          description: An ID for the given resource.
        dns_zone_id:
          type: string
          description: An ID for the given resource.
    Session:
      title: ActivitySession
      type: object
      description: Session info about the activity entry.
      nullable: true
      required:
        - url
        - ip
        - api_key
      properties:
        url:
          type: string
          description: URL endpoint assocaited with the activity context - does not include domain.
        ip:
          type: string
          description: The IP of the account associated with the session.
        api_key:
          type: string
          description: The API key ID.
          nullable: true
    Detail:
      title: ActivityDetail
      type: object
      description: Details about a given event that is part of an activity.
      properties:
        id:
          $ref: '#/components/schemas/ID'
        number:
          type: integer
          description: A number describing the amount of the resource that exists.
        string:
          type: string
          description: Additional information.
    Change:
      title: ActivityChange
      type: object
      description: An object with information of details for before and after a resource changed.
      required:
        - component
      properties:
        component:
          type: string
          description: A description of the resource that was changed.
        before:
          $ref: '#/components/schemas/Detail'
        after:
          $ref: '#/components/schemas/Detail'
    Activity:
      title: Activity
      type: object
      description: A resource representing information about activity taking place on a given hub.
      required:
        - id
        - hub_id
        - user
        - verbosity
        - context
        - changes
        - annotations
        - error
        - component
        - status
        - event
        - time
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        user:
          type: object
          description: Userscope
          required:
            - type
            - id
          properties:
            type:
              type: string
              description: The type of user.
              enum:
                - account
                - environment
                - platform
                - platform-pipeline
                - employee
                - api-key
                - visitor
            id:
              type: string
              description: The given users ID.
        verbosity:
          type: integer
          description: A number representing how verbose the acitivty reporting is for a given hub.
        context:
          $ref: '#/components/schemas/Context'
        session:
          $ref: '#/components/schemas/Session'
        changes:
          type: array
          description: An array of changes.
          items:
            $ref: '#/components/schemas/Change'
        annotations:
          type: object
          description: A record of additional annotations for the activity.
          additionalProperties:
            type: string
        error:
          type: object
          description: An object describing a given activity error.
          nullable: true
          required:
            - message
          properties:
            message:
              type: string
              description: The error message.
        component:
          type: object
          description: An object holding information about a component.
          nullable: true
          required:
            - id
            - type
          properties:
            id:
              $ref: '#/components/schemas/ID'
            type:
              type: string
              description: The type of component.
        tags:
          type: array
          description: An array of tags that denote things such as a type of security event, or can be user-provided.
          items:
            type: string
        status:
          type: string
          description: A status for the given activity.
          enum:
            - info
            - warning
            - request
            - success
            - error
            - alert
            - recovery
        event:
          type: string
          description: The activity event.
          enum:
            - hub.task.delete
            - hub.update
            - hub.create
            - hub.images.prune
            - hub.task.images.prune
            - environment.initialize
            - environment.start
            - environment.stop
            - environment.task.start
            - environment.task.stop
            - environment.task.initialize
            - environment.delete
            - environment.task.delete
            - environment.update
            - environment.create
            - environment.services.discovery.task.reconfigure
            - environment.services.lb.task.reconfigure
            - environment.services.vpn.task.reconfigure
            - image.import
            - image.task.import
            - image.update
            - image.create
            - image.delete
            - image.task.delete
            - image.source.create
            - image.source.update
            - image.source.task.delete
            - container.create
            - container.update
            - container.initialize
            - container.start
            - container.task.start
            - container.stop
            - container.task.stop
            - container.reconfigure
            - container.task.reconfigure
            - container.reconfigure.volumes
            - container.task.reconfigure.volumes
            - container.reimage
            - container.task.reimage
            - container.scale
            - container.task.scale
            - container.delete
            - container.task.delete
            - container.instance.error
            - container.instance.sftp.login
            - container.instance.migration.start
            - container.instance.migration.revert
            - container.instance.delete
            - container.instances.delete
            - container.instances.create
            - container.instance.healthcheck.restarted
            - container.backup.create
            - container.backup.restore
            - container.backup.task.restore
            - container.backup.delete
            - container.backup.task.delete
            - dns.zone.task.verify
            - dns.zone.task.delete
            - dns.zone.update
            - dns.zone.create
            - dns.zone.verify
            - dns.zone.delete
            - dns.zone.record.cert.generate.auto
            - dns.zone.record.cert.generate
            - dns.zone.record.delete
            - dns.zone.record.update
            - dns.zone.record.create
            - dns.zone.record.task.delete
            - dns.zone.record.task.cert.generate
            - stack.task.delete
            - stack.update
            - stack.create
            - stack.task.prune
            - stack.build.create
            - stack.build.generate
            - stack.build.deploy
            - stack.build.delete
            - stack.build.task.generate
            - stack.build.task.delete
            - infrastructure.server.task.delete
            - infrastructure.server.task.restart
            - infrastructure.server.task.provision
            - infrastructure.server.update
            - infrastructure.server.delete
            - infrastructure.server.restart
            - infrastructure.server.compute.restart
            - infrastructure.server.provision
            - infrastructure.server.live
            - infrastructure.server.services.sftp.lockdown.auto
            - infrastructure.server.reconfigure.features
            - infrastructure.server.task.reconfigure.features
            - infrastructure.provider.create
            - infrastructure.provider.update
            - infrastructure.provider.delete
            - sdn.network.task.delete
            - sdn.network.update
            - sdn.network.create
            - sdn.network.task.reconfigure
            - infrastructure.ips.pool.task.delete
            - billing.order.task.confirm
            - billing.order.confirm
            - billing.invoice.task.void
            - billing.invoice.task.credit
            - billing.invoice.task.refund
            - billing.invoice.task.pay
            - billing.invoice.pay
            - billing.method.update
            - billing.method.create
            - billing.method.delete
            - billing.method.task.delete
            - hub.apikey.create
            - hub.apikey.update
            - hub.apikey.delete
            - hub.membership.create
            - hub.membership.delete
            - pipeline.update
            - pipeline.task.delete
            - pipeline.delete
            - pipeline.create
            - pipeline.task.trigger
            - pipeline.trigger
            - pipeline.key.update
            - pipeline.key.delete
            - pipeline.key.create
        time:
          description: A timestamp for when the activity took place.
          $ref: '#/components/schemas/DateTime'
    PoolProvider:
      title: IPPoolProvider
      type: object
      description: A IP Pool provider.
      required:
        - identifier
        - location
        - reservation
        - server
        - server_assignment
      properties:
        identifier:
          type: string
          description: An identifier for a native provider.
          enum:
            - equinix-metal
            - vultr
            - aws
        location:
          type: string
          description: Information about the location of the provider this pool is associated with.
        reservation:
          type: string
          description: A reservation identifier associated with the pool reservation.
        server:
          type: string
          description: A server identifier associated with the pool.
        server_assignment:
          type: string
          description: An identifier linked to the server assingment of the IP pool.
    PoolState:
      title: PoolState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the pool.
              type: string
              enum:
                - live
                - releasing
                - released
        - $ref: '#/components/schemas/State'
    Pool:
      title: InfrastructureIPPool
      type: object
      description: An IP Pool resource
      required:
        - id
        - hub_id
        - kind
        - provider
        - server_id
        - floating
        - location_id
        - ips
        - block
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        server_id:
          type: string
          description: An ID associated with a server resource.
        location_id:
          type: string
          description: An ID associated with a location resource.
        kind:
          type: string
          description: The type of IP pool.
          enum:
            - ipv4
            - ipv6
        provider:
          $ref: '#/components/schemas/PoolProvider'
        floating:
          type: boolean
          description: A boolean where true represents the pool as a floating IP pool.
        ips:
          type: object
          description: Data about IPs in the pool.
          required:
            - total
            - available
          properties:
            total:
              type: integer
              description: The total number of IPs in the pool.
            available:
              type: integer
              description: Of the total number of IP's how many are available to be assigned.
        block:
          type: object
          description: Network information about the pool.
          required:
            - cidr
            - gateway
            - netmask
            - network
          properties:
            cidr:
              type: string
              description: A cidr for the pool.
            gateway:
              type: string
              description: A gateway for the pool.
            netmask:
              type: string
              description: A netmask for the pool.
            network:
              type: string
              description: A network for the pool.
        state:
          $ref: '#/components/schemas/PoolState'
    ApiKeyState:
      title: ApiKeyState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the API key.
              type: string
              enum:
                - new
                - configuring
                - live
                - inactive
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ApiKey:
      title: ApiKey
      description: An API key resource
      type: object
      required:
        - id
        - hub_id
        - name
        - creator
        - secret
        - permissions
        - capabilities
        - ips
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A name for the API key.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        secret:
          type: string
          description: The API key secret.
        permissions:
          type: object
          description: Information about this members permissions for a given resource.
          required:
            - all_environments
            - environments
          properties:
            all_environments:
              type: boolean
              description: A boolean where true represents the member has access to view and manage all environments for the resource.
            environments:
              description: An array of environments this resource has access to.
              type: array
              items:
                type: object
                description: Environment resource resources.
                required:
                  - id
                  - manage
                properties:
                  id:
                    $ref: '#/components/schemas/ID'
                  manage:
                    type: boolean
                    description: A boolean where true represents this environment can be managed by the resource (i.e. its not just read-only).
        capabilities:
          type: object
          description: An object holding information about the capabilities of this API key.
          required:
            - all
            - specific
          properties:
            all:
              type: boolean
              description: A boolean where true represents this key has all available capabilities.
            specific:
              description: An array a capabilities this key has.
              type: array
              items:
                $ref: '#/components/schemas/Capability'
        ips:
          type: array
          description: An array of IP's this API key can make calls from.
          items:
            type: string
          nullable: true
        state:
          $ref: '#/components/schemas/ApiKeyState'
        events:
          title: HubEvents
          type: object
          description: A collection of timestamps for each event in the hub's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the hub was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the hub was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the hub was deleted.
              $ref: '#/components/schemas/DateTime'
    NetworkState:
      title: NetworkState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the network.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    SDNPrivateNetwork:
      title: PrivateNetwork
      type: object
      description: Private network information for a Cycle SDN.
      required:
        - vxlan_tag
        - subnet
        - mac_addr_suffix
        - ipv6
      properties:
        vxlan_tag:
          type: integer
          description: A tag used to ensure proper routing.
        subnet:
          type: string
          description: The subnet of the private network.
        mac_addr_suffix:
          type: integer
          description: A number used to ensure a MAC address exists for each network.
        ipv6:
          type: object
          description: IPv6 infromation for the network.
          required:
            - ip
            - cidr
          properties:
            ip:
              type: string
              description: The networks IPv6 base.
            cidr:
              type: string
              description: The private network CIDR.
    SDNNetwork:
      title: SDNNetwork
      type: object
      description: SDN Network resource.
      required:
        - id
        - name
        - identifier
        - cluster
        - creator
        - hub_id
        - state
        - private_network
        - environments
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the network.
        identifier:
          type: string
          description: A network identifier used to construct http calls that specifically use this network over another.
        cluster:
          type: string
          description: The infrastructure cluster the environments belonging to this network belong to.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        state:
          $ref: '#/components/schemas/NetworkState'
        private_network:
          $ref: '#/components/schemas/SDNPrivateNetwork'
        environments:
          description: An array of environments and timestamps.
          type: array
          items:
            type: object
            required:
              - id
              - added
            properties:
              id:
                $ref: '#/components/schemas/ID'
              added:
                description: A timestamp of when the environment was added.
                $ref: '#/components/schemas/DateTime'
        events:
          title: NetworkEvents
          type: object
          description: A collection of timestamps for each event in the image's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the image was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the image was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the image was deleted.
              $ref: '#/components/schemas/DateTime'
    ImageSourceAbout:
      title: ImageSourceAbout
      type: object
      description: Information about the image source resource.
      required:
        - description
      properties:
        description:
          type: string
          description: Some information about the image source resource.
    ImageSourceCreateStep:
      title: ImageSourceCreateStep
      type: object
      description: Settings for the image source create step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - image.source.create
        details:
          type: object
          required:
            - name
            - type
            - origin
          properties:
            name:
              type: string
            type:
              type: string
            about:
              $ref: '#/components/schemas/ImageSourceAbout'
            origin:
              $ref: '#/components/schemas/ImageSourceOrigin'
    ResourceLocation:
      title: StepResourceLocation
      type: object
      description: Either a details ID or details from where the ID is an identifier for an existing resource and a from is an identifier from a previous step in this pipeline.
      oneOf:
        - title: DetailsId
          type: object
          properties:
            id:
              type: string
              description: The ID of an existing resource that exists before the pipeline is run.
        - title: DetailsFrom
          type: object
          properties:
            from:
              type: object
              description: The stage and step to report on.
              required:
                - step
              properties:
                stage:
                  type: string
                  description: An identifier for the stage the step being reported on resides in.
                step:
                  type: string
                  description: An identifier for the step to be reported on.
    ImageCreateStep:
      title: ImageCreateStep
      type: object
      description: Settings for the image create step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - image.create
        details:
          type: object
          required:
            - source
          properties:
            name:
              type: string
            source:
              $ref: '#/components/schemas/ResourceLocation'
    ImageImportStep:
      title: ImageImportStep
      type: object
      description: Settings for the image import step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - image.import
        details:
          $ref: '#/components/schemas/ResourceLocation'
    ImagesPruneStep:
      title: ImagePruneStep
      type: object
      description: Settings for the images prune step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - images.prune
        details:
          type: object
          required:
            - source_ids
          properties:
            source_ids:
              type: array
              items:
                $ref: '#/components/schemas/ID'
    ContainerCreateStep:
      title: ContainerCreateStep
      type: object
      description: Settings for the create container step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.create
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - name
                - environment
                - image
                - stateful
                - config
                - volumes
                - annotations
              properties:
                name:
                  type: string
                environment:
                  $ref: '#/components/schemas/ResourceLocation'
                image:
                  $ref: '#/components/schemas/ResourceLocation'
                stateful:
                  type: boolean
                annotations:
                  type: object
                config:
                  $ref: '#/components/schemas/Config'
                volumes:
                  $ref: '#/components/schemas/Volumes'
    ContainerStartStep:
      title: ContainerStartStep
      type: object
      description: Settings for starting a container in a pipeline
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.start
        details:
          $ref: '#/components/schemas/ResourceLocation'
    ContainerStopStep:
      title: ContainerStopStep
      type: object
      description: Settings for stopping a container in a pipeline
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.stop
        details:
          $ref: '#/components/schemas/ResourceLocation'
    ContainerDeleteStep:
      title: ContainerDeleteStep
      type: object
      description: Settings for deleting a container in a pipeline
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.delete
        details:
          $ref: '#/components/schemas/ResourceLocation'
    ContainerReimageStep:
      title: ContainerReimageStep
      type: object
      description: Settings for reimaging a container in a pipeline
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.reimage
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - image
              properties:
                image:
                  $ref: '#/components/schemas/ResourceLocation'
                options:
                  type: object
                  required:
                    - allow_incompatible
                  properties:
                    allow_incompatible:
                      type: boolean
    ContainerRestartStep:
      title: ContainerRestartStep
      type: object
      description: Settings for restarting a container in a pipeline
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - container.restart
        details:
          $ref: '#/components/schemas/ResourceLocation'
    EnvironmentCreateStep:
      title: EnvironmentCreateStep
      type: object
      description: Settings for creating an environment in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - environment.create
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - name
                - cluster
                - features
              properties:
                name:
                  type: string
                about:
                  $ref: '#/components/schemas/EnvironmentAbout'
                cluster:
                  type: string
                stack_build:
                  $ref: '#/components/schemas/ResourceLocation'
                features:
                  $ref: '#/components/schemas/Features'
    EnvironmentStartStep:
      title: EnvironmentStartStep
      type: object
      description: Settings for starting an environment in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - environment.start
        details:
          $ref: '#/components/schemas/ResourceLocation'
    EnvironmentStopStep:
      title: EnvironmentStopStep
      type: object
      description: Settings for stopping an environment in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - environment.stop
        details:
          $ref: '#/components/schemas/ResourceLocation'
    EnvironmentDeleteStep:
      title: EnvironmentDeleteStep
      type: object
      description: Settings for deleting an environment in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - environment.delete
        details:
          $ref: '#/components/schemas/ResourceLocation'
    StackBuildInstructions:
      title: StackBuildInstructions
      type: object
      description: Git information on where to pull stack resources from.
      properties:
        git:
          type: object
          description: Git information specifics.
          required:
            - type
            - value
          properties:
            type:
              type: string
              description: The type of information the user is passing.
              enum:
                - hash
                - tag
            value:
              type: string
              description: The actual value to be passed.
    StackBuildAbout:
      title: StackBuildAbout
      type: object
      description: Information about the stack build.
      required:
        - version
        - description
      properties:
        version:
          type: string
          description: A user defined version of the build.
        description:
          type: string
          description: A user defined description for the build.
        git_commit:
          $ref: '#/components/schemas/StackGitCommit'
    StackBuildCreateStep:
      title: StackBuildCreateStep
      type: object
      description: Settings for creating a stack build in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - stack.build.create
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - stack
              properties:
                stack:
                  $ref: '#/components/schemas/ResourceLocation'
                instructions:
                  $ref: '#/components/schemas/StackBuildInstructions'
                about:
                  $ref: '#/components/schemas/StackBuildAbout'
    StackBuildGenerateStep:
      title: StackBuildGenerateStep
      type: object
      description: Settings for the stack build generate step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - stack.build.generate
        details:
          $ref: '#/components/schemas/ResourceLocation'
    StackDeployContainersObject:
      title: StackDeployContainersObject
      type: object
      description: Options to control how a container behaves when a stack build is deployed.
      required:
        - reimage
        - reconfigure
      properties:
        reimage:
          type: boolean
          description: A boolean where true represents the container is to be reimaged.
        reconfigure:
          type: boolean
          description: A boolean where true represents the container is to be reconfigured.
    StackBuildContainerUpdate:
      title: StackBuildContainerUpdate
      type: object
      description: Optional update object used to specify specific params to update from the stack build.
      required:
        - containers
      properties:
        containers:
          type: object
          description: A map of the container names to update within the environment.
          additionalProperties:
            $ref: '#/components/schemas/StackDeployContainersObject'
    StackBuildDeployStep:
      title: StackBuildDeployStep
      type: object
      description: Settings for deploying a stack build in a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - stack.build.deploy
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - id
                - environment
              properties:
                id:
                  type: string
                  description: Id of stack build
                environment:
                  $ref: '#/components/schemas/ResourceLocation'
                update:
                  $ref: '#/components/schemas/StackBuildContainerUpdate'
    SleepStep:
      title: SleepStep
      type: object
      description: Settings for the sleep step for a pipeline.
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - sleep
        details:
          type: object
          properties:
            seconds:
              type: integer
              description: Total duration (seconds) to run this step for, before moving on to the next step.
    WebhookPostStep:
      title: WebhookPostStep
      description: An action describing a webhook post. The webhook will post the full body of the resource referenced by the step - for example if you were to reference a step creating a container, you would receive that container object in the post body.
      type: object
      required:
        - action
        - details
      properties:
        action:
          type: string
          description: The action that the step takes.
          enum:
            - webhook.post
        details:
          allOf:
            - $ref: '#/components/schemas/ResourceLocation'
            - type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: The url to post to.
    PipelineSteps:
      title: PipelineStep
      description: A step for a pipeline stage.
      allOf:
        - type: object
          properties:
            identifier:
              type: string
              description: An identifier for the step.
            options:
              type: object
              properties:
                skip:
                  type: boolean
        - oneOf:
            - $ref: '#/components/schemas/ImageSourceCreateStep'
            - $ref: '#/components/schemas/ImageCreateStep'
            - $ref: '#/components/schemas/ImageImportStep'
            - $ref: '#/components/schemas/ImagesPruneStep'
            - $ref: '#/components/schemas/ContainerCreateStep'
            - $ref: '#/components/schemas/ContainerStartStep'
            - $ref: '#/components/schemas/ContainerStopStep'
            - $ref: '#/components/schemas/ContainerDeleteStep'
            - $ref: '#/components/schemas/ContainerReimageStep'
            - $ref: '#/components/schemas/ContainerRestartStep'
            - $ref: '#/components/schemas/EnvironmentCreateStep'
            - $ref: '#/components/schemas/EnvironmentStartStep'
            - $ref: '#/components/schemas/EnvironmentStopStep'
            - $ref: '#/components/schemas/EnvironmentDeleteStep'
            - $ref: '#/components/schemas/StackBuildCreateStep'
            - $ref: '#/components/schemas/StackBuildGenerateStep'
            - $ref: '#/components/schemas/StackBuildDeployStep'
            - $ref: '#/components/schemas/SleepStep'
            - $ref: '#/components/schemas/WebhookPostStep'
    PipelineStage:
      title: PipelineStage
      type: object
      description: A stage for a given pipeline.
      required:
        - identifier
        - steps
      properties:
        identifier:
          type: string
          description: A stage identifier.
        steps:
          type: array
          description: An array of steps for the stage.
          items:
            $ref: '#/components/schemas/PipelineSteps'
        options:
          type: object
          description: Additonal options for the stage.
          properties:
            skip:
              type: boolean
              description: A boolean where true indicates the given stage should be skipped when the pipeline is run.
    PipelineState:
      title: PipelineState
      type: object
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the pipeline.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Pipeline:
      title: Pipeline
      type: object
      description: A pipeline resource.
      required:
        - id
        - hub_id
        - name
        - creator
        - disable
        - events
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: A name for the pipeline.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        disable:
          type: boolean
          description: A boolean where true signifies the pipeline is disabled.
        stages:
          description: An array of stages.
          type: array
          items:
            $ref: '#/components/schemas/PipelineStage'
        events:
          title: PipelineEvents
          type: object
          description: A collection of timestamps for each event in the pipeline's lifetime.
          required:
            - created
            - updated
            - deleted
            - last_run
          properties:
            created:
              description: The timestamp of when the pipeline was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the pipeline was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the pipeline was deleted.
              $ref: '#/components/schemas/DateTime'
            last_run:
              description: The timestamp of when the pipeline was last run.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/PipelineState'
    TriggerKeyState:
      title: TriggerKeyState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the trigger key.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    TriggerKey:
      title: TriggerKey
      type: object
      description: A pipeline trigger key resource.
      required:
        - id
        - name
        - secret
        - creator
        - hub_id
        - pipeline_id
        - state
        - events
        - ips
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: The name of the trigger key.
        secret:
          type: string
          description: The secret used when calling the trigger key programmatically.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        pipeline_id:
          type: string
          description: The ID for the pipeline related to this trigger key.
        state:
          $ref: '#/components/schemas/TriggerKeyState'
        events:
          title: TriggerKeyEvents
          type: object
          description: A collection of timestamps for each event in the trigger key's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the trigger key was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the trigger key was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the trigger key was deleted.
              $ref: '#/components/schemas/DateTime'
        ips:
          description: An array of ips this trigger key is usable from.
          type: array
          items:
            type: string
    ComponentsIncludes:
      title: ComponentIncludes
      type: object
      description: A resource thats assocaited with activity.
      additionalProperties:
        oneOf:
          - $ref: '#/components/schemas/Container'
          - $ref: '#/components/schemas/Instance'
          - $ref: '#/components/schemas/Environment'
          - $ref: '#/components/schemas/Image'
          - $ref: '#/components/schemas/Server'
          - $ref: '#/components/schemas/Pool'
          - $ref: '#/components/schemas/Stack'
          - $ref: '#/components/schemas/StackBuild'
          - $ref: '#/components/schemas/Zone'
          - $ref: '#/components/schemas/Record'
          - $ref: '#/components/schemas/ApiKey'
          - $ref: '#/components/schemas/Provider'
          - $ref: '#/components/schemas/SDNNetwork'
          - $ref: '#/components/schemas/HubMembership'
          - $ref: '#/components/schemas/Pipeline'
          - $ref: '#/components/schemas/TriggerKey'
    ActivityIncludes:
      title: ActivityIncludes
      description: All includable resources linkable to the given records.
      type: object
      properties:
        users:
          $ref: '#/components/schemas/CreatorInclude'
        components:
          $ref: '#/components/schemas/ComponentsIncludes'
    HubUsageDatum:
      title: HubUsageDatum
      description: A hub usage data point
      type: object
      required:
        - time
        - servers
        - members
        - environments
        - containers
      properties:
        time:
          type: string
        servers:
          type: number
        members:
          type: number
        environments:
          type: number
        containers:
          type: number
    Component:
      title: IndexComponent
      type: object
      description: Generic component format for describing resources for the search index
      required:
        - id
        - name
        - state
        - events
        - context_blobs
        - associations
      properties:
        id:
          description: ID of the component
          type: string
        name:
          description: Name of the component
          type: string
        state:
          description: State of the component
          type: string
        events:
          $ref: '#/components/schemas/Events'
        context_blobs:
          description: related strings for fuzzy search
          type: array
          items:
            type: string
        associations:
          type: object
          description: Component associations
          properties:
            container:
              description: Associated container Id
              type: string
            environment:
              description: Associated environment Id
              type: string
            image-source:
              description: Associated image source Id
              type: string
            image:
              description: Associated image Id
              type: string
            stack:
              description: Associated stack Id
              type: string
            server:
              description: Associated server Id
              type: string
            provider-location:
              description: Associated provider location Id
              type: string
    Index:
      title: Index
      type: object
      description: An index that enables search in the portal
      required:
        - generated
        - hub_id
        - containers
        - environments
        - image_sources
        - dns_zones
        - stacks
        - servers
      properties:
        generated:
          description: The timestampof when the index was generated
          $ref: '#/components/schemas/DateTime'
        hub_id:
          description: Id describing the Hub
          type: string
        containers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
        environments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
        image_sources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
        dns_zones:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
        stacks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
        servers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Component'
    ImageSourceState:
      title: ImageSourceState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the image source.
              type: string
              enum:
                - live
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    ImageSource:
      title: ImageSource
      type: object
      description: An image source is a set of resources that direct the platform on where it can find the resources needed to build an image resource.
      required:
        - id
        - name
        - origin
        - hub_id
        - state
        - events
        - creator
        - requires
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        name:
          type: string
          description: A name for the image source resource.
        about:
          $ref: '#/components/schemas/ImageSourceAbout'
        origin:
          $ref: '#/components/schemas/ImageSourceOrigin'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        state:
          $ref: '#/components/schemas/ImageSourceState'
        events:
          title: ImageSourceEvents
          type: object
          description: A collection of timestamps for each event in the iamge source's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the iamge source was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the iamge source was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the iamge source was deleted.
              $ref: '#/components/schemas/DateTime'
        requires:
          type: object
          description: Information about a server resource this image requires to function properly.
          required:
            - nvidia_gpu
          properties:
            nvidia_gpu:
              type: boolean
              description: A boolean where true represents this image requies an Nvidia GPU to run properly.
              nullable: true
    ImageSourceIncludes:
      title: ImageSourceIncludes
      description: A resource associated with an image source.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ImageSource'
    ImageIncludes:
      title: ImageIncludes
      description: All includable resources linkable to the given image.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        stack_builds:
          $ref: '#/components/schemas/StackBuildIncludes'
        stacks:
          $ref: '#/components/schemas/StackIncludes'
        sources:
          $ref: '#/components/schemas/ImageSourceIncludes'
    BuildLog:
      title: ImageBuildLog
      description: A build log for a given image.
      type: object
      required:
        - id
        - image_id
        - hub_id
        - log
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        image_id:
          type: string
          description: The ID of the image the build log pertains to.
        log:
          type: string
          description: The log itself.
        events:
          title: BuildLogEvents
          type: object
          description: A collection of timestamps for each event in the build log's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the build log was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the build log was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the build log was deleted.
              $ref: '#/components/schemas/DateTime'
    SourceIncludes:
      title: SourceIncludes
      description: A resource associate with an image source.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    InfrastructureSummary:
      title: InfrastructureSummary
      description: An infrastructure summary resource.
      type: object
      required:
        - hub_id
        - images
        - clusters
        - updated
        - servers
      properties:
        hub_id:
          $ref: '#/components/schemas/HubID'
        servers:
          type: number
          description: The number of servers on the cluster
        images:
          type: object
          description: Statistics about image usage.
          required:
            - tier
          properties:
            tier:
              type: object
              description: Image tier information.
              required:
                - total_mb
                - allocated_mb
                - used_mb
              properties:
                total_mb:
                  type: integer
                  description: A value in MB representing the total MB of space on the infrastructure available for images.
                allocated_mb:
                  type: integer
                  description: A value in MB representing the amount of allocated space for images.
                used_mb:
                  type: integer
                  description: A value in MB representing the total MB of space images are taking up out of the total megabytes available.
        clusters:
          type: object
          description: Records pointing to information about clusters that make up this hubs infrastructure.
          additionalProperties:
            type: object
            required:
              - name
              - resources
              - servers
              - instances
              - healthy
              - versions
            properties:
              name:
                type: string
                description: The name of the cluster
              resources:
                type: object
                description: Information about the aggregate resources of the cluster.
                required:
                  - ram
                  - cpu
                  - disk
                properties:
                  ram:
                    type: object
                    description: Information about the RAM resources for a given cluster.
                    required:
                      - total_mb
                      - allocated_mb
                      - used_mb
                      - provisioned_mb
                    properties:
                      total_mb:
                        type: integer
                        description: The total amount of RAM in MBs for the cluster.
                      allocated_mb:
                        type: integer
                        description: The total amount of allocated RAM in MBs for the cluster.
                      used_mb:
                        type: integer
                        description: The total amount of used MB's of RAM for the cluster.
                      provisioned_mb:
                        type: integer
                        description: The total amount of RAM provisioned for the cluster.
                  cpu:
                    type: object
                    description: Information about the CPU resources for a given cluster.
                    required:
                      - cores
                      - shares
                      - shares_ratio
                    properties:
                      cores:
                        type: integer
                        description: The aggregate number of cores across servers in this cluster.
                      shares:
                        type: object
                        description: Information on the shares available for this cluster.
                        required:
                          - allocated
                          - total
                        properties:
                          allocated:
                            type: integer
                            description: The number of shares allocated for the cluster.
                          total:
                            type: integer
                            description: The total number of shares available for a given cluster.
                      share_ratio:
                        type: integer
                        description: The ratio of shares allocated to total shares for the given cluster.
                  disk:
                    type: object
                    description: Information about the aggregate disk space available for the given cluster.
                    required:
                      - total_mb
                      - used_mb
                    properties:
                      total_mb:
                        type: integer
                        description: The total amount of disk space in this cluster, in MBs.
                      used_mb:
                        type: integer
                        description: The amount of disk space used across the given cluster, in MB.
        updated:
          description: A timestamp of when the infrastructure was last updated.
          $ref: '#/components/schemas/DateTime'
    NativeProvider:
      title: NativeProvider
      type: object
      description: All relevant information about a natively supported Cycle provider
      required:
        - name
        - identifier
        - required_fields
        - notices
        - features
      properties:
        name:
          type: string
          description: String describing the display name of a native provider
        identifier:
          type: string
          description: String describing the identifier of a native provider
        website:
          type: string
          description: String describing the website of a native provider for more info
        required_fields:
          type: object
          description: Object with required fields and regex for each field
          additionalProperties:
            type: object
            description: Required fields and validation
            required:
              - caption
              - regex
            properties:
              caption:
                type: string
                description: display name of the field
              regex:
                type: string
                description: validation regex for the field
        notices:
          type: object
          description: Record of notices related to native provider
          additionalProperties:
            type: string
    Telemetry:
      title: ServerStatsTelemetery
      type: object
      description: Statistics about a given servers telemetery data.
      required:
        - time
        - load
        - ram
        - storage_base
        - storage_pool
      properties:
        time:
          description: The timestamp for when the telemetery data was collected.
          $ref: '#/components/schemas/DateTime'
        load:
          $ref: '#/components/schemas/Load'
        ram:
          $ref: '#/components/schemas/RAM'
        storage_base:
          type: object
          description: Telemetry data for the base volume of a given server.
          required:
            - used
            - free
            - total
          properties:
            used:
              type: integer
              description: The amount of storage currently used in the base volume.
            free:
              type: integer
              description: The amount of free space on the base volume.
            total:
              type: integer
              description: The total amount of space on the base volume.
        storage_pool:
          type: object
          description: User data storage across all devices.
          required:
            - data_percent
            - meta_percent
            - total
          properties:
            data_percent:
              type: number
              description: The percentage of storage used by user data.
            meta_percent:
              type: number
              description: The percentage of storage used by the file allocation stables, etc.
            total:
              type: number
              description: The total amount of storage available.
    ReconfigureServer:
      title: ReconfigureServerAction
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - reconfigure.features
        contents:
          type: object
          description: Supplemental information needed to perform the action.
          required:
            - sftp
            - base_volume_gb
          properties:
            sftp:
              type: boolean
              description: A boolean where true represents the desire for the server to accept incoming SFTP requests for container volumes.
            base_volume_gb:
              type: integer
              description: A number in GB for how big the base volume should be.  This cannot be lower than the currently set value for the server.
              nullable: true
    RestartServer:
      title: RestartServerAction
      type: object
      description: A job that restarts the server.
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - restart
    RestartCompute:
      title: RestartComputeServiceAction
      type: object
      description: A job that restarts compute service on a given server.
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take.
          enum:
            - compute.restart
    ServerTags:
      title: ServerTags
      description: Tags for a given server.
      type: object
      properties:
        data:
          type: array
          description: An array of server tags.
          items:
            type: string
    UsageDatum:
      title: ServerUsageDatum
      type: object
      description: Server usage data.
      required:
        - time
        - nodes
        - memory_gb
      properties:
        time:
          description: A timestamp for when the usage data was collected.
          $ref: '#/components/schemas/DateTime'
        nodes:
          type: integer
          description: The number of nodes the data is pulled from.
        memory_gb:
          type: integer
          description: A number in GB representing memory.
    PoolIncludes:
      title: PoolIncludes
      type: object
      description: Resources associated with an IP Pool.
      required:
        - creators
        - servers
        - providers
        - locations
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        servers:
          $ref: '#/components/schemas/ServersIncludes'
        providers:
          $ref: '#/components/schemas/ProvidersIncludes'
        locations:
          $ref: '#/components/schemas/LocationsIncludes'
    DeploymentStrategy:
      title: DeploymentStrategy
      type: object
      description: Information about supported container deployment strategies.
      required:
        - name
        - disabled
        - description
      properties:
        name:
          type: string
          description: The human-friendly name of the deployment strategy.
        disabled:
          type: boolean
          description: A boolean where true signifies a strategy is either not yet or no longer available.
        description:
          type: string
          description: A description for the deployment strategy.
    TaskStep:
      title: TaskStep
      type: object
      description: A step for a given job task.
      required:
        - caption
        - description
        - started
        - completed
      properties:
        caption:
          type: string
          description: A short description of the step.
        description:
          type: string
          description: A more verbose description.
        started:
          description: A timestamp for when the step started.
          $ref: '#/components/schemas/DateTime'
        completed:
          description: A timestamp for when the step completed.
          $ref: '#/components/schemas/DateTime'
    TaskState:
      title: TaskState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the task.
              type: string
              enum:
                - pending
                - error
                - running
                - completed
        - $ref: '#/components/schemas/State'
    JobTasks:
      title: JobTasks
      description: Information about a job task.
      required:
        - id
        - caption
        - header
        - action
        - events
        - steps
        - state
        - failable
        - input
        - output
        - error
      properties:
        id:
          $ref: '#/components/schemas/ID'
        caption:
          type: string
          description: A short description of the task.
        header:
          type: string
          description: The API function called.
        action:
          type: string
          description: The action being handled by the job.
        events:
          title: JobEvents
          type: object
          description: A collection of timestamps for each event in the job's lifetime.
          required:
            - queued
            - completed
            - started
          properties:
            queued:
              description: The timestamp of when the job was queued.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: The timestamp of when the job was completed.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the job was started.
              $ref: '#/components/schemas/DateTime'
        steps:
          description: An array of job task steps.
          type: array
          items:
            $ref: '#/components/schemas/TaskStep'
        state:
          $ref: '#/components/schemas/TaskState'
        failable:
          type: boolean
          description: A boolean where true indicates the job is failable.
        input:
          type: object
          description: Input information used for the job tasks.
          additionalProperties:
            type: string
        output:
          type: object
          description: Output informaiton used for the job tasks.
          additionalProperties:
            type: string
        error:
          type: object
          description: An error object describing issues with the job.
          required:
            - message
          properties:
            message:
              type: string
              description: An error message
              nullable: true
    JobState:
      title: JobState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the job.
              type: string
              enum:
                - new
                - queued
                - error
                - scheduled
                - expired
                - running
                - completed
        - $ref: '#/components/schemas/State'
    Job:
      title: Job
      description: A job resource.
      type: object
      required:
        - id
        - queue
        - caption
        - events
        - schedule
        - expires
        - tasks
        - hash
        - limit_duplicates
        - creator
        - hub_id
        - state
      properties:
        id:
          $ref: '#/components/schemas/ID'
        hub_id:
          $ref: '#/components/schemas/HubID'
        queue:
          type: string
          description: A dash separated string showing the environment_id where the job is taking place.
        caption:
          type: string
          description: A short description of the job.
        events:
          title: JobEvents
          type: object
          description: A collection of timestamps for each event in the job's lifetime.
          required:
            - queued
            - completed
            - started
          properties:
            queued:
              description: The timestamp of when the job was queued.
              $ref: '#/components/schemas/DateTime'
            completed:
              description: The timestamp of when the job was completed.
              $ref: '#/components/schemas/DateTime'
            started:
              description: The timestamp of when the job was started.
              $ref: '#/components/schemas/DateTime'
        schedule:
          description: A timestamp of when the job was scheduled.
          $ref: '#/components/schemas/DateTime'
        tasks:
          description: An array of job tasks.
          type: array
          items:
            $ref: '#/components/schemas/JobTasks'
        expires:
          description: A timestamp for when the job expires.
          $ref: '#/components/schemas/DateTime'
        hash:
          type: string
          description: A combination of the individual task details and job details.
        limit_duplicates:
          type: boolean
          description: A boolean where true represents the job is set to prevent duplicates of itself quickly after creation.
        creator:
          $ref: '#/components/schemas/CreatorScope'
        state:
          $ref: '#/components/schemas/JobState'
    JobIncludes:
      title: JobIncludes
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    StackInclude:
      title: StackIncludes
      description: All includable resources linkable to the given stack.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
    StackBuildInclude:
      title: StackBuildIncludes
      description: All includable resources linkable to a given stack build.
      type: object
      properties:
        stack_id:
          type: string
          description: The ID for the stack this build is associated with.
        hub_id:
          $ref: '#/components/schemas/HubID'
        about:
          type: object
          description: Information about the stack build.
          required:
            - version
            - description
          properties:
            version:
              type: string
              description: A user defined version of the build.
            description:
              type: string
              description: A user defined description for the build.
            git_commit:
              $ref: '#/components/schemas/StackGitCommit'
        instructions:
          type: object
          description: Git information on where to pull stack resources from.
          properties:
            git:
              type: object
              description: Git information specifics.
              required:
                - type
                - value
              properties:
                type:
                  type: string
                  description: The type of information the user is passing.
                  enum:
                    - hash
                    - tag
                value:
                  type: string
                  description: The actual value to be passed.
        events:
          title: StackBuildEvents
          type: object
          description: A collection of timestamps for each event in the stack build's lifetime.
          required:
            - created
            - updated
            - deleted
          properties:
            created:
              description: The timestamp of when the stack build was created.
              $ref: '#/components/schemas/DateTime'
            updated:
              description: The timestamp of when the stack build was updated.
              $ref: '#/components/schemas/DateTime'
            deleted:
              description: The timestamp of when the stack build was deleted.
              $ref: '#/components/schemas/DateTime'
        state:
          $ref: '#/components/schemas/StackBuildState'
    GenerateStackBuildAction:
      title: GenerateStackBuild
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The job to do.
          enum:
            - generate
    DeployStackBuildAction:
      title: DeployStackBuild
      type: object
      required:
        - action
        - contents
      properties:
        action:
          type: string
          description: The action the job takes.
          enum:
            - deploy
        contents:
          type: object
          description: Additional information needed for the job.
          required:
            - environment_id
          properties:
            environment_id:
              type: string
              description: The ID for the environment this stack build will be deployed to.
            update:
              $ref: '#/components/schemas/StackBuildContainerUpdate'
    NetworkIncludes:
      title: NetworkIncludes
      description: All includable resource linkable to the given network.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        environments:
          $ref: '#/components/schemas/EnvironmentIncludes'
    PipelineIncludes:
      title: PipelineIncludes
      description: All includable resources linkable to the given pipeline.
      type: object
      properties:
        creators:
          $ref: '#/components/schemas/CreatorInclude'
        name:
          type: string
          description: A name value.
        components:
          type: object
          description: A record of resources that can be associated with the pipeline.
          additionalProperties:
            anyOf:
              - $ref: '#/components/schemas/Container'
              - $ref: '#/components/schemas/Environment'
              - $ref: '#/components/schemas/Stack'
              - $ref: '#/components/schemas/StackBuild'
              - $ref: '#/components/schemas/Image'
              - $ref: '#/components/schemas/ImageSource'
    PipelineRunEvents:
      title: PipelineRunEvents
      type: object
      description: A collection of timestamps for each event in the pipeline run's lifetime.
      required:
        - started
        - queued
        - finished
      properties:
        started:
          description: The timestamp of when the pipeline run was started.
          $ref: '#/components/schemas/DateTime'
        queued:
          description: The timestamp of when the pipeline run was queued.
          $ref: '#/components/schemas/DateTime'
        finished:
          description: The timestamp of when the pipeline run was finished.
          $ref: '#/components/schemas/DateTime'
    RunState:
      title: PipelineRunState
      allOf:
        - required:
            - current
          properties:
            current:
              description: The current state of the pipeline run.
              type: string
              enum:
                - new
                - queued
                - running
                - deleting
                - deleted
        - $ref: '#/components/schemas/State'
    Run:
      title: PipelineRun
      type: object
      description: A pipeline run resource.
      required:
        - id
        - creator
        - hub_id
        - pipeline_id
        - stages
        - state
        - events
      properties:
        id:
          $ref: '#/components/schemas/ID'
        creator:
          $ref: '#/components/schemas/CreatorScope'
        hub_id:
          $ref: '#/components/schemas/HubID'
        pipeline_id:
          type: string
          description: The ID for the pipeline this run belongs to.
        stages:
          type: array
          description: An array of pipeline stages.
          items:
            type: object
            required:
              - identifier
              - steps
              - events
            properties:
              identifier:
                type: string
                description: A stage identifier.
              steps:
                type: array
                items:
                  type: object
                  required:
                    - identifier
                    - action
                    - events
                    - success
                  properties:
                    identifier:
                      type: string
                    action:
                      type: string
                      enum:
                        - environment.create
                        - environment.start
                        - environment.stop
                        - environment.delete
                        - image.source.create
                        - image.create
                        - image.import
                        - images.prune
                        - container.create
                        - container.reimage
                        - container.start
                        - container.stop
                        - container.restart
                        - container.delete
                        - stack.build.create
                        - stack.build.deploy
                        - stack.build.generate
                        - sleep
                        - webhook.post
                    events:
                      $ref: '#/components/schemas/PipelineRunEvents'
                    success:
                      type: boolean
              events:
                $ref: '#/components/schemas/PipelineRunEvents'
        state:
          $ref: '#/components/schemas/RunState'
        events:
          $ref: '#/components/schemas/PipelineRunEvents'
    HubNotificationToken:
      title: HubNotificationPipelineAuthResponse
      description: A token resource.
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: A token used for connecting to the hub notification pipeline websocket API.
    InstanceConsoleAuth:
      title: InstanceConsoleAuth
      description: Resources needed to connect to the instance console websocket.
      type: object
      required:
        - token
        - address
      properties:
        token:
          type: string
          description: A token used for connecting to the instance console through the websocket API.
        address:
          type: string
          description: The protocol and url for connecting to the console.
    Range:
      title: Range
      type: object
      description: A start and end date-time pair indicating a range of time
      required:
        - start
        - end
      properties:
        start:
          $ref: '#/components/schemas/DateTime'
        end:
          $ref: '#/components/schemas/DateTime'
    SecurityIncident:
      title: SecurityIncident
      type: object
      description: Details about a security incident/event that occurred.
      required:
        - risk
        - surface
        - event
        - attack
        - count
      properties:
        risk:
          type: string
          description: The risk level of the security.
          enum:
            - info
            - low
            - medium
            - high
            - critical
        surface:
          type: string
          description: The vector of attack.
          enum:
            - network
            - service
            - fs
            - api
        event:
          type: string
          description: How the platform handled the event.
          enum:
            - suggestion
            - notice
            - prevention
            - detection
            - reaction
        attack:
          type: string
          description: The type of attack detected.
          enum:
            - none
            - auth-failure
            - brute-force
            - exploit-vulnerability
            - social-engineer
            - service-interruption
            - access-elevation
        count:
          type: integer
    SecurityReportSummary:
      title: SecurityReportSummary
      type: object
      description: A summary of the incidents tags accumulated over the report's range.
      required:
        - incidents
      properties:
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/SecurityIncident'
    SecuritySnapshotIncidentBreakdown:
      title: SecuritySnapshotIncidentBreakdown
      type: object
      description: A breakdown of a snapshot's incidents inside a security report.
      required:
        - surface
        - attack
      properties:
        surface:
          type: object
          properties:
            network:
              type: integer
            service:
              type: integer
            fs:
              type: integer
            api:
              type: integer
        attack:
          type: object
          properties:
            none:
              type: integer
            auth-failure:
              type: integer
            brute-force:
              type: integer
            exploit-vulnerability:
              type: integer
            social-engineer:
              type: integer
            service-interruption:
              type: integer
            access-elevation:
              type: integer
    SecurityReportSnapshot:
      title: SecurityReportSnapshot
      type: object
      description: A snapshot of security events for the given interval.
      required:
        - time
        - incidents
        - count
      properties:
        time:
          $ref: '#/components/schemas/DateTime'
        incidents:
          type: object
          properties:
            info:
              $ref: '#/components/schemas/SecuritySnapshotIncidentBreakdown'
            low:
              $ref: '#/components/schemas/SecuritySnapshotIncidentBreakdown'
            medium:
              $ref: '#/components/schemas/SecuritySnapshotIncidentBreakdown'
            high:
              $ref: '#/components/schemas/SecuritySnapshotIncidentBreakdown'
            critical:
              $ref: '#/components/schemas/SecuritySnapshotIncidentBreakdown'
        count:
          type: integer
    SecurityReport:
      title: SecurityReport
      type: object
      description: A report of all security events captured by the platform over a range of time.
      required:
        - hub_id
        - created
        - range
        - summary
        - snapshots
      properties:
        hub_id:
          $ref: '#/components/schemas/HubID'
        created:
          $ref: '#/components/schemas/DateTime'
        range:
          $ref: '#/components/schemas/Range'
          description: The period over which the report was generated.
        summary:
          $ref: '#/components/schemas/SecurityReportSummary'
        snapshots:
          description: The ID of the environment this instnace is in.
          type: array
          items:
            $ref: '#/components/schemas/SecurityReportSnapshot'
  responses:
    '400':
      description: This usually means the data sent was in an invalid format.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '401':
      description: Authorization is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '403':
      description: Access to this resource is forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '404':
      description: The requested resource doesn't exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '409':
      description: The requested change (usually a PATCH request) would cause a conflict with an existing resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '415':
      description: This IP Address has been rate limited.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '422':
      description: The request body is invalid for this endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '500':
      description: Indicates an issue with Cycle. [RARE]
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
    '503':
      description: Cycle is preparing the requested resource, but the resource isn't ready yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorEnvelope'
  parameters:
    SortParam:
      name: sort
      in: query
      style: form
      required: false
      description: An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
      schema:
        type: array
        items:
          type: string
    FilterParam:
      name: filter
      in: query
      required: false
      schema:
        type: object
        additionalProperties:
          type: string
          oneOf:
            - type: string
            - type: array
              items:
                type: string
            - type: object
              additionalProperties:
                type: string
      style: deepObject
    PageParam:
      name: page
      in: query
      required: false
      description: In a list return, the data associated with the page number and size returned. 20 results per page, page 2 would be `page[size]=20&page[number]=2`
      explode: true
      style: deepObject
      schema:
        type: object
        properties:
          number:
            type: number
            description: The page to jump to
          size:
            type: number
            description: The number of resources returned per page.
    OptionParam:
      name: option
      in: query
      required: false
      description: The option field is a key-value object, where the key is the option, and the value is a boolean. For example, `?option[force]=true`
      schema:
        type: object
        additionalProperties:
          type: string
          oneOf:
            - type: string
      style: deepObject
